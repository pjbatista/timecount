{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/browserify/lib/_empty.js","node_modules/decimal.js/decimal.js","node_modules/path-browserify/index.js","node_modules/process/browser.js","src/index.ts","src/localization.ts","src/utils.ts"],"names":[],"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","file":"timecount.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","","/*! decimal.js v10.0.1 https://github.com/MikeMcl/decimal.js/LICENCE */\r\n;(function (globalScope) {\r\n  'use strict';\r\n\r\n\r\n  /*\r\n   *  decimal.js v10.0.1\r\n   *  An arbitrary-precision Decimal type for JavaScript.\r\n   *  https://github.com/MikeMcl/decimal.js\r\n   *  Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n   *  MIT Licence\r\n   */\r\n\r\n\r\n  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n    // The maximum exponent magnitude.\r\n    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\n  var EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n    // The limit on the value of `precision`, and on the value of the first argument to\r\n    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n    MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n    // Base conversion alphabet.\r\n    NUMERALS = '0123456789abcdef',\r\n\r\n    // The natural logarithm of 10 (1025 digits).\r\n    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n    // Pi (1025 digits).\r\n    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n    // The initial configuration properties of the Decimal constructor.\r\n    DEFAULTS = {\r\n\r\n      // These values must be integers within the stated ranges (inclusive).\r\n      // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n      // The maximum number of significant digits of the result of a calculation or base conversion.\r\n      // E.g. `Decimal.config({ precision: 20 });`\r\n      precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n      // The rounding mode used when rounding to `precision`.\r\n      //\r\n      // ROUND_UP         0 Away from zero.\r\n      // ROUND_DOWN       1 Towards zero.\r\n      // ROUND_CEIL       2 Towards +Infinity.\r\n      // ROUND_FLOOR      3 Towards -Infinity.\r\n      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      //\r\n      // E.g.\r\n      // `Decimal.rounding = 4;`\r\n      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n      rounding: 4,                           // 0 to 8\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n      // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN  6 The IEEE 754 remainder function.\r\n      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n      //\r\n      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n      // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n      // be used, but they may not give useful results.\r\n      modulo: 1,                             // 0 to 9\r\n\r\n      // The exponent value at and beneath which `toString` returns exponential notation.\r\n      // JavaScript numbers: -7\r\n      toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n      // The exponent value at and above which `toString` returns exponential notation.\r\n      // JavaScript numbers: 21\r\n      toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // JavaScript numbers: -324  (5e-324)\r\n      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      crypto: false                          // true/false\r\n    },\r\n\r\n\r\n  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n    Decimal, inexact, noConflict, quadrant,\r\n    external = true,\r\n\r\n    decimalError = '[DecimalError] ',\r\n    invalidArgument = decimalError + 'Invalid argument: ',\r\n    precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n    cryptoUnavailable = decimalError + 'crypto unavailable',\r\n\r\n    mathfloor = Math.floor,\r\n    mathpow = Math.pow,\r\n\r\n    isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n    isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n    isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n    isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n    BASE = 1e7,\r\n    LOG_BASE = 7,\r\n    MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n    LN10_PRECISION = LN10.length - 1,\r\n    PI_PRECISION = PI.length - 1,\r\n\r\n    // Decimal.prototype object\r\n    P = { name: '[object Decimal]' };\r\n\r\n\r\n  // Decimal prototype methods\r\n\r\n\r\n  /*\r\n   *  absoluteValue             abs\r\n   *  ceil\r\n   *  comparedTo                cmp\r\n   *  cosine                    cos\r\n   *  cubeRoot                  cbrt\r\n   *  decimalPlaces             dp\r\n   *  dividedBy                 div\r\n   *  dividedToIntegerBy        divToInt\r\n   *  equals                    eq\r\n   *  floor\r\n   *  greaterThan               gt\r\n   *  greaterThanOrEqualTo      gte\r\n   *  hyperbolicCosine          cosh\r\n   *  hyperbolicSine            sinh\r\n   *  hyperbolicTangent         tanh\r\n   *  inverseCosine             acos\r\n   *  inverseHyperbolicCosine   acosh\r\n   *  inverseHyperbolicSine     asinh\r\n   *  inverseHyperbolicTangent  atanh\r\n   *  inverseSine               asin\r\n   *  inverseTangent            atan\r\n   *  isFinite\r\n   *  isInteger                 isInt\r\n   *  isNaN\r\n   *  isNegative                isNeg\r\n   *  isPositive                isPos\r\n   *  isZero\r\n   *  lessThan                  lt\r\n   *  lessThanOrEqualTo         lte\r\n   *  logarithm                 log\r\n   *  [maximum]                 [max]\r\n   *  [minimum]                 [min]\r\n   *  minus                     sub\r\n   *  modulo                    mod\r\n   *  naturalExponential        exp\r\n   *  naturalLogarithm          ln\r\n   *  negated                   neg\r\n   *  plus                      add\r\n   *  precision                 sd\r\n   *  round\r\n   *  sine                      sin\r\n   *  squareRoot                sqrt\r\n   *  tangent                   tan\r\n   *  times                     mul\r\n   *  toBinary\r\n   *  toDecimalPlaces           toDP\r\n   *  toExponential\r\n   *  toFixed\r\n   *  toFraction\r\n   *  toHexadecimal             toHex\r\n   *  toNearest\r\n   *  toNumber\r\n   *  toOctal\r\n   *  toPower                   pow\r\n   *  toPrecision\r\n   *  toSignificantDigits       toSD\r\n   *  toString\r\n   *  truncated                 trunc\r\n   *  valueOf                   toJSON\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of this Decimal.\r\n   *\r\n   */\r\n  P.absoluteValue = P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    if (x.s < 0) x.s = 1;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of positive Infinity.\r\n   *\r\n   */\r\n  P.ceil = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if the value of this Decimal is greater than the value of `y`,\r\n   *  -1    if the value of this Decimal is less than the value of `y`,\r\n   *   0    if they have the same value,\r\n   *   NaN  if the value of either Decimal is NaN.\r\n   *\r\n   */\r\n  P.comparedTo = P.cmp = function (y) {\r\n    var i, j, xdL, ydL,\r\n      x = this,\r\n      xd = x.d,\r\n      yd = (y = new x.constructor(y)).d,\r\n      xs = x.s,\r\n      ys = y.s;\r\n\r\n    // Either NaN or ±Infinity?\r\n    if (!xd || !yd) {\r\n      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Either zero?\r\n    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n    // Signs differ?\r\n    if (xs !== ys) return xs;\r\n\r\n    // Compare exponents.\r\n    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * cos(0)         = 1\r\n   * cos(-0)        = 1\r\n   * cos(Infinity)  = NaN\r\n   * cos(-Infinity) = NaN\r\n   * cos(NaN)       = NaN\r\n   *\r\n   */\r\n  P.cosine = P.cos = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.d) return new Ctor(NaN);\r\n\r\n    // cos(0) = cos(-0) = 1\r\n    if (!x.d[0]) return new Ctor(1);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *\r\n   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   *  cbrt(0)  =  0\r\n   *  cbrt(-0) = -0\r\n   *  cbrt(1)  =  1\r\n   *  cbrt(-1) = -1\r\n   *  cbrt(N)  =  N\r\n   *  cbrt(-I) = -I\r\n   *  cbrt(I)  =  I\r\n   *\r\n   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n   *\r\n   */\r\n  P.cubeRoot = P.cbrt = function () {\r\n    var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = x.s * Math.pow(x.s * x, 1 / 3);\r\n\r\n     // Math.cbrt underflow/overflow?\r\n     // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n    if (!s || Math.abs(s) == 1 / 0) {\r\n      n = digitsToString(x.d);\r\n      e = x.e;\r\n\r\n      // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n      s = Math.pow(n, 1 / 3);\r\n\r\n      // Rarely, e may be one less than the result exponent value.\r\n      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n      if (s == 1 / 0) {\r\n        n = '5e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n      r.s = x.s;\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Halley's method.\r\n    // TODO? Compare Newton's method.\r\n    for (;;) {\r\n      t = r;\r\n      t3 = t.times(t).times(t);\r\n      t3plusx = t3.plus(x);\r\n      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n        // , i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of decimal places of the value of this Decimal.\r\n   *\r\n   */\r\n  P.decimalPlaces = P.dp = function () {\r\n    var w,\r\n      d = this.d,\r\n      n = NaN;\r\n\r\n    if (d) {\r\n      w = d.length - 1;\r\n      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      w = d[w];\r\n      if (w) for (; w % 10 == 0; w /= 10) n--;\r\n      if (n < 0) n = 0;\r\n    }\r\n\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   *  n / 0 = I\r\n   *  n / N = N\r\n   *  n / I = 0\r\n   *  0 / n = 0\r\n   *  0 / 0 = N\r\n   *  0 / N = N\r\n   *  0 / I = 0\r\n   *  N / n = N\r\n   *  N / 0 = N\r\n   *  N / N = N\r\n   *  N / I = N\r\n   *  I / n = I\r\n   *  I / 0 = I\r\n   *  I / N = N\r\n   *  I / I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedBy = P.div = function (y) {\r\n    return divide(this, new this.constructor(y));\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.dividedToIntegerBy = P.divToInt = function (y) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.equals = P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n   * direction of negative Infinity.\r\n   *\r\n   */\r\n  P.floor = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 3);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n   * false.\r\n   *\r\n   */\r\n  P.greaterThan = P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  P.greaterThanOrEqualTo = P.gte = function (y) {\r\n    var k = this.cmp(y);\r\n    return k == 1 || k === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [1, Infinity]\r\n   *\r\n   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n   *\r\n   * cosh(0)         = 1\r\n   * cosh(-0)        = 1\r\n   * cosh(Infinity)  = Infinity\r\n   * cosh(-Infinity) = Infinity\r\n   * cosh(NaN)       = NaN\r\n   *\r\n   *  x        time taken (ms)   result\r\n   * 1000      9                 9.8503555700852349694e+433\r\n   * 10000     25                4.4034091128314607936e+4342\r\n   * 100000    171               1.4033316802130615897e+43429\r\n   * 1000000   3817              1.5166076984010437725e+434294\r\n   * 10000000  abandoned after 2 minute wait\r\n   *\r\n   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicCosine = P.cosh = function () {\r\n    var k, n, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      one = new Ctor(1);\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n    if (x.isZero()) return one;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    // TODO? Estimation reused from cosine() and may not be optimal here.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      n = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      n = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n    // Reverse argument reduction\r\n    var cosh2_x,\r\n      i = k,\r\n      d8 = new Ctor(8);\r\n    for (; i--;) {\r\n      cosh2_x = x.times(x);\r\n      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n    }\r\n\r\n    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n   *\r\n   * sinh(0)         = 0\r\n   * sinh(-0)        = -0\r\n   * sinh(Infinity)  = Infinity\r\n   * sinh(-Infinity) = -Infinity\r\n   * sinh(NaN)       = NaN\r\n   *\r\n   * x        time taken (ms)\r\n   * 10       2 ms\r\n   * 100      5 ms\r\n   * 1000     14 ms\r\n   * 10000    82 ms\r\n   * 100000   886 ms            1.4033316802130615897e+43429\r\n   * 200000   2613 ms\r\n   * 300000   5407 ms\r\n   * 400000   8824 ms\r\n   * 500000   13026 ms          8.7080643612718084129e+217146\r\n   * 1000000  48543 ms\r\n   *\r\n   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n   *\r\n   */\r\n  P.hyperbolicSine = P.sinh = function () {\r\n    var k, pr, rm, len,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    len = x.d.length;\r\n\r\n    if (len < 3) {\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n    } else {\r\n\r\n      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n      // 3 multiplications and 1 addition\r\n\r\n      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n      // 4 multiplications and 2 additions\r\n\r\n      // Estimate the optimum number of times to use the argument reduction.\r\n      k = 1.4 * Math.sqrt(len);\r\n      k = k > 16 ? 16 : k | 0;\r\n\r\n      x = x.times(Math.pow(5, -k));\r\n\r\n      x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n      // Reverse argument reduction\r\n      var sinh2_x,\r\n        d5 = new Ctor(5),\r\n        d16 = new Ctor(16),\r\n        d20 = new Ctor(20);\r\n      for (; k--;) {\r\n        sinh2_x = x.times(x);\r\n        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n      }\r\n    }\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * tanh(x) = sinh(x) / cosh(x)\r\n   *\r\n   * tanh(0)         = 0\r\n   * tanh(-0)        = -0\r\n   * tanh(Infinity)  = 1\r\n   * tanh(-Infinity) = -1\r\n   * tanh(NaN)       = NaN\r\n   *\r\n   */\r\n  P.hyperbolicTangent = P.tanh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(x.s);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 7;\r\n    Ctor.rounding = 1;\r\n\r\n    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n   * this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [0, pi]\r\n   *\r\n   * acos(x) = pi/2 - asin(x)\r\n   *\r\n   * acos(0)       = pi/2\r\n   * acos(-0)      = pi/2\r\n   * acos(1)       = 0\r\n   * acos(-1)      = pi\r\n   * acos(1/2)     = pi/3\r\n   * acos(-1/2)    = 2*pi/3\r\n   * acos(|x| > 1) = NaN\r\n   * acos(NaN)     = NaN\r\n   *\r\n   */\r\n  P.inverseCosine = P.acos = function () {\r\n    var halfPi,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      k = x.abs().cmp(1),\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n      return k === 0\r\n        // |x| is 1\r\n        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n        // |x| > 1 or x is NaN\r\n        : new Ctor(NaN);\r\n    }\r\n\r\n    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.asin();\r\n    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return halfPi.minus(x);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [1, Infinity]\r\n   * Range: [0, Infinity]\r\n   *\r\n   * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n   *\r\n   * acosh(x < 1)     = NaN\r\n   * acosh(NaN)       = NaN\r\n   * acosh(Infinity)  = Infinity\r\n   * acosh(-Infinity) = NaN\r\n   * acosh(0)         = NaN\r\n   * acosh(-0)        = NaN\r\n   * acosh(1)         = 0\r\n   * acosh(-1)        = NaN\r\n   *\r\n   */\r\n  P.inverseHyperbolicCosine = P.acosh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n    if (!x.isFinite()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n   *\r\n   * asinh(NaN)       = NaN\r\n   * asinh(Infinity)  = Infinity\r\n   * asinh(-Infinity) = -Infinity\r\n   * asinh(0)         = 0\r\n   * asinh(-0)        = -0\r\n   *\r\n   */\r\n  P.inverseHyperbolicSine = P.asinh = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n    Ctor.rounding = 1;\r\n    external = false;\r\n\r\n    x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n    external = true;\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.ln();\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n   * value of this Decimal.\r\n   *\r\n   * Domain: [-1, 1]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n   *\r\n   * atanh(|x| > 1)   = NaN\r\n   * atanh(NaN)       = NaN\r\n   * atanh(Infinity)  = NaN\r\n   * atanh(-Infinity) = NaN\r\n   * atanh(0)         = 0\r\n   * atanh(-0)        = -0\r\n   * atanh(1)         = Infinity\r\n   * atanh(-1)        = -Infinity\r\n   *\r\n   */\r\n  P.inverseHyperbolicTangent = P.atanh = function () {\r\n    var pr, rm, wpr, xsd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    xsd = x.sd();\r\n\r\n    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n    Ctor.precision = wpr = xsd - x.e;\r\n\r\n    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n    Ctor.precision = pr + 4;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.ln();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(0.5);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n   * Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n   *\r\n   * asin(0)       = 0\r\n   * asin(-0)      = -0\r\n   * asin(1/2)     = pi/6\r\n   * asin(-1/2)    = -pi/6\r\n   * asin(1)       = pi/2\r\n   * asin(-1)      = -pi/2\r\n   * asin(|x| > 1) = NaN\r\n   * asin(NaN)     = NaN\r\n   *\r\n   * TODO? Compare performance of Taylor series.\r\n   *\r\n   */\r\n  P.inverseSine = P.asin = function () {\r\n    var halfPi, k,\r\n      pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    k = x.abs().cmp(1);\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (k !== -1) {\r\n\r\n      // |x| is 1\r\n      if (k === 0) {\r\n        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        halfPi.s = x.s;\r\n        return halfPi;\r\n      }\r\n\r\n      // |x| > 1 or x is NaN\r\n      return new Ctor(NaN);\r\n    }\r\n\r\n    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n    Ctor.precision = pr + 6;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return x.times(2);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n   * of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi/2, pi/2]\r\n   *\r\n   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n   *\r\n   * atan(0)         = 0\r\n   * atan(-0)        = -0\r\n   * atan(1)         = pi/4\r\n   * atan(-1)        = -pi/4\r\n   * atan(Infinity)  = pi/2\r\n   * atan(-Infinity) = -pi/2\r\n   * atan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.inverseTangent = P.atan = function () {\r\n    var i, j, k, n, px, t, r, wpr, x2,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding;\r\n\r\n    if (!x.isFinite()) {\r\n      if (!x.s) return new Ctor(NaN);\r\n      if (pr + 4 <= PI_PRECISION) {\r\n        r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n        r.s = x.s;\r\n        return r;\r\n      }\r\n    } else if (x.isZero()) {\r\n      return new Ctor(x);\r\n    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n\r\n    Ctor.precision = wpr = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n    // Argument reduction\r\n    // Ensure |x| < 0.42\r\n    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n    k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n    external = false;\r\n\r\n    j = Math.ceil(wpr / LOG_BASE);\r\n    n = 1;\r\n    x2 = x.times(x);\r\n    r = new Ctor(x);\r\n    px = x;\r\n\r\n    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n    for (; i !== -1;) {\r\n      px = px.times(x2);\r\n      t = r.minus(px.div(n += 2));\r\n\r\n      px = px.times(x2);\r\n      r = t.plus(px.div(n += 2));\r\n\r\n      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n    }\r\n\r\n    if (k) r = r.times(2 << (k - 1));\r\n\r\n    external = true;\r\n\r\n    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n   *\r\n   */\r\n  P.isFinite = function () {\r\n    return !!this.d;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is an integer, otherwise return false.\r\n   *\r\n   */\r\n  P.isInteger = P.isInt = function () {\r\n    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is NaN, otherwise return false.\r\n   *\r\n   */\r\n  P.isNaN = function () {\r\n    return !this.s;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is negative, otherwise return false.\r\n   *\r\n   */\r\n  P.isNegative = P.isNeg = function () {\r\n    return this.s < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is positive, otherwise return false.\r\n   *\r\n   */\r\n  P.isPositive = P.isPos = function () {\r\n    return this.s > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n   *\r\n   */\r\n  P.isZero = function () {\r\n    return !!this.d && this.d[0] === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThan = P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n   *\r\n   */\r\n  P.lessThanOrEqualTo = P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * If no base is specified, return log[10](arg).\r\n   *\r\n   * log[base](arg) = ln(arg) / ln(base)\r\n   *\r\n   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n   * otherwise:\r\n   *\r\n   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n   * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n   *\r\n   * log[-b](a)       = NaN\r\n   * log[0](a)        = NaN\r\n   * log[1](a)        = NaN\r\n   * log[NaN](a)      = NaN\r\n   * log[Infinity](a) = NaN\r\n   * log[b](0)        = -Infinity\r\n   * log[b](-0)       = -Infinity\r\n   * log[b](-a)       = NaN\r\n   * log[b](1)        = 0\r\n   * log[b](Infinity) = Infinity\r\n   * log[b](NaN)      = NaN\r\n   *\r\n   * [base] {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  P.logarithm = P.log = function (base) {\r\n    var isBase10, d, denominator, k, inf, num, sd, r,\r\n      arg = this,\r\n      Ctor = arg.constructor,\r\n      pr = Ctor.precision,\r\n      rm = Ctor.rounding,\r\n      guard = 5;\r\n\r\n    // Default base is 10.\r\n    if (base == null) {\r\n      base = new Ctor(10);\r\n      isBase10 = true;\r\n    } else {\r\n      base = new Ctor(base);\r\n      d = base.d;\r\n\r\n      // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n      isBase10 = base.eq(10);\r\n    }\r\n\r\n    d = arg.d;\r\n\r\n    // Is arg negative, non-finite, 0 or 1?\r\n    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n    }\r\n\r\n    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n    // integer power of 10.\r\n    if (isBase10) {\r\n      if (d.length > 1) {\r\n        inf = true;\r\n      } else {\r\n        for (k = d[0]; k % 10 === 0;) k /= 10;\r\n        inf = k !== 1;\r\n      }\r\n    }\r\n\r\n    external = false;\r\n    sd = pr + guard;\r\n    num = naturalLogarithm(arg, sd);\r\n    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n    // The result will have 5 rounding digits.\r\n    r = divide(num, denominator, sd, 1);\r\n\r\n    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n    // calculate 10 further digits.\r\n    //\r\n    // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n    // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n    // further digits, the last 14 are nines, round up and assume the result is exact.\r\n    // Also assume the result is exact if the last 14 are zero.\r\n    //\r\n    // Example of a result that will be incorrectly rounded:\r\n    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n    // place is still 2.6.\r\n    if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n      do {\r\n        sd += 10;\r\n        num = naturalLogarithm(arg, sd);\r\n        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n        r = divide(num, denominator, sd, 1);\r\n\r\n        if (!inf) {\r\n\r\n          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n            r = finalise(r, pr + 1, 0);\r\n          }\r\n\r\n          break;\r\n        }\r\n      } while (checkRoundingDigits(r.d, k += 10, rm));\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.max = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'lt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n  P.min = function () {\r\n    Array.prototype.push.call(arguments, this);\r\n    return maxOrMin(this.constructor, arguments, 'gt');\r\n  };\r\n   */\r\n\r\n\r\n  /*\r\n   *  n - 0 = n\r\n   *  n - N = N\r\n   *  n - I = -I\r\n   *  0 - n = -n\r\n   *  0 - 0 = 0\r\n   *  0 - N = N\r\n   *  0 - I = -I\r\n   *  N - n = N\r\n   *  N - 0 = N\r\n   *  N - N = N\r\n   *  N - I = N\r\n   *  I - n = I\r\n   *  I - 0 = I\r\n   *  I - N = N\r\n   *  I - I = N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return y negated if x is finite and y is ±Infinity.\r\n      else if (x.d) y.s = -y.s;\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with different signs.\r\n      // Return NaN if both are ±Infinity with the same sign.\r\n      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n    // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.plus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return y negated if x is zero and y is non-zero.\r\n      if (yd[0]) y.s = -y.s;\r\n\r\n      // Return x if y is zero and x is non-zero.\r\n      else if (xd[0]) y = new Ctor(x);\r\n\r\n      // Return zero if both are zero.\r\n      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n      else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    e = mathfloor(y.e / LOG_BASE);\r\n    xe = mathfloor(x.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    k = xe - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (k) {\r\n      xLTy = k < 0;\r\n\r\n      if (xLTy) {\r\n        d = xd;\r\n        k = -k;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = xe;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Numbers with massively different exponents would result in a very high number of\r\n      // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n      if (k > i) {\r\n        k = i;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents.\r\n      d.reverse();\r\n      for (i = k; i--;) d.push(0);\r\n      d.reverse();\r\n\r\n    // Base 1e7 exponents equal.\r\n    } else {\r\n\r\n      // Check digits to determine which is the bigger number.\r\n\r\n      i = xd.length;\r\n      len = yd.length;\r\n      xLTy = i < len;\r\n      if (xLTy) len = i;\r\n\r\n      for (i = 0; i < len; i++) {\r\n        if (xd[i] != yd[i]) {\r\n          xLTy = xd[i] < yd[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      k = 0;\r\n    }\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      xd = yd;\r\n      yd = d;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    len = xd.length;\r\n\r\n    // Append zeros to `xd` if shorter.\r\n    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n    // Subtract yd from xd.\r\n    for (i = yd.length; i > k;) {\r\n\r\n      if (xd[--i] < yd[i]) {\r\n        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n        --xd[j];\r\n        xd[i] += BASE;\r\n      }\r\n\r\n      xd[i] -= yd[i];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] === 0;) xd.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n    // Zero?\r\n    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   *   n % 0 =  N\r\n   *   n % N =  N\r\n   *   n % I =  n\r\n   *   0 % n =  0\r\n   *  -0 % n = -0\r\n   *   0 % 0 =  N\r\n   *   0 % N =  N\r\n   *   0 % I =  0\r\n   *   N % n =  N\r\n   *   N % 0 =  N\r\n   *   N % N =  N\r\n   *   N % I =  N\r\n   *   I % n =  N\r\n   *   I % 0 =  N\r\n   *   I % N =  N\r\n   *   I % I =  N\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * The result depends on the modulo mode.\r\n   *\r\n   */\r\n  P.modulo = P.mod = function (y) {\r\n    var q,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n    // Return x if y is ±Infinity or x is ±0.\r\n    if (!y.d || x.d && !x.d[0]) {\r\n      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n    }\r\n\r\n    // Prevent rounding of intermediate calculations.\r\n    external = false;\r\n\r\n    if (Ctor.modulo == 9) {\r\n\r\n      // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n      // result = x - q * y    where  0 <= result < abs(y)\r\n      q = divide(x, y.abs(), 0, 3, 1);\r\n      q.s *= y.s;\r\n    } else {\r\n      q = divide(x, y, 0, Ctor.modulo, 1);\r\n    }\r\n\r\n    q = q.times(y);\r\n\r\n    external = true;\r\n\r\n    return x.minus(q);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalExponential = P.exp = function () {\r\n    return naturalExponential(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.naturalLogarithm = P.ln = function () {\r\n    return naturalLogarithm(this);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n   * -1.\r\n   *\r\n   */\r\n  P.negated = P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return finalise(x);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n + 0 = n\r\n   *  n + N = N\r\n   *  n + I = I\r\n   *  0 + n = n\r\n   *  0 + 0 = 0\r\n   *  0 + N = N\r\n   *  0 + I = I\r\n   *  N + n = N\r\n   *  N + 0 = N\r\n   *  N + N = N\r\n   *  N + I = N\r\n   *  I + n = I\r\n   *  I + 0 = I\r\n   *  I + N = N\r\n   *  I + I = I\r\n   *\r\n   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    y = new Ctor(y);\r\n\r\n    // If either is not finite...\r\n    if (!x.d || !y.d) {\r\n\r\n      // Return NaN if either is NaN.\r\n      if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n      // Return x if y is finite and x is ±Infinity.\r\n      // Return x if both are ±Infinity with the same sign.\r\n      // Return NaN if both are ±Infinity with different signs.\r\n      // Return y if x is finite and y is ±Infinity.\r\n      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n      return y;\r\n    }\r\n\r\n     // If signs differ...\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    xd = x.d;\r\n    yd = y.d;\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    // If either is zero...\r\n    if (!xd[0] || !yd[0]) {\r\n\r\n      // Return x if y is zero.\r\n      // Return y if y is non-zero.\r\n      if (!yd[0]) y = new Ctor(x);\r\n\r\n      return external ? finalise(y, pr, rm) : y;\r\n    }\r\n\r\n    // x and y are finite, non-zero numbers with the same sign.\r\n\r\n    // Calculate base 1e7 exponents.\r\n    k = mathfloor(x.e / LOG_BASE);\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    xd = xd.slice();\r\n    i = k - e;\r\n\r\n    // If base 1e7 exponents differ...\r\n    if (i) {\r\n\r\n      if (i < 0) {\r\n        d = xd;\r\n        i = -i;\r\n        len = yd.length;\r\n      } else {\r\n        d = yd;\r\n        e = k;\r\n        len = xd.length;\r\n      }\r\n\r\n      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n      k = Math.ceil(pr / LOG_BASE);\r\n      len = k > len ? k + 1 : len + 1;\r\n\r\n      if (i > len) {\r\n        i = len;\r\n        d.length = 1;\r\n      }\r\n\r\n      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n      d.reverse();\r\n      for (; i--;) d.push(0);\r\n      d.reverse();\r\n    }\r\n\r\n    len = xd.length;\r\n    i = yd.length;\r\n\r\n    // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n    if (len - i < 0) {\r\n      i = len;\r\n      d = yd;\r\n      yd = xd;\r\n      xd = d;\r\n    }\r\n\r\n    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n    for (carry = 0; i;) {\r\n      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n      xd[i] %= BASE;\r\n    }\r\n\r\n    if (carry) {\r\n      xd.unshift(carry);\r\n      ++e;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n    for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n    y.d = xd;\r\n    y.e = getBase10Exponent(xd, e);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the number of significant digits of the value of this Decimal.\r\n   *\r\n   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n   *\r\n   */\r\n  P.precision = P.sd = function (z) {\r\n    var k,\r\n      x = this;\r\n\r\n    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n    if (x.d) {\r\n      k = getPrecision(x.d);\r\n      if (z && x.e + 1 > k) k = x.e + 1;\r\n    } else {\r\n      k = NaN;\r\n    }\r\n\r\n    return k;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n   * rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.round = function () {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-1, 1]\r\n   *\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   *\r\n   * sin(0)         = 0\r\n   * sin(-0)        = -0\r\n   * sin(Infinity)  = NaN\r\n   * sin(-Infinity) = NaN\r\n   * sin(NaN)       = NaN\r\n   *\r\n   */\r\n  P.sine = P.sin = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n    Ctor.rounding = 1;\r\n\r\n    x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   *  sqrt(-n) =  N\r\n   *  sqrt(N)  =  N\r\n   *  sqrt(-I) =  N\r\n   *  sqrt(I)  =  I\r\n   *  sqrt(0)  =  0\r\n   *  sqrt(-0) = -0\r\n   *\r\n   */\r\n  P.squareRoot = P.sqrt = function () {\r\n    var m, n, sd, r, rep, t,\r\n      x = this,\r\n      d = x.d,\r\n      e = x.e,\r\n      s = x.s,\r\n      Ctor = x.constructor;\r\n\r\n    // Negative/NaN/Infinity/zero?\r\n    if (s !== 1 || !d || !d[0]) {\r\n      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n    }\r\n\r\n    external = false;\r\n\r\n    // Initial estimate.\r\n    s = Math.sqrt(+x);\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n    if (s == 0 || s == 1 / 0) {\r\n      n = digitsToString(d);\r\n\r\n      if ((n.length + e) % 2 == 0) n += '0';\r\n      s = Math.sqrt(n);\r\n      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n      if (s == 1 / 0) {\r\n        n = '1e' + e;\r\n      } else {\r\n        n = s.toExponential();\r\n        n = n.slice(0, n.indexOf('e') + 1) + e;\r\n      }\r\n\r\n      r = new Ctor(n);\r\n    } else {\r\n      r = new Ctor(s.toString());\r\n    }\r\n\r\n    sd = (e = Ctor.precision) + 3;\r\n\r\n    // Newton-Raphson iteration.\r\n    for (;;) {\r\n      t = r;\r\n      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n      // TODO? Replace with for-loop and checkRoundingDigits.\r\n      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n        n = n.slice(sd - 3, sd + 1);\r\n\r\n        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n        // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n        if (n == '9999' || !rep && n == '4999') {\r\n\r\n          // On the first iteration only, check to see if rounding up gives the exact result as the\r\n          // nines may infinitely repeat.\r\n          if (!rep) {\r\n            finalise(t, e + 1, 0);\r\n\r\n            if (t.times(t).eq(x)) {\r\n              r = t;\r\n              break;\r\n            }\r\n          }\r\n\r\n          sd += 4;\r\n          rep = 1;\r\n        } else {\r\n\r\n          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n          // If not, then there are further digits and m will be truthy.\r\n          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n            // Truncate to the first rounding digit.\r\n            finalise(r, e + 1, 1);\r\n            m = !r.times(r).eq(x);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return finalise(r, e, Ctor.rounding, m);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-Infinity, Infinity]\r\n   *\r\n   * tan(0)         = 0\r\n   * tan(-0)        = -0\r\n   * tan(Infinity)  = NaN\r\n   * tan(-Infinity) = NaN\r\n   * tan(NaN)       = NaN\r\n   *\r\n   */\r\n  P.tangent = P.tan = function () {\r\n    var pr, rm,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (!x.isFinite()) return new Ctor(NaN);\r\n    if (x.isZero()) return new Ctor(x);\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n    Ctor.precision = pr + 10;\r\n    Ctor.rounding = 1;\r\n\r\n    x = x.sin();\r\n    x.s = 1;\r\n    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n    Ctor.precision = pr;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n  };\r\n\r\n\r\n  /*\r\n   *  n * 0 = 0\r\n   *  n * N = N\r\n   *  n * I = I\r\n   *  0 * n = 0\r\n   *  0 * 0 = 0\r\n   *  0 * N = N\r\n   *  0 * I = N\r\n   *  N * n = N\r\n   *  N * 0 = N\r\n   *  N * N = N\r\n   *  N * I = N\r\n   *  I * n = I\r\n   *  I * 0 = N\r\n   *  I * N = N\r\n   *  I * I = I\r\n   *\r\n   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var carry, e, i, k, r, rL, t, xdL, ydL,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      xd = x.d,\r\n      yd = (y = new Ctor(y)).d;\r\n\r\n    y.s *= x.s;\r\n\r\n     // If either is NaN, ±Infinity or ±0...\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n        // Return NaN if either is NaN.\r\n        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n        ? NaN\r\n\r\n        // Return ±Infinity if either is ±Infinity.\r\n        // Return ±0 if either is ±0.\r\n        : !xd || !yd ? y.s / 0 : y.s * 0);\r\n    }\r\n\r\n    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n    xdL = xd.length;\r\n    ydL = yd.length;\r\n\r\n    // Ensure xd points to the longer array.\r\n    if (xdL < ydL) {\r\n      r = xd;\r\n      xd = yd;\r\n      yd = r;\r\n      rL = xdL;\r\n      xdL = ydL;\r\n      ydL = rL;\r\n    }\r\n\r\n    // Initialise the result array with zeros.\r\n    r = [];\r\n    rL = xdL + ydL;\r\n    for (i = rL; i--;) r.push(0);\r\n\r\n    // Multiply!\r\n    for (i = ydL; --i >= 0;) {\r\n      carry = 0;\r\n      for (k = xdL + i; k > i;) {\r\n        t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n        r[k--] = t % BASE | 0;\r\n        carry = t / BASE | 0;\r\n      }\r\n\r\n      r[k] = (r[k] + carry) % BASE | 0;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; !r[--rL];) r.pop();\r\n\r\n    if (carry) ++e;\r\n    else r.shift();\r\n\r\n    y.d = r;\r\n    y.e = getBase10Exponent(r, e);\r\n\r\n    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toBinary = function (sd, rm) {\r\n    return toStringBinary(this, 2, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n   *\r\n   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n    if (dp === void 0) return x;\r\n\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    return finalise(x, dp + x.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in exponential notation rounded to\r\n   * `dp` fixed decimal places using rounding mode `rounding`.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x, true);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), dp + 1, rm);\r\n      str = finiteToString(x, true, dp + 1);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n   * omitted.\r\n   *\r\n   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n   *\r\n   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   * (-0).toFixed(3) is '0.000'.\r\n   * (-0.5).toFixed(0) is '-0'.\r\n   *\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var str, y,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (dp === void 0) {\r\n      str = finiteToString(x);\r\n    } else {\r\n      checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n      str = finiteToString(y, false, dp + y.e + 1);\r\n    }\r\n\r\n    // To determine whether to add the minus sign look at the value before it was rounded,\r\n    // i.e. look at `x` rather than `y`.\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n   * numerator and an integer denominator.\r\n   *\r\n   * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n   * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n   * value necessary to represent the number exactly.\r\n   *\r\n   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n   *\r\n   */\r\n  P.toFraction = function (maxD) {\r\n    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n      x = this,\r\n      xd = x.d,\r\n      Ctor = x.constructor;\r\n\r\n    if (!xd) return new Ctor(x);\r\n\r\n    n1 = d0 = new Ctor(1);\r\n    d1 = n0 = new Ctor(0);\r\n\r\n    d = new Ctor(d1);\r\n    e = d.e = getPrecision(xd) - x.e - 1;\r\n    k = e % LOG_BASE;\r\n    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n    if (maxD == null) {\r\n\r\n      // d is 10**e, the minimum max-denominator needed.\r\n      maxD = e > 0 ? d : n1;\r\n    } else {\r\n      n = new Ctor(maxD);\r\n      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n    }\r\n\r\n    external = false;\r\n    n = new Ctor(digitsToString(xd));\r\n    pr = Ctor.precision;\r\n    Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n    for (;;)  {\r\n      q = divide(n, d, 0, 1, 1);\r\n      d2 = d0.plus(q.times(d1));\r\n      if (d2.cmp(maxD) == 1) break;\r\n      d0 = d1;\r\n      d1 = d2;\r\n      d2 = n1;\r\n      n1 = n0.plus(q.times(d2));\r\n      n0 = d2;\r\n      d2 = d;\r\n      d = n.minus(q.times(d2));\r\n      n = d2;\r\n    }\r\n\r\n    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n    n0 = n0.plus(d2.times(n1));\r\n    d0 = d0.plus(d2.times(d1));\r\n    n0.s = n1.s = x.s;\r\n\r\n    // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n        ? [n1, d1] : [n0, d0];\r\n\r\n    Ctor.precision = pr;\r\n    external = true;\r\n\r\n    return r;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toHexadecimal = P.toHex = function (sd, rm) {\r\n    return toStringBinary(this, 16, sd, rm);\r\n  };\r\n\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n   * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n   *\r\n   * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n   * or `y` is NaN, in which case the return value will be also be NaN.\r\n   *\r\n   * The return value is not affected by the value of `precision`.\r\n   *\r\n   * y {number|string|Decimal} The magnitude to round to a multiple of.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toNearest() rounding mode not an integer: {rm}'\r\n   * 'toNearest() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toNearest = function (y, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (y == null) {\r\n\r\n      // If x is not finite, return x.\r\n      if (!x.d) return x;\r\n\r\n      y = new Ctor(1);\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      y = new Ctor(y);\r\n      if (rm === void 0) {\r\n        rm = Ctor.rounding;\r\n      } else {\r\n        checkInt32(rm, 0, 8);\r\n      }\r\n\r\n      // If x is not finite, return x if y is not NaN, else NaN.\r\n      if (!x.d) return y.s ? x : y;\r\n\r\n      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n      if (!y.d) {\r\n        if (y.s) y.s = x.s;\r\n        return y;\r\n      }\r\n    }\r\n\r\n    // If y is not zero, calculate the nearest multiple of y to x.\r\n    if (y.d[0]) {\r\n      external = false;\r\n      x = divide(x, y, 0, rm, 1).times(y);\r\n      external = true;\r\n      finalise(x);\r\n\r\n    // If y is zero, return zero with the sign of x.\r\n    } else {\r\n      y.s = x.s;\r\n      x = y;\r\n    }\r\n\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Decimal converted to a number primitive.\r\n   * Zero keeps its sign.\r\n   *\r\n   */\r\n  P.toNumber = function () {\r\n    return +this;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n   * digits using rounding mode `rm`.\r\n   *\r\n   * If the optional `sd` argument is present then return binary exponential notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toOctal = function (sd, rm) {\r\n    return toStringBinary(this, 8, sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n   * to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * ECMAScript compliant.\r\n   *\r\n   *   pow(x, NaN)                           = NaN\r\n   *   pow(x, ±0)                            = 1\r\n\r\n   *   pow(NaN, non-zero)                    = NaN\r\n   *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n   *   pow(abs(x) > 1, -Infinity)            = +0\r\n   *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n   *   pow(abs(x) < 1, +Infinity)            = +0\r\n   *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n   *   pow(+Infinity, y > 0)                 = +Infinity\r\n   *   pow(+Infinity, y < 0)                 = +0\r\n   *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n   *   pow(-Infinity, even integer > 0)      = +Infinity\r\n   *   pow(-Infinity, odd integer < 0)       = -0\r\n   *   pow(-Infinity, even integer < 0)      = +0\r\n   *   pow(+0, y > 0)                        = +0\r\n   *   pow(+0, y < 0)                        = +Infinity\r\n   *   pow(-0, odd integer > 0)              = -0\r\n   *   pow(-0, even integer > 0)             = +0\r\n   *   pow(-0, odd integer < 0)              = -Infinity\r\n   *   pow(-0, even integer < 0)             = +Infinity\r\n   *   pow(finite x < 0, finite non-integer) = NaN\r\n   *\r\n   * For non-integer or very large exponents pow(x, y) is calculated using\r\n   *\r\n   *   x^y = exp(y*ln(x))\r\n   *\r\n   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n   * probability of an incorrectly rounded result\r\n   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n   * i.e. 1 in 250,000,000,000,000\r\n   *\r\n   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n   *\r\n   * y {number|string|Decimal} The power to which to raise this Decimal.\r\n   *\r\n   */\r\n  P.toPower = P.pow = function (y) {\r\n    var e, k, pr, r, rm, s,\r\n      x = this,\r\n      Ctor = x.constructor,\r\n      yn = +(y = new Ctor(y));\r\n\r\n    // Either ±Infinity, NaN or ±0?\r\n    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n    x = new Ctor(x);\r\n\r\n    if (x.eq(1)) return x;\r\n\r\n    pr = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n\r\n    if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n    // y exponent\r\n    e = mathfloor(y.e / LOG_BASE);\r\n\r\n    // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n    if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n      r = intPow(Ctor, x, k, pr);\r\n      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n    }\r\n\r\n    s = x.s;\r\n\r\n    // if x is negative\r\n    if (s < 0) {\r\n\r\n      // if y is not an integer\r\n      if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n      // Result is positive if x is negative and the last digit of integer y is even.\r\n      if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n      // if x.eq(-1)\r\n      if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n        x.s = s;\r\n        return x;\r\n      }\r\n    }\r\n\r\n    // Estimate result exponent.\r\n    // x^y = 10^e,  where e = y * log10(x)\r\n    // log10(x) = log10(x_significand) + x_exponent\r\n    // log10(x_significand) = ln(x_significand) / ln(10)\r\n    k = mathpow(+x, yn);\r\n    e = k == 0 || !isFinite(k)\r\n      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n      : new Ctor(k + '').e;\r\n\r\n    // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n    // Overflow/underflow?\r\n    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n    external = false;\r\n    Ctor.rounding = x.s = 1;\r\n\r\n    // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n    // new Decimal(2.32456).pow('2087987436534566.46411')\r\n    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n    k = Math.min(12, (e + '').length);\r\n\r\n    // r = x^y = exp(y*ln(x))\r\n    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n    // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n    if (r.d) {\r\n\r\n      // Truncate to the required precision plus five rounding digits.\r\n      r = finalise(r, pr + 5, 1);\r\n\r\n      // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n      // the result.\r\n      if (checkRoundingDigits(r.d, pr, rm)) {\r\n        e = pr + 10;\r\n\r\n        // Truncate to the increased precision plus five rounding digits.\r\n        r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n        // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n        if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n      }\r\n    }\r\n\r\n    r.s = s;\r\n    external = true;\r\n    Ctor.rounding = rm;\r\n\r\n    return finalise(r, pr, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var str,\r\n      x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n\r\n      x = finalise(new Ctor(x), sd, rm);\r\n      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n    }\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n   * omitted.\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n   *\r\n   * 'toSD() digits out of range: {sd}'\r\n   * 'toSD() digits not an integer: {sd}'\r\n   * 'toSD() rounding mode not an integer: {rm}'\r\n   * 'toSD() rounding mode out of range: {rm}'\r\n   *\r\n   */\r\n  P.toSignificantDigits = P.toSD = function (sd, rm) {\r\n    var x = this,\r\n      Ctor = x.constructor;\r\n\r\n    if (sd === void 0) {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    return finalise(new Ctor(x), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   *\r\n   * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n   *\r\n   */\r\n  P.toString = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n   *\r\n   */\r\n  P.truncated = P.trunc = function () {\r\n    return finalise(new this.constructor(this), this.e + 1, 1);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Decimal.\r\n   * Unlike `toString`, negative zero will include the minus sign.\r\n   *\r\n   */\r\n  P.valueOf = P.toJSON = function () {\r\n    var x = this,\r\n      Ctor = x.constructor,\r\n      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n    return x.isNeg() ? '-' + str : str;\r\n  };\r\n\r\n\r\n  /*\r\n  // Add aliases to match BigDecimal method names.\r\n  // P.add = P.plus;\r\n  P.subtract = P.minus;\r\n  P.multiply = P.times;\r\n  P.divide = P.div;\r\n  P.remainder = P.mod;\r\n  P.compareTo = P.cmp;\r\n  P.negate = P.neg;\r\n   */\r\n\r\n\r\n  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n  /*\r\n   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n   *                           finiteToString, naturalExponential, naturalLogarithm\r\n   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n   *  convertBase              toStringBinary, parseOther\r\n   *  cos                      P.cos\r\n   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n   *                           taylorSeries, atan2, parseOther\r\n   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n   *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n   *                           naturalLogarithm, ceil, floor, round, trunc\r\n   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n   *                           toStringBinary\r\n   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n   *  getLn10                  P.logarithm, naturalLogarithm\r\n   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n   *  getPrecision             P.precision, P.toFraction\r\n   *  getZeroString            digitsToString, finiteToString\r\n   *  intPow                   P.toPower, parseOther\r\n   *  isOdd                    toLessThanHalfPi\r\n   *  maxOrMin                 max, min\r\n   *  naturalExponential       P.naturalExponential, P.toPower\r\n   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n   *                           P.toPower, naturalExponential\r\n   *  nonFiniteToString        finiteToString, toStringBinary\r\n   *  parseDecimal             Decimal\r\n   *  parseOther               Decimal\r\n   *  sin                      P.sin\r\n   *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n   *  toLessThanHalfPi         P.cos, P.sin\r\n   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n   *  truncate                 intPow\r\n   *\r\n   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n   *                           naturalLogarithm, config, parseOther, random, Decimal\r\n   */\r\n\r\n\r\n  function digitsToString(d) {\r\n    var i, k, ws,\r\n      indexOfLastWord = d.length - 1,\r\n      str = '',\r\n      w = d[0];\r\n\r\n    if (indexOfLastWord > 0) {\r\n      str += w;\r\n      for (i = 1; i < indexOfLastWord; i++) {\r\n        ws = d[i] + '';\r\n        k = LOG_BASE - ws.length;\r\n        if (k) str += getZeroString(k);\r\n        str += ws;\r\n      }\r\n\r\n      w = d[i];\r\n      ws = w + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n    } else if (w === 0) {\r\n      return '0';\r\n    }\r\n\r\n    // Remove trailing zeros of last w.\r\n    for (; w % 10 === 0;) w /= 10;\r\n\r\n    return str + w;\r\n  }\r\n\r\n\r\n  function checkInt32(i, min, max) {\r\n    if (i !== ~~i || i < min || i > max) {\r\n      throw Error(invalidArgument + i);\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n   * `repeating == null` if caller is `log` or `pow`,\r\n   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n   */\r\n  function checkRoundingDigits(d, i, rm, repeating) {\r\n    var di, k, r, rd;\r\n\r\n    // Get the length of the first word of the array d.\r\n    for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n    // Is the rounding digit in the first word of d?\r\n    if (--i < 0) {\r\n      i += LOG_BASE;\r\n      di = 0;\r\n    } else {\r\n      di = Math.ceil((i + 1) / LOG_BASE);\r\n      i %= LOG_BASE;\r\n    }\r\n\r\n    // i is the index (0 - 6) of the rounding digit.\r\n    // E.g. if within the word 3487563 the first rounding digit is 5,\r\n    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n    k = mathpow(10, LOG_BASE - i);\r\n    rd = d[di] % k | 0;\r\n\r\n    if (repeating == null) {\r\n      if (i < 3) {\r\n        if (i == 0) rd = rd / 100 | 0;\r\n        else if (i == 1) rd = rd / 10 | 0;\r\n        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n      } else {\r\n        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n      }\r\n    } else {\r\n      if (i < 4) {\r\n        if (i == 0) rd = rd / 1000 | 0;\r\n        else if (i == 1) rd = rd / 100 | 0;\r\n        else if (i == 2) rd = rd / 10 | 0;\r\n        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n      } else {\r\n        r = ((repeating || rm < 4) && rd + 1 == k ||\r\n        (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  // Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n  // Eg. convertBase('255', 10, 16) returns [15, 15].\r\n  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n  function convertBase(str, baseIn, baseOut) {\r\n    var j,\r\n      arr = [0],\r\n      arrL,\r\n      i = 0,\r\n      strL = str.length;\r\n\r\n    for (; i < strL;) {\r\n      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n      arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n      for (j = 0; j < arr.length; j++) {\r\n        if (arr[j] > baseOut - 1) {\r\n          if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n          arr[j + 1] += arr[j] / baseOut | 0;\r\n          arr[j] %= baseOut;\r\n        }\r\n      }\r\n    }\r\n\r\n    return arr.reverse();\r\n  }\r\n\r\n\r\n  /*\r\n   * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function cosine(Ctor, x) {\r\n    var k, y,\r\n      len = x.d.length;\r\n\r\n    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    if (len < 32) {\r\n      k = Math.ceil(len / 3);\r\n      y = Math.pow(4, -k).toString();\r\n    } else {\r\n      k = 16;\r\n      y = '2.3283064365386962890625e-10';\r\n    }\r\n\r\n    Ctor.precision += k;\r\n\r\n    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n    // Reverse argument reduction\r\n    for (var i = k; i--;) {\r\n      var cos2x = x.times(x);\r\n      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n    }\r\n\r\n    Ctor.precision -= k;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Perform division in the specified base.\r\n   */\r\n  var divide = (function () {\r\n\r\n    // Assumes non-zero x and k, and hence non-zero result.\r\n    function multiplyInteger(x, k, base) {\r\n      var temp,\r\n        carry = 0,\r\n        i = x.length;\r\n\r\n      for (x = x.slice(); i--;) {\r\n        temp = x[i] * k + carry;\r\n        x[i] = temp % base | 0;\r\n        carry = temp / base | 0;\r\n      }\r\n\r\n      if (carry) x.unshift(carry);\r\n\r\n      return x;\r\n    }\r\n\r\n    function compare(a, b, aL, bL) {\r\n      var i, r;\r\n\r\n      if (aL != bL) {\r\n        r = aL > bL ? 1 : -1;\r\n      } else {\r\n        for (i = r = 0; i < aL; i++) {\r\n          if (a[i] != b[i]) {\r\n            r = a[i] > b[i] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return r;\r\n    }\r\n\r\n    function subtract(a, b, aL, base) {\r\n      var i = 0;\r\n\r\n      // Subtract b from a.\r\n      for (; aL--;) {\r\n        a[aL] -= i;\r\n        i = a[aL] < b[aL] ? 1 : 0;\r\n        a[aL] = i * base + a[aL] - b[aL];\r\n      }\r\n\r\n      // Remove leading zeros.\r\n      for (; !a[0] && a.length > 1;) a.shift();\r\n    }\r\n\r\n    return function (x, y, pr, rm, dp, base) {\r\n      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n        yL, yz,\r\n        Ctor = x.constructor,\r\n        sign = x.s == y.s ? 1 : -1,\r\n        xd = x.d,\r\n        yd = y.d;\r\n\r\n      // Either NaN, Infinity or 0?\r\n      if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n      }\r\n\r\n      if (base) {\r\n        logBase = 1;\r\n        e = x.e - y.e;\r\n      } else {\r\n        base = BASE;\r\n        logBase = LOG_BASE;\r\n        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n      }\r\n\r\n      yL = yd.length;\r\n      xL = xd.length;\r\n      q = new Ctor(sign);\r\n      qd = q.d = [];\r\n\r\n      // Result exponent may be one less than e.\r\n      // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n      for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n      if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n      if (pr == null) {\r\n        sd = pr = Ctor.precision;\r\n        rm = Ctor.rounding;\r\n      } else if (dp) {\r\n        sd = pr + (x.e - y.e) + 1;\r\n      } else {\r\n        sd = pr;\r\n      }\r\n\r\n      if (sd < 0) {\r\n        qd.push(1);\r\n        more = true;\r\n      } else {\r\n\r\n        // Convert precision in number of base 10 digits to base 1e7 digits.\r\n        sd = sd / logBase + 2 | 0;\r\n        i = 0;\r\n\r\n        // divisor < 1e7\r\n        if (yL == 1) {\r\n          k = 0;\r\n          yd = yd[0];\r\n          sd++;\r\n\r\n          // k is the carry.\r\n          for (; (i < xL || k) && sd--; i++) {\r\n            t = k * base + (xd[i] || 0);\r\n            qd[i] = t / yd | 0;\r\n            k = t % yd | 0;\r\n          }\r\n\r\n          more = k || i < xL;\r\n\r\n        // divisor >= 1e7\r\n        } else {\r\n\r\n          // Normalise xd and yd so highest order digit of yd is >= base/2\r\n          k = base / (yd[0] + 1) | 0;\r\n\r\n          if (k > 1) {\r\n            yd = multiplyInteger(yd, k, base);\r\n            xd = multiplyInteger(xd, k, base);\r\n            yL = yd.length;\r\n            xL = xd.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xd.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL;) rem[remL++] = 0;\r\n\r\n          yz = yd.slice();\r\n          yz.unshift(0);\r\n          yd0 = yd[0];\r\n\r\n          if (yd[1] >= base / 2) ++yd0;\r\n\r\n          do {\r\n            k = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yd, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, k.\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // k will be how many times the divisor goes into the current remainder.\r\n              k = rem0 / yd0 | 0;\r\n\r\n              //  Algorithm:\r\n              //  1. product = divisor * trial digit (k)\r\n              //  2. if product > remainder: product -= divisor, k--\r\n              //  3. remainder -= product\r\n              //  4. if product was < remainder at 2:\r\n              //    5. compare new remainder and divisor\r\n              //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n              if (k > 1) {\r\n                if (k >= base) k = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiplyInteger(yd, k, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                cmp = compare(prod, rem, prodL, remL);\r\n\r\n                // product > remainder.\r\n                if (cmp == 1) {\r\n                  k--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n                }\r\n              } else {\r\n\r\n                // cmp is -1.\r\n                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n                // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n                if (k == 0) cmp = k = 1;\r\n                prod = yd.slice();\r\n              }\r\n\r\n              prodL = prod.length;\r\n              if (prodL < remL) prod.unshift(0);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n\r\n              // If product was < previous remainder.\r\n              if (cmp == -1) {\r\n                remL = rem.length;\r\n\r\n                // Compare divisor and new remainder.\r\n                cmp = compare(yd, rem, yL, remL);\r\n\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                if (cmp < 1) {\r\n                  k++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yd, remL, base);\r\n                }\r\n              }\r\n\r\n              remL = rem.length;\r\n            } else if (cmp === 0) {\r\n              k++;\r\n              rem = [0];\r\n            }    // if cmp === 1, k will be 0\r\n\r\n            // Add the next digit, k, to the result array.\r\n            qd[i++] = k;\r\n\r\n            // Update the remainder.\r\n            if (cmp && rem[0]) {\r\n              rem[remL++] = xd[xi] || 0;\r\n            } else {\r\n              rem = [xd[xi]];\r\n              remL = 1;\r\n            }\r\n\r\n          } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n          more = rem[0] !== void 0;\r\n        }\r\n\r\n        // Leading zero?\r\n        if (!qd[0]) qd.shift();\r\n      }\r\n\r\n      // logBase is 1 when divide is being used for base conversion.\r\n      if (logBase == 1) {\r\n        q.e = e;\r\n        inexact = more;\r\n      } else {\r\n\r\n        // To calculate q.e, first get the number of digits of qd[0].\r\n        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n        q.e = i + e * logBase - 1;\r\n\r\n        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n      }\r\n\r\n      return q;\r\n    };\r\n  })();\r\n\r\n\r\n  /*\r\n   * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n   * Check for over/under-flow.\r\n   */\r\n   function finalise(x, sd, rm, isTruncated) {\r\n    var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n      Ctor = x.constructor;\r\n\r\n    // Don't round if sd is null or undefined.\r\n    out: if (sd != null) {\r\n      xd = x.d;\r\n\r\n      // Infinity/NaN.\r\n      if (!xd) return x;\r\n\r\n      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      // w: the word of xd containing rd, a base 1e7 number.\r\n      // xdi: the index of w within xd.\r\n      // digits: the number of digits of w.\r\n      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n      // they had leading zeros)\r\n      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n      // Get the length of the first word of the digits array xd.\r\n      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n      i = sd - digits;\r\n\r\n      // Is the rounding digit in the first word of xd?\r\n      if (i < 0) {\r\n        i += LOG_BASE;\r\n        j = sd;\r\n        w = xd[xdi = 0];\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      } else {\r\n        xdi = Math.ceil((i + 1) / LOG_BASE);\r\n        k = xd.length;\r\n        if (xdi >= k) {\r\n          if (isTruncated) {\r\n\r\n            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n            for (; k++ <= xdi;) xd.push(0);\r\n            w = rd = 0;\r\n            digits = 1;\r\n            i %= LOG_BASE;\r\n            j = i - LOG_BASE + 1;\r\n          } else {\r\n            break out;\r\n          }\r\n        } else {\r\n          w = k = xd[xdi];\r\n\r\n          // Get the number of digits of w.\r\n          for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n          // Get the index of rd within w.\r\n          i %= LOG_BASE;\r\n\r\n          // Get the index of rd within w, adjusted for leading zeros.\r\n          // The number of leading zeros of w is given by LOG_BASE - digits.\r\n          j = i - LOG_BASE + digits;\r\n\r\n          // Get the rounding digit at index j of w.\r\n          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n        }\r\n      }\r\n\r\n      // Are there any non-zero digits after the rounding digit?\r\n      isTruncated = isTruncated || sd < 0 ||\r\n        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n      // will give 714.\r\n\r\n      roundUp = rm < 4\r\n        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n          // Check whether the digit to the left of the rounding digit is odd.\r\n          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n            rm == (x.s < 0 ? 8 : 7));\r\n\r\n      if (sd < 1 || !xd[0]) {\r\n        xd.length = 0;\r\n        if (roundUp) {\r\n\r\n          // Convert sd to decimal places.\r\n          sd -= x.e + 1;\r\n\r\n          // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n          x.e = -sd || 0;\r\n        } else {\r\n\r\n          // Zero.\r\n          xd[0] = x.e = 0;\r\n        }\r\n\r\n        return x;\r\n      }\r\n\r\n      // Remove excess digits.\r\n      if (i == 0) {\r\n        xd.length = xdi;\r\n        k = 1;\r\n        xdi--;\r\n      } else {\r\n        xd.length = xdi + 1;\r\n        k = mathpow(10, LOG_BASE - i);\r\n\r\n        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n        // j > 0 means i > number of leading zeros of w.\r\n        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n      }\r\n\r\n      if (roundUp) {\r\n        for (;;) {\r\n\r\n          // Is the digit to be rounded up in the first word of xd?\r\n          if (xdi == 0) {\r\n\r\n            // i will be the length of xd[0] before k is added.\r\n            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n            j = xd[0] += k;\r\n            for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n            // if i != k the length has increased.\r\n            if (i != k) {\r\n              x.e++;\r\n              if (xd[0] == BASE) xd[0] = 1;\r\n            }\r\n\r\n            break;\r\n          } else {\r\n            xd[xdi] += k;\r\n            if (xd[xdi] != BASE) break;\r\n            xd[xdi--] = 0;\r\n            k = 1;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n    }\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > Ctor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < Ctor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // Ctor.underflow = true;\r\n      } // else Ctor.underflow = false;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  function finiteToString(x, isExp, sd) {\r\n    if (!x.isFinite()) return nonFiniteToString(x);\r\n    var k,\r\n      e = x.e,\r\n      str = digitsToString(x.d),\r\n      len = str.length;\r\n\r\n    if (isExp) {\r\n      if (sd && (k = sd - len) > 0) {\r\n        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n      } else if (len > 1) {\r\n        str = str.charAt(0) + '.' + str.slice(1);\r\n      }\r\n\r\n      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n    } else if (e < 0) {\r\n      str = '0.' + getZeroString(-e - 1) + str;\r\n      if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n    } else if (e >= len) {\r\n      str += getZeroString(e + 1 - len);\r\n      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n    } else {\r\n      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n      if (sd && (k = sd - len) > 0) {\r\n        if (e + 1 === len) str += '.';\r\n        str += getZeroString(k);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // Calculate the base 10 exponent from the base 1e7 exponent.\r\n  function getBase10Exponent(digits, e) {\r\n    var w = digits[0];\r\n\r\n    // Add the number of digits of the first word of the digits array.\r\n    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n    return e;\r\n  }\r\n\r\n\r\n  function getLn10(Ctor, sd, pr) {\r\n    if (sd > LN10_PRECISION) {\r\n\r\n      // Reset global state in case the exception is caught.\r\n      external = true;\r\n      if (pr) Ctor.precision = pr;\r\n      throw Error(precisionLimitExceeded);\r\n    }\r\n    return finalise(new Ctor(LN10), sd, 1, true);\r\n  }\r\n\r\n\r\n  function getPi(Ctor, sd, rm) {\r\n    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n    return finalise(new Ctor(PI), sd, rm, true);\r\n  }\r\n\r\n\r\n  function getPrecision(digits) {\r\n    var w = digits.length - 1,\r\n      len = w * LOG_BASE + 1;\r\n\r\n    w = digits[w];\r\n\r\n    // If non-zero...\r\n    if (w) {\r\n\r\n      // Subtract the number of trailing zeros of the last word.\r\n      for (; w % 10 == 0; w /= 10) len--;\r\n\r\n      // Add the number of digits of the first word.\r\n      for (w = digits[0]; w >= 10; w /= 10) len++;\r\n    }\r\n\r\n    return len;\r\n  }\r\n\r\n\r\n  function getZeroString(k) {\r\n    var zs = '';\r\n    for (; k--;) zs += '0';\r\n    return zs;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n   * integer of type number.\r\n   *\r\n   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n   *\r\n   */\r\n  function intPow(Ctor, x, n, pr) {\r\n    var isTruncated,\r\n      r = new Ctor(1),\r\n\r\n      // Max n of 9007199254740991 takes 53 loop iterations.\r\n      // Maximum digits array length; leaves [28, 34] guard digits.\r\n      k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n    external = false;\r\n\r\n    for (;;) {\r\n      if (n % 2) {\r\n        r = r.times(x);\r\n        if (truncate(r.d, k)) isTruncated = true;\r\n      }\r\n\r\n      n = mathfloor(n / 2);\r\n      if (n === 0) {\r\n\r\n        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n        n = r.d.length - 1;\r\n        if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n        break;\r\n      }\r\n\r\n      x = x.times(x);\r\n      truncate(x.d, k);\r\n    }\r\n\r\n    external = true;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  function isOdd(n) {\r\n    return n.d[n.d.length - 1] & 1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.\r\n   */\r\n  function maxOrMin(Ctor, args, ltgt) {\r\n    var y,\r\n      x = new Ctor(args[0]),\r\n      i = 0;\r\n\r\n    for (; ++i < args.length;) {\r\n      y = new Ctor(args[i]);\r\n      if (!y.s) {\r\n        x = y;\r\n        break;\r\n      } else if (x[ltgt](y)) {\r\n        x = y;\r\n      }\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   * Taylor/Maclaurin series.\r\n   *\r\n   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n   *\r\n   * Argument reduction:\r\n   *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n   *   exp(x) = exp(x / 2^k)^(2^k)\r\n   *\r\n   * Previously, the argument was initially reduced by\r\n   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n   * found to be slower than just dividing repeatedly by 32 as above.\r\n   *\r\n   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n   *\r\n   *  exp(Infinity)  = Infinity\r\n   *  exp(-Infinity) = 0\r\n   *  exp(NaN)       = NaN\r\n   *  exp(±0)        = 1\r\n   *\r\n   *  exp(x) is non-terminating for any finite, non-zero x.\r\n   *\r\n   *  The result will always be correctly rounded.\r\n   *\r\n   */\r\n  function naturalExponential(x, sd) {\r\n    var denominator, guard, j, pow, sum, t, wpr,\r\n      rep = 0,\r\n      i = 0,\r\n      k = 0,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // 0/NaN/Infinity?\r\n    if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n      return new Ctor(x.d\r\n        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n        : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    t = new Ctor(0.03125);\r\n\r\n    // while abs(x) >= 0.1\r\n    while (x.e > -2) {\r\n\r\n      // x = x / 2^5\r\n      x = x.times(t);\r\n      k += 5;\r\n    }\r\n\r\n    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n    // necessary to ensure the first 4 rounding digits are correct.\r\n    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n    wpr += guard;\r\n    denominator = pow = sum = new Ctor(1);\r\n    Ctor.precision = wpr;\r\n\r\n    for (;;) {\r\n      pow = finalise(pow.times(x), wpr, 1);\r\n      denominator = denominator.times(++i);\r\n      t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        j = k;\r\n        while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n        // Check to see if the first 4 rounding digits are [49]999.\r\n        // If so, repeat the summation with a higher precision, otherwise\r\n        // e.g. with precision: 18, rounding: 1\r\n        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n\r\n          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += 10;\r\n            denominator = pow = t = new Ctor(1);\r\n            i = 0;\r\n            rep++;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n    }\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n   * digits.\r\n   *\r\n   *  ln(-n)        = NaN\r\n   *  ln(0)         = -Infinity\r\n   *  ln(-0)        = -Infinity\r\n   *  ln(1)         = 0\r\n   *  ln(Infinity)  = Infinity\r\n   *  ln(-Infinity) = NaN\r\n   *  ln(NaN)       = NaN\r\n   *\r\n   *  ln(n) (n != 1) is non-terminating.\r\n   *\r\n   */\r\n  function naturalLogarithm(y, sd) {\r\n    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n      n = 1,\r\n      guard = 10,\r\n      x = y,\r\n      xd = x.d,\r\n      Ctor = x.constructor,\r\n      rm = Ctor.rounding,\r\n      pr = Ctor.precision;\r\n\r\n    // Is x negative or Infinity, NaN, 0 or 1?\r\n    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n    }\r\n\r\n    if (sd == null) {\r\n      external = false;\r\n      wpr = pr;\r\n    } else {\r\n      wpr = sd;\r\n    }\r\n\r\n    Ctor.precision = wpr += guard;\r\n    c = digitsToString(xd);\r\n    c0 = c.charAt(0);\r\n\r\n    if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n      // Argument reduction.\r\n      // The series converges faster the closer the argument is to 1, so using\r\n      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n      // later be divided by this number, then separate out the power of 10 using\r\n      // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n      // max n is 6 (gives 0.7 - 1.3)\r\n      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n        x = x.times(y);\r\n        c = digitsToString(x.d);\r\n        c0 = c.charAt(0);\r\n        n++;\r\n      }\r\n\r\n      e = x.e;\r\n\r\n      if (c0 > 1) {\r\n        x = new Ctor('0.' + c);\r\n        e++;\r\n      } else {\r\n        x = new Ctor(c0 + '.' + c.slice(1));\r\n      }\r\n    } else {\r\n\r\n      // The argument reduction method above may result in overflow if the argument y is a massive\r\n      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n      // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n      t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n      Ctor.precision = pr;\r\n\r\n      return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n    }\r\n\r\n    // x1 is x reduced to a value near 1.\r\n    x1 = x;\r\n\r\n    // Taylor series.\r\n    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n    // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n    x2 = finalise(x.times(x), wpr, 1);\r\n    denominator = 3;\r\n\r\n    for (;;) {\r\n      numerator = finalise(numerator.times(x2), wpr, 1);\r\n      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n        sum = sum.times(2);\r\n\r\n        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n        sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n        // been repeated previously) and the first 4 rounding digits 9999?\r\n        // If so, restart the summation with a higher precision, otherwise\r\n        // e.g. with precision: 12, rounding: 1\r\n        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n        // `wpr - guard` is the index of first rounding digit.\r\n        if (sd == null) {\r\n          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n            Ctor.precision = wpr += guard;\r\n            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n            x2 = finalise(x.times(x), wpr, 1);\r\n            denominator = rep = 1;\r\n          } else {\r\n            return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n          }\r\n        } else {\r\n          Ctor.precision = pr;\r\n          return sum;\r\n        }\r\n      }\r\n\r\n      sum = t;\r\n      denominator += 2;\r\n    }\r\n  }\r\n\r\n\r\n  // ±Infinity, NaN.\r\n  function nonFiniteToString(x) {\r\n    // Unsigned.\r\n    return String(x.s * x.s / 0);\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from string `str`.\r\n   */\r\n  function parseDecimal(x, str) {\r\n    var e, i, len;\r\n\r\n    // Decimal point?\r\n    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = str.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +str.slice(i + 1);\r\n      str = str.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = str.length;\r\n    }\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n    // Determine trailing zeros.\r\n    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n    str = str.slice(i, len);\r\n\r\n    if (str) {\r\n      len -= i;\r\n      x.e = e = e - i - 1;\r\n      x.d = [];\r\n\r\n      // Transform base\r\n\r\n      // e is the base 10 exponent.\r\n      // i is where to slice str to get the first word of the digits array.\r\n      i = (e + 1) % LOG_BASE;\r\n      if (e < 0) i += LOG_BASE;\r\n\r\n      if (i < len) {\r\n        if (i) x.d.push(+str.slice(0, i));\r\n        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n        str = str.slice(i);\r\n        i = LOG_BASE - str.length;\r\n      } else {\r\n        i -= len;\r\n      }\r\n\r\n      for (; i--;) str += '0';\r\n      x.d.push(+str);\r\n\r\n      if (external) {\r\n\r\n        // Overflow?\r\n        if (x.e > x.constructor.maxE) {\r\n\r\n          // Infinity.\r\n          x.d = null;\r\n          x.e = NaN;\r\n\r\n        // Underflow?\r\n        } else if (x.e < x.constructor.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n          // x.constructor.underflow = true;\r\n        } // else x.constructor.underflow = false;\r\n      }\r\n    } else {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n   */\r\n  function parseOther(x, str) {\r\n    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n    if (str === 'Infinity' || str === 'NaN') {\r\n      if (!+str) x.s = NaN;\r\n      x.e = NaN;\r\n      x.d = null;\r\n      return x;\r\n    }\r\n\r\n    if (isHex.test(str))  {\r\n      base = 16;\r\n      str = str.toLowerCase();\r\n    } else if (isBinary.test(str))  {\r\n      base = 2;\r\n    } else if (isOctal.test(str))  {\r\n      base = 8;\r\n    } else {\r\n      throw Error(invalidArgument + str);\r\n    }\r\n\r\n    // Is there a binary exponent part?\r\n    i = str.search(/p/i);\r\n\r\n    if (i > 0) {\r\n      p = +str.slice(i + 1);\r\n      str = str.substring(2, i);\r\n    } else {\r\n      str = str.slice(2);\r\n    }\r\n\r\n    // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n    // fraction part will be restored.\r\n    i = str.indexOf('.');\r\n    isFloat = i >= 0;\r\n    Ctor = x.constructor;\r\n\r\n    if (isFloat) {\r\n      str = str.replace('.', '');\r\n      len = str.length;\r\n      i = len - i;\r\n\r\n      // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n      divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n    }\r\n\r\n    xd = convertBase(str, base, BASE);\r\n    xe = xd.length - 1;\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xe; xd[i] === 0; --i) xd.pop();\r\n    if (i < 0) return new Ctor(x.s * 0);\r\n    x.e = getBase10Exponent(xd, xe);\r\n    x.d = xd;\r\n    external = false;\r\n\r\n    // At what precision to perform the division to ensure exact conversion?\r\n    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n    // Therefore using 4 * the number of digits of str will always be enough.\r\n    if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n    // Multiply by the binary exponent part if present.\r\n    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));\r\n    external = true;\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * sin(x) = x - x^3/3! + x^5/5! - ...\r\n   * |x| < pi/2\r\n   *\r\n   */\r\n  function sine(Ctor, x) {\r\n    var k,\r\n      len = x.d.length;\r\n\r\n    if (len < 3) return taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    // Max k before Math.pow precision loss is 22\r\n    x = x.times(Math.pow(5, -k));\r\n    x = taylorSeries(Ctor, 2, x, x);\r\n\r\n    // Reverse argument reduction\r\n    var sin2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sin2_x = x.times(x);\r\n      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\n  function taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n    var j, t, u, x2,\r\n      i = 1,\r\n      pr = Ctor.precision,\r\n      k = Math.ceil(pr / LOG_BASE);\r\n\r\n    external = false;\r\n    x2 = x.times(x);\r\n    u = new Ctor(y);\r\n\r\n    for (;;) {\r\n      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n      t = u.plus(y);\r\n\r\n      if (t.d[k] !== void 0) {\r\n        for (j = k; t.d[j] === u.d[j] && j--;);\r\n        if (j == -1) break;\r\n      }\r\n\r\n      j = u;\r\n      u = y;\r\n      y = t;\r\n      t = j;\r\n      i++;\r\n    }\r\n\r\n    external = true;\r\n    t.d.length = k + 1;\r\n\r\n    return t;\r\n  }\r\n\r\n\r\n  // Return the absolute value of `x` reduced to less than or equal to half pi.\r\n  function toLessThanHalfPi(Ctor, x) {\r\n    var t,\r\n      isNeg = x.s < 0,\r\n      pi = getPi(Ctor, Ctor.precision, 1),\r\n      halfPi = pi.times(0.5);\r\n\r\n    x = x.abs();\r\n\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isNeg ? 4 : 1;\r\n      return x;\r\n    }\r\n\r\n    t = x.divToInt(pi);\r\n\r\n    if (t.isZero()) {\r\n      quadrant = isNeg ? 3 : 2;\r\n    } else {\r\n      x = x.minus(t.times(pi));\r\n\r\n      // 0 <= x < pi\r\n      if (x.lte(halfPi)) {\r\n        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n        return x;\r\n      }\r\n\r\n      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n    }\r\n\r\n    return x.minus(pi).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return the value of Decimal `x` as a string in base `baseOut`.\r\n   *\r\n   * If the optional `sd` argument is present include a binary exponent suffix.\r\n   */\r\n  function toStringBinary(x, baseOut, sd, rm) {\r\n    var base, e, i, k, len, roundUp, str, xd, y,\r\n      Ctor = x.constructor,\r\n      isExp = sd !== void 0;\r\n\r\n    if (isExp) {\r\n      checkInt32(sd, 1, MAX_DIGITS);\r\n      if (rm === void 0) rm = Ctor.rounding;\r\n      else checkInt32(rm, 0, 8);\r\n    } else {\r\n      sd = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    }\r\n\r\n    if (!x.isFinite()) {\r\n      str = nonFiniteToString(x);\r\n    } else {\r\n      str = finiteToString(x);\r\n      i = str.indexOf('.');\r\n\r\n      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n      // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n      // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n      if (isExp) {\r\n        base = 2;\r\n        if (baseOut == 16) {\r\n          sd = sd * 4 - 3;\r\n        } else if (baseOut == 8) {\r\n          sd = sd * 3 - 2;\r\n        }\r\n      } else {\r\n        base = baseOut;\r\n      }\r\n\r\n      // Convert the number as an integer then divide the result by its base raised to a power such\r\n      // that the fraction part will be restored.\r\n\r\n      // Non-integer.\r\n      if (i >= 0) {\r\n        str = str.replace('.', '');\r\n        y = new Ctor(1);\r\n        y.e = str.length - i;\r\n        y.d = convertBase(finiteToString(y), 10, base);\r\n        y.e = y.d.length;\r\n      }\r\n\r\n      xd = convertBase(str, 10, base);\r\n      e = len = xd.length;\r\n\r\n      // Remove trailing zeros.\r\n      for (; xd[--len] == 0;) xd.pop();\r\n\r\n      if (!xd[0]) {\r\n        str = isExp ? '0p+0' : '0';\r\n      } else {\r\n        if (i < 0) {\r\n          e--;\r\n        } else {\r\n          x = new Ctor(x);\r\n          x.d = xd;\r\n          x.e = e;\r\n          x = divide(x, y, sd, rm, 0, base);\r\n          xd = x.d;\r\n          e = x.e;\r\n          roundUp = inexact;\r\n        }\r\n\r\n        // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        i = xd[sd];\r\n        k = base / 2;\r\n        roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n        roundUp = rm < 4\r\n          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n            rm === (x.s < 0 ? 8 : 7));\r\n\r\n        xd.length = sd;\r\n\r\n        if (roundUp) {\r\n\r\n          // Rounding up may mean the previous digit has to be rounded up and so on.\r\n          for (; ++xd[--sd] > base - 1;) {\r\n            xd[sd] = 0;\r\n            if (!sd) {\r\n              ++e;\r\n              xd.unshift(1);\r\n            }\r\n          }\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n        // E.g. [4, 11, 15] becomes 4bf.\r\n        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n        // Add binary exponent suffix?\r\n        if (isExp) {\r\n          if (len > 1) {\r\n            if (baseOut == 16 || baseOut == 8) {\r\n              i = baseOut == 16 ? 4 : 3;\r\n              for (--len; len % i; len++) str += '0';\r\n              xd = convertBase(str, base, baseOut);\r\n              for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n              // xd[0] will always be be 1\r\n              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n            } else {\r\n              str = str.charAt(0) + '.' + str.slice(1);\r\n            }\r\n          }\r\n\r\n          str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n        } else if (e < 0) {\r\n          for (; ++e;) str = '0' + str;\r\n          str = '0.' + str;\r\n        } else {\r\n          if (++e > len) for (e -= len; e-- ;) str += '0';\r\n          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n        }\r\n      }\r\n\r\n      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n    }\r\n\r\n    return x.s < 0 ? '-' + str : str;\r\n  }\r\n\r\n\r\n  // Does not strip trailing zeros.\r\n  function truncate(arr, len) {\r\n    if (arr.length > len) {\r\n      arr.length = len;\r\n      return true;\r\n    }\r\n  }\r\n\r\n\r\n  // Decimal methods\r\n\r\n\r\n  /*\r\n   *  abs\r\n   *  acos\r\n   *  acosh\r\n   *  add\r\n   *  asin\r\n   *  asinh\r\n   *  atan\r\n   *  atanh\r\n   *  atan2\r\n   *  cbrt\r\n   *  ceil\r\n   *  clone\r\n   *  config\r\n   *  cos\r\n   *  cosh\r\n   *  div\r\n   *  exp\r\n   *  floor\r\n   *  hypot\r\n   *  ln\r\n   *  log\r\n   *  log2\r\n   *  log10\r\n   *  max\r\n   *  min\r\n   *  mod\r\n   *  mul\r\n   *  pow\r\n   *  random\r\n   *  round\r\n   *  set\r\n   *  sign\r\n   *  sin\r\n   *  sinh\r\n   *  sqrt\r\n   *  sub\r\n   *  tan\r\n   *  tanh\r\n   *  trunc\r\n   */\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the absolute value of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function abs(x) {\r\n    return new this(x).abs();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function acos(x) {\r\n    return new this(x).acos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function acosh(x) {\r\n    return new this(x).acosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function add(x, y) {\r\n    return new this(x).plus(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function asin(x) {\r\n    return new this(x).asin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function asinh(x) {\r\n    return new this(x).asinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function atan(x) {\r\n    return new this(x).atan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n   * `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function atanh(x) {\r\n    return new this(x).atanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * Domain: [-Infinity, Infinity]\r\n   * Range: [-pi, pi]\r\n   *\r\n   * y {number|string|Decimal} The y-coordinate.\r\n   * x {number|string|Decimal} The x-coordinate.\r\n   *\r\n   * atan2(±0, -0)               = ±pi\r\n   * atan2(±0, +0)               = ±0\r\n   * atan2(±0, -x)               = ±pi for x > 0\r\n   * atan2(±0, x)                = ±0 for x > 0\r\n   * atan2(-y, ±0)               = -pi/2 for y > 0\r\n   * atan2(y, ±0)                = pi/2 for y > 0\r\n   * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n   * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n   * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n   * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n   * atan2(±Infinity, +Infinity) = ±pi/4\r\n   * atan2(NaN, x) = NaN\r\n   * atan2(y, NaN) = NaN\r\n   *\r\n   */\r\n  function atan2(y, x) {\r\n    y = new this(y);\r\n    x = new this(x);\r\n    var r,\r\n      pr = this.precision,\r\n      rm = this.rounding,\r\n      wpr = pr + 4;\r\n\r\n    // Either NaN\r\n    if (!y.s || !x.s) {\r\n      r = new this(NaN);\r\n\r\n    // Both ±Infinity\r\n    } else if (!y.d && !x.d) {\r\n      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n      r.s = y.s;\r\n\r\n    // x is ±Infinity or y is ±0\r\n    } else if (!x.d || y.isZero()) {\r\n      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n      r.s = y.s;\r\n\r\n    // y is ±Infinity or x is ±0\r\n    } else if (!y.d || x.isZero()) {\r\n      r = getPi(this, wpr, 1).times(0.5);\r\n      r.s = y.s;\r\n\r\n    // Both non-zero and finite\r\n    } else if (x.s < 0) {\r\n      this.precision = wpr;\r\n      this.rounding = 1;\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n      x = getPi(this, wpr, 1);\r\n      this.precision = pr;\r\n      this.rounding = rm;\r\n      r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n    } else {\r\n      r = this.atan(divide(y, x, wpr, 1));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function cbrt(x) {\r\n    return new this(x).cbrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ceil(x) {\r\n    return finalise(x = new this(x), x.e + 1, 2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Configure global settings for a Decimal constructor.\r\n   *\r\n   * `obj` is an object with one or more of the following properties,\r\n   *\r\n   *   precision  {number}\r\n   *   rounding   {number}\r\n   *   toExpNeg   {number}\r\n   *   toExpPos   {number}\r\n   *   maxE       {number}\r\n   *   minE       {number}\r\n   *   modulo     {number}\r\n   *   crypto     {boolean|number}\r\n   *   defaults   {true}\r\n   *\r\n   * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n   *\r\n   */\r\n  function config(obj) {\r\n    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n    var i, p, v,\r\n      useDefaults = obj.defaults === true,\r\n      ps = [\r\n        'precision', 1, MAX_DIGITS,\r\n        'rounding', 0, 8,\r\n        'toExpNeg', -EXP_LIMIT, 0,\r\n        'toExpPos', 0, EXP_LIMIT,\r\n        'maxE', 0, EXP_LIMIT,\r\n        'minE', -EXP_LIMIT, 0,\r\n        'modulo', 0, 9\r\n      ];\r\n\r\n    for (i = 0; i < ps.length; i += 3) {\r\n      if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n      if ((v = obj[p]) !== void 0) {\r\n        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n        else throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (v === true || v === false || v === 0 || v === 1) {\r\n        if (v) {\r\n          if (typeof crypto != 'undefined' && crypto &&\r\n            (crypto.getRandomValues || crypto.randomBytes)) {\r\n            this[p] = true;\r\n          } else {\r\n            throw Error(cryptoUnavailable);\r\n          }\r\n        } else {\r\n          this[p] = false;\r\n        }\r\n      } else {\r\n        throw Error(invalidArgument + p + ': ' + v);\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cos(x) {\r\n    return new this(x).cos();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function cosh(x) {\r\n    return new this(x).cosh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n   * constructor.\r\n   *\r\n   */\r\n  function clone(obj) {\r\n    var i, p, ps;\r\n\r\n    /*\r\n     * The Decimal constructor and exported function.\r\n     * Return a new Decimal instance.\r\n     *\r\n     * v {number|string|Decimal} A numeric value.\r\n     *\r\n     */\r\n    function Decimal(v) {\r\n      var e, i, t,\r\n        x = this;\r\n\r\n      // Decimal called without new.\r\n      if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n      // which points to Object.\r\n      x.constructor = Decimal;\r\n\r\n      // Duplicate.\r\n      if (v instanceof Decimal) {\r\n        x.s = v.s;\r\n        x.e = v.e;\r\n        x.d = (v = v.d) ? v.slice() : v;\r\n        return;\r\n      }\r\n\r\n      t = typeof v;\r\n\r\n      if (t === 'number') {\r\n        if (v === 0) {\r\n          x.s = 1 / v < 0 ? -1 : 1;\r\n          x.e = 0;\r\n          x.d = [0];\r\n          return;\r\n        }\r\n\r\n        if (v < 0) {\r\n          v = -v;\r\n          x.s = -1;\r\n        } else {\r\n          x.s = 1;\r\n        }\r\n\r\n        // Fast path for small integers.\r\n        if (v === ~~v && v < 1e7) {\r\n          for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n          x.e = e;\r\n          x.d = [v];\r\n          return;\r\n\r\n        // Infinity, NaN.\r\n        } else if (v * 0 !== 0) {\r\n          if (!v) x.s = NaN;\r\n          x.e = NaN;\r\n          x.d = null;\r\n          return;\r\n        }\r\n\r\n        return parseDecimal(x, v.toString());\r\n\r\n      } else if (t !== 'string') {\r\n        throw Error(invalidArgument + v);\r\n      }\r\n\r\n      // Minus sign?\r\n      if (v.charCodeAt(0) === 45) {\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    Decimal.prototype = P;\r\n\r\n    Decimal.ROUND_UP = 0;\r\n    Decimal.ROUND_DOWN = 1;\r\n    Decimal.ROUND_CEIL = 2;\r\n    Decimal.ROUND_FLOOR = 3;\r\n    Decimal.ROUND_HALF_UP = 4;\r\n    Decimal.ROUND_HALF_DOWN = 5;\r\n    Decimal.ROUND_HALF_EVEN = 6;\r\n    Decimal.ROUND_HALF_CEIL = 7;\r\n    Decimal.ROUND_HALF_FLOOR = 8;\r\n    Decimal.EUCLID = 9;\r\n\r\n    Decimal.config = Decimal.set = config;\r\n    Decimal.clone = clone;\r\n    Decimal.isDecimal = isDecimalInstance;\r\n\r\n    Decimal.abs = abs;\r\n    Decimal.acos = acos;\r\n    Decimal.acosh = acosh;        // ES6\r\n    Decimal.add = add;\r\n    Decimal.asin = asin;\r\n    Decimal.asinh = asinh;        // ES6\r\n    Decimal.atan = atan;\r\n    Decimal.atanh = atanh;        // ES6\r\n    Decimal.atan2 = atan2;\r\n    Decimal.cbrt = cbrt;          // ES6\r\n    Decimal.ceil = ceil;\r\n    Decimal.cos = cos;\r\n    Decimal.cosh = cosh;          // ES6\r\n    Decimal.div = div;\r\n    Decimal.exp = exp;\r\n    Decimal.floor = floor;\r\n    Decimal.hypot = hypot;        // ES6\r\n    Decimal.ln = ln;\r\n    Decimal.log = log;\r\n    Decimal.log10 = log10;        // ES6\r\n    Decimal.log2 = log2;          // ES6\r\n    Decimal.max = max;\r\n    Decimal.min = min;\r\n    Decimal.mod = mod;\r\n    Decimal.mul = mul;\r\n    Decimal.pow = pow;\r\n    Decimal.random = random;\r\n    Decimal.round = round;\r\n    Decimal.sign = sign;          // ES6\r\n    Decimal.sin = sin;\r\n    Decimal.sinh = sinh;          // ES6\r\n    Decimal.sqrt = sqrt;\r\n    Decimal.sub = sub;\r\n    Decimal.tan = tan;\r\n    Decimal.tanh = tanh;          // ES6\r\n    Decimal.trunc = trunc;        // ES6\r\n\r\n    if (obj === void 0) obj = {};\r\n    if (obj) {\r\n      if (obj.defaults !== true) {\r\n        ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n        for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n      }\r\n    }\r\n\r\n    Decimal.config(obj);\r\n\r\n    return Decimal;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function div(x, y) {\r\n    return new this(x).div(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The power to which to raise the base of the natural log.\r\n   *\r\n   */\r\n  function exp(x) {\r\n    return new this(x).exp();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function floor(x) {\r\n    return finalise(x = new this(x), x.e + 1, 3);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n   * rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n   *\r\n   */\r\n  function hypot() {\r\n    var i, n,\r\n      t = new this(0);\r\n\r\n    external = false;\r\n\r\n    for (i = 0; i < arguments.length;) {\r\n      n = new this(arguments[i++]);\r\n      if (!n.d) {\r\n        if (n.s) {\r\n          external = true;\r\n          return new this(1 / 0);\r\n        }\r\n        t = n;\r\n      } else if (t.d) {\r\n        t = t.plus(n.times(n));\r\n      }\r\n    }\r\n\r\n    external = true;\r\n\r\n    return t.sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n   * otherwise return false.\r\n   *\r\n   */\r\n  function isDecimalInstance(obj) {\r\n    return obj instanceof Decimal || obj && obj.name === '[object Decimal]' || false;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function ln(x) {\r\n    return new this(x).ln();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n   *\r\n   * log[y](x)\r\n   *\r\n   * x {number|string|Decimal} The argument of the logarithm.\r\n   * y {number|string|Decimal} The base of the logarithm.\r\n   *\r\n   */\r\n  function log(x, y) {\r\n    return new this(x).log(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log2(x) {\r\n    return new this(x).log(2);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function log10(x) {\r\n    return new this(x).log(10);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the maximum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function max() {\r\n    return maxOrMin(this, arguments, 'lt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the minimum of the arguments.\r\n   *\r\n   * arguments {number|string|Decimal}\r\n   *\r\n   */\r\n  function min() {\r\n    return maxOrMin(this, arguments, 'gt');\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mod(x, y) {\r\n    return new this(x).mod(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function mul(x, y) {\r\n    return new this(x).mul(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} The base.\r\n   * y {number|string|Decimal} The exponent.\r\n   *\r\n   */\r\n  function pow(x, y) {\r\n    return new this(x).pow(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n   * are produced).\r\n   *\r\n   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n   *\r\n   */\r\n  function random(sd) {\r\n    var d, e, k, n,\r\n      i = 0,\r\n      r = new this(1),\r\n      rd = [];\r\n\r\n    if (sd === void 0) sd = this.precision;\r\n    else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    k = Math.ceil(sd / LOG_BASE);\r\n\r\n    if (!this.crypto) {\r\n      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n    // Browsers supporting crypto.getRandomValues.\r\n    } else if (crypto.getRandomValues) {\r\n      d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n      for (; i < k;) {\r\n        n = d[i];\r\n\r\n        // 0 <= n < 4294967296\r\n        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n        if (n >= 4.29e9) {\r\n          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n        } else {\r\n\r\n          // 0 <= n <= 4289999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd[i++] = n % 1e7;\r\n        }\r\n      }\r\n\r\n    // Node.js supporting crypto.randomBytes.\r\n    } else if (crypto.randomBytes) {\r\n\r\n      // buffer\r\n      d = crypto.randomBytes(k *= 4);\r\n\r\n      for (; i < k;) {\r\n\r\n        // 0 <= n < 2147483648\r\n        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n        if (n >= 2.14e9) {\r\n          crypto.randomBytes(4).copy(d, i);\r\n        } else {\r\n\r\n          // 0 <= n <= 2139999999\r\n          // 0 <= (n % 1e7) <= 9999999\r\n          rd.push(n % 1e7);\r\n          i += 4;\r\n        }\r\n      }\r\n\r\n      i = k / 4;\r\n    } else {\r\n      throw Error(cryptoUnavailable);\r\n    }\r\n\r\n    k = rd[--i];\r\n    sd %= LOG_BASE;\r\n\r\n    // Convert trailing digits to zeros according to sd.\r\n    if (k && sd) {\r\n      n = mathpow(10, LOG_BASE - sd);\r\n      rd[i] = (k / n | 0) * n;\r\n    }\r\n\r\n    // Remove trailing words which are zero.\r\n    for (; rd[i] === 0; i--) rd.pop();\r\n\r\n    // Zero?\r\n    if (i < 0) {\r\n      e = 0;\r\n      rd = [0];\r\n    } else {\r\n      e = -1;\r\n\r\n      // Remove leading words which are zero and adjust exponent accordingly.\r\n      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n      // Count the digits of the first word of rd to determine leading zeros.\r\n      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n      // Adjust the exponent for leading zeros of the first word of rd.\r\n      if (k < LOG_BASE) e -= LOG_BASE - k;\r\n    }\r\n\r\n    r.e = e;\r\n    r.d = rd;\r\n\r\n    return r;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n   *\r\n   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function round(x) {\r\n    return finalise(x = new this(x), x.e + 1, this.rounding);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return\r\n   *   1    if x > 0,\r\n   *  -1    if x < 0,\r\n   *   0    if x is 0,\r\n   *  -0    if x is -0,\r\n   *   NaN  otherwise\r\n   *\r\n   */\r\n  function sign(x) {\r\n    x = new this(x);\r\n    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sin(x) {\r\n    return new this(x).sin();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function sinh(x) {\r\n    return new this(x).sinh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function sqrt(x) {\r\n    return new this(x).sqrt();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n   * using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal}\r\n   * y {number|string|Decimal}\r\n   *\r\n   */\r\n  function sub(x, y) {\r\n    return new this(x).sub(y);\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n   * digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tan(x) {\r\n    return new this(x).tan();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n   * significant digits using rounding mode `rounding`.\r\n   *\r\n   * x {number|string|Decimal} A value in radians.\r\n   *\r\n   */\r\n  function tanh(x) {\r\n    return new this(x).tanh();\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a new Decimal whose value is `x` truncated to an integer.\r\n   *\r\n   * x {number|string|Decimal}\r\n   *\r\n   */\r\n  function trunc(x) {\r\n    return finalise(x = new this(x), x.e + 1, 1);\r\n  }\r\n\r\n\r\n  // Create and configure initial Decimal constructor.\r\n  Decimal = clone(DEFAULTS);\r\n\r\n  Decimal['default'] = Decimal.Decimal = Decimal;\r\n\r\n  // Create the internal constants from their string values.\r\n  LN10 = new Decimal(LN10);\r\n  PI = new Decimal(PI);\r\n\r\n\r\n  // Export.\r\n\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () {\r\n      return Decimal;\r\n    });\r\n\r\n  // Node and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Decimal;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalScope) {\r\n      globalScope = typeof self != 'undefined' && self && self.self == self ? self : window;\r\n    }\r\n\r\n    noConflict = globalScope.Decimal;\r\n    Decimal.noConflict = function () {\r\n      globalScope.Decimal = noConflict;\r\n      return Decimal;\r\n    };\r\n\r\n    globalScope.Decimal = Decimal;\r\n  }\r\n})(this);\r\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/*! ****************************************************************************\r\nCopyright (c) 2017-2018 Pedro José Batista\r\nMIT License\r\n\r\nSee the LICENSE file for more information.\r\n***************************************************************************** */\r\n/** [[include:index.md]] */ /** */\r\nimport { Decimal } from \"decimal.js\";\r\nimport { Locale } from \"./localization\";\r\nimport * as localization from \"./localization\";\r\nimport * as utils from \"./utils\";\r\n\r\n// Allow sub-modules to be accessed directly via the main module\r\nexport { localization };\r\nexport { utils };\r\n\r\n// One hundred significant digits seem to be enough to handle more extreme time units\r\nDecimal.set({ precision: 100 });\r\n\r\n//#region Non-exported Functions\r\n\r\nfunction filterEmpty(target: any[]) {\r\n    return target.filter(value => {\r\n        return typeof(value) !== \"undefined\" && value !== \"\";\r\n    });\r\n}\r\n\r\n// Merges the immediate properties of all given objects\r\nfunction merge<T extends object>(... objects: Array<T | undefined>) {\r\n\r\n    let merged = {} as T;\r\n\r\n    for (const object of objects) {\r\n        merged = Object.assign(merged, object || {});\r\n    }\r\n\r\n    return merged;\r\n}\r\n\r\n// Replaces the last occurrence of a string, within a string\r\n// Thanks to https://stackoverflow.com/a/5497365\r\nfunction replaceLast(str: string, search: string, replacement: string) {\r\n    const index = str.lastIndexOf(search);\r\n\r\n    if (index === -1) {\r\n        return str;\r\n    }\r\n\r\n    return str.substr(0, index) + replacement + str.substr(index + 1);\r\n}\r\n\r\n// Gets a named time unit object from a time unit parameter, using the TIME_UNITS database\r\nfunction timeUnitFromSource(parameter: TimeUnitSource | string) {\r\n\r\n    const assign = (name: string, timeUnit: any): NamedTimeUnit => Object.assign({ name }, timeUnit);\r\n\r\n    // tslint:disable:curly\r\n    if (typeof(parameter) === \"object\") {\r\n\r\n        // Return condition 1: The object already is named\r\n        if (parameter.hasOwnProperty(\"name\")) {\r\n            return parameter as NamedTimeUnit;\r\n        }\r\n\r\n        // Return condition 2: Find the corresponding object and name it\r\n        for (const timeUnitName in TimeUnits) if (TimeUnits.hasOwnProperty(timeUnitName)) {\r\n            if (TimeUnits[timeUnitName as keyof TimeUnitDatabase] === parameter) {\r\n                return assign(timeUnitName, (TimeUnits as any)[timeUnitName]);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (typeof(parameter) === \"string\") {\r\n\r\n        // Return condition 3: Unit name matches object name exactly (TS will enforce this, but JS won't)\r\n        if (TimeUnits.hasOwnProperty(parameter)) {\r\n            return assign(parameter, (TimeUnits as any)[parameter]);\r\n        }\r\n\r\n        const target = parameter.toLowerCase();\r\n\r\n        // Return condition 4: Unit name is a case variation or plural\r\n        for (const timeUnitName in TimeUnits) if (TimeUnits.hasOwnProperty(timeUnitName)) {\r\n            const customPlural = TimeUnits[timeUnitName as keyof TimeUnitDatabase].customPlural;\r\n\r\n            // Sub-conditions (if target is equal to any of these, we found a variation)\r\n            const condition1 = timeUnitName.toLowerCase();\r\n            const condition2 = condition1 + \"s\";\r\n            const condition3 = timeUnitName.replace(/([a-z])([A-Z])/g, \"$1 $2\").toLowerCase();\r\n            const condition4 = typeof(customPlural) === \"string\"\r\n                ? customPlural.toLowerCase()\r\n                : condition3 + \"s\";\r\n\r\n            if (target === condition1 || target === condition2 || target === condition3 || target === condition4) {\r\n                return assign(timeUnitName, (TimeUnits as any)[timeUnitName]);\r\n            }\r\n        }\r\n    }\r\n    // tslint:enable:curly\r\n\r\n    // No condition met, unit is invalid\r\n    throw new Error(\"Invalid time unit\");\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Non-exported Variables\r\n\r\nconst defaultSettings: TimeWriterSettings = {\r\n    decimalSeparator: \".\",\r\n    hideTimeUnit: false,\r\n    hideZeroSegments: true,\r\n    numericNotation: \"decimal\",\r\n    roundingMode: 4,\r\n    segmentSeparator: \", \",\r\n    significantDigits: 10,\r\n    symbolApproximately: \"≈\",\r\n    symbolInfinite: \"∞\",\r\n    symbolNaN: \"NaN\",\r\n    termApproximately: \"approximately\",\r\n    termInfinite: \"infinite\",\r\n    termNaN: \"invalid number of\",\r\n    timeUnitSeparator: \" \",\r\n    verbose: false,\r\n};\r\n\r\n// Gets the decimal separator from a locale string\r\nconst localeDecimalSeparator = (() => {\r\n    const value = 1.1;\r\n    const separator = value.toLocaleString().substring(1, 2);\r\n    return separator;\r\n})();\r\n\r\n// List of roman numerals from greater to lesser\r\nconst romanNumerals: Array<[number, string]> = [\r\n    [1000, \"M\"],  [900, \"CM\"], [500, \"D\"], [400, \"CD\"],\r\n    [100, \"C\"],   [90, \"XC\"],  [50, \"L\"],  [40, \"XL\"],\r\n    [10, \"X\"],    [9, \"IX\"],   [5, \"V\"],   [4, \"IV\"], [1, \"I\"],\r\n];\r\n\r\nconst romanNumeralsBig: Array<[number, string]> = [\r\n    [1000000, `M̅`], [900000, `C̅M̅`], [500000, `D̅`], [400000, `C̅D̅`],\r\n    [100000, `C̅`],  [90000, `X̅C̅`],  [50000, `L̅`],  [40000, `X̅L̅`],\r\n    [10000, `X̅`],   [9000, `I̅X̅`],   [5000, `V̅`],   [4000, `I̅V̅`], [1000, `I̅`],\r\n].concat(romanNumerals.slice(1)) as any;\r\n\r\n// List of roman fractions in no specific order\r\nconst romanFractions: Array<[number, string]> = [\r\n    [1 / 12, \"•\"],  [2 / 12, \":\"],  [3 / 12, \"∴\"],  [4 / 12, \"::\"],   [5 / 12, \":·:\"],   [6 / 12, \"S\"],\r\n    [7 / 12, \"S•\"], [8 / 12, \"S:\"], [9 / 12, \"S∴\"], [10 / 12, \"S::\"], [11 / 12, \"S:·:\"],\r\n    [1 / 36, \"ƧƧ\"], [1 / 48, \"Ɔ\"], [1 / 72, \"Ƨ\"], [1 / 288, \"℈\"],\r\n];\r\n\r\n//#endregion\r\n\r\n//#region Exported Functions\r\n\r\n/**\r\n * Writes a numeric value using numerals from the _Ancient Rome_.\r\n *\r\n * @param value\r\n *   A number or [big decimal](https://mikemcl.github.io/decimal.js) to be converted to roman.\r\n * @param fractions\r\n *   Whether to include [common fractions](https://en.wikipedia.org/wiki/Roman_numerals#Fractions) or not.\r\n * @return\r\n *   A string with the roman representation of the given number.\r\n */\r\nexport function writeRoman(value: number | Decimal, fractions: boolean = false) {\r\n\r\n    if (typeof(value) === \"number\") {\r\n        value = new Decimal(value);\r\n    }\r\n\r\n    const fixedValue = value.trunc();\r\n    const numerals = value.comparedTo(5000) > 0 ? romanNumeralsBig : romanNumerals;\r\n    let amountLeft = fixedValue;\r\n    let result = \"\";\r\n\r\n    while (amountLeft.comparedTo(0) > 0) {\r\n        // The order of romanNumerals is important here: they are written from large to lesser\r\n        for (const entry of numerals) {\r\n\r\n            // So, if value is 1111, this accounts for M (1000) first, then C (100), then X (10), then I (1)\r\n            if (amountLeft.comparedTo(entry[0]) >= 0) {\r\n                amountLeft = amountLeft.minus(entry[0]);\r\n                result += entry[1];\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (fractions && value.comparedTo(fixedValue) > 0) {\r\n        result += writeRomanFractions(value.minus(fixedValue));\r\n    }\r\n\r\n    return result.length > 0 ? result : \"nulla\";\r\n}\r\n\r\n/**\r\n * Writes the fraction part of a numeric value using common fractions from the _Ancient Rome_.\r\n *\r\n * @param value\r\n *   A number that will have its decimal part extracted and written in roman.\r\n * @return\r\n *   A string with the roman representation of the given fraction.\r\n */\r\nexport function writeRomanFractions(value: number | Decimal) {\r\n\r\n    if (typeof(value) === \"number\") {\r\n        value = new Decimal(value);\r\n    }\r\n\r\n    value = value.minus(value.trunc());\r\n\r\n    if (value.comparedTo(0) === 0) {\r\n        return \"\";\r\n    }\r\n\r\n    let smallestDifference = new Decimal(1);\r\n    let smallestIndex = -1;\r\n\r\n    // Not much to explain: compares all romanFractions with the given fraction and returns the one with the\r\n    // smallest difference (only faster if the difference is exactly zero)\r\n\r\n    for (let i = 0; i < romanFractions.length; i += 1) {\r\n        const romanFraction = romanFractions[i];\r\n        const difference = value.minus(romanFraction[0]).abs();\r\n\r\n        if (difference.comparedTo(0) === 0) {\r\n            return romanFraction[1];\r\n        }\r\n\r\n        if (difference.comparedTo(smallestDifference) < 0) {\r\n            smallestDifference = difference;\r\n            smallestIndex = i;\r\n        }\r\n    }\r\n\r\n    return romanFractions[smallestIndex][1];\r\n}\r\n\r\n//#endregion\r\n\r\n//#region Exported Constants\r\n\r\n/**\r\n * Objects pertaining to this constant can be used as a parameter value for the\r\n * [countdown](../classes/_index_.timewriter.html#countdown) method of time writers.\r\n *\r\n * These constants contains groups of [time units](../classes/_index_.timeunitdatabase.html) that are related.\r\n */\r\nexport const TimeSegments = {\r\n\r\n    /** All base ten [SI](https://en.wikipedia.org/wiki/International_System_of_Units) time units. */\r\n    baseTen: [\"yottasecond\", \"zettasecond\", \"exasecond\", \"petasecond\", \"terasecond\", \"gigasecond\", \"megasecond\",\r\n        \"kilosecond\", \"second\", \"milisecond\", \"microsecond\", \"nanosecond\", \"picosecond\", \"femtosecond\", \"attosecond\",\r\n        \"zeptosecond\", \"yoctosecond\"],\r\n\r\n    /** All base two binary time units. */\r\n    binary: [\"yobisecond\", \"zebisecond\", \"exbisecond\", \"pebisecond\", \"tebisecond\", \"gibisecond\", \"mebisecond\",\r\n        \"kibisecond\", \"second\"],\r\n\r\n    /** Common time unit segmentation: year, month, day, hour, minute and second. */\r\n    common: [\"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\"],\r\n\r\n    /** Extremes and the middle-point of timecount units: Planck time, nanosecond and yobisecond. */\r\n    extremes: [\"planckTime\", \"nanosecond\", \"yobisecond\"],\r\n\r\n    /** Contains all units of a [sidereal time](https://en.wikipedia.org/wiki/Sidereal_time). */\r\n    sidereal: [\"siderealYear\", \"siderealMonth\", \"siderealDay\", \"siderealHour\", \"siderealMinute\", \"siderealSecond\"],\r\n};\r\n\r\n/**\r\n * A database of [time units](../interfaces/_index_.timeunit.html), used to qualify and describe lengths of time.\r\n *\r\n * Each property of this object enumerates the linguistic and mathematical features of the time unit it represents.\r\n *\r\n * ---\r\n *\r\n * See [TimeUnitDatabase](../interfaces/_index_.timeunitdatabase.html) for more information about time units.\r\n */\r\nexport const TimeUnits: TimeUnitDatabase<TimeUnit> = {\r\n    anomalisticMonth: { factor: new Decimal(\"2.38071312e+15\"), approximated: true },\r\n    anomalisticYear: { factor: new Decimal(\"3.15584325504e+16\"), approximated: true },\r\n    attosecond: { factor: new Decimal(\"1e-9\"), symbol: \"as\" },\r\n    biennium: { factor: new Decimal(\"6.3113904e+16\"), customPlural: \"biennia\" },\r\n    century: { factor: new Decimal(\"3.1536e+18\"), customPlural: \"centuries\" },\r\n    cosmicYear: { factor: new Decimal(\"7.4898e+24\"), approximated: true },\r\n    day: { factor: new Decimal(\"8.64e+13\"), symbol: \"d\" },\r\n    decade: { factor: new Decimal(\"3.1556952e+17\") },\r\n    draconicMonth: { factor: new Decimal(\"2.351135808e+15\"), approximated: true },\r\n    draconicYear: { factor: new Decimal(\"2.994797455629e+16\"), approximated: true },\r\n    eclipticYear: { factor: new Decimal(\"2.994797455629e+16\"), approximated: true },\r\n    exasecond: { factor: new Decimal(\"1e+27\"), symbol: \"Es\" },\r\n    exbisecond: { factor: new Decimal(\"1.152921504606846976e+27\"), symbol: \"Eis\" },\r\n    femtosecond: { factor: new Decimal(\"1e-6\"), symbol: \"fs\" },\r\n    fortnight: { factor: new Decimal(\"1.2096e+15\") },\r\n    galacticYear: { factor: new Decimal(\"7.4898e+24\"), approximated: true },\r\n    gibisecond: { factor: new Decimal(\"1.073741824e+18\"), symbol: \"Gis\" },\r\n    gigasecond: { factor: new Decimal(\"1e+18\"), symbol: \"Gs\" },\r\n    gregorianYear: { factor: new Decimal(\"3.1556952e+16\"), readableName: \"Gregorian year\" },\r\n    hour: { factor: new Decimal(\"3.6e+12\"), symbol: \"h\" },\r\n    jiffy: { factor: new Decimal(\"3e-15\"), customPlural: \"jiffies\" },\r\n    julianYear: { factor: new Decimal(\"3.15576e+16\"), readableName: \"Julian year\" },\r\n    kibisecond: { factor: new Decimal(\"1.024e+12\"), symbol: \"Kis\" },\r\n    kilosecond: { factor: new Decimal(\"1e+12\"), symbol: \"Ks\" },\r\n    kiloyear: { factor: new Decimal(\"3.1536e+19\"), symbol: \"ky\" },\r\n    leapYear: { factor: new Decimal(\"3.16224e+16\") },\r\n    lustrum: { factor: new Decimal(\"1.5778476e+17\"), customPlural: \"lustra\" },\r\n    mebisecond: { factor: new Decimal(\"1.048576e+15\"), symbol: \"Mis\" },\r\n    megasecond: { factor: new Decimal(\"1e+15\"), symbol: \"Ms\" },\r\n    microsecond: { factor: new Decimal(\"1e+3\"), symbol: \"µs\" },\r\n    milisecond: { factor: new Decimal(\"1e+6\"), symbol: \"ms\" },\r\n    millenium: { factor: new Decimal(\"3.1556952e+19\"), customPlural: \"millennia\" },\r\n    minute: { factor: new Decimal(\"6e+10\"), symbol: \"min\" },\r\n    month: { factor: new Decimal(\"2.628e+15\"), symbol: \"m\" },\r\n    nanosecond: { factor: new Decimal(\"1\"), symbol: \"ns\" },\r\n    nodicalMonth: { factor: new Decimal(\"2.351135808e+15\"), approximated: true },\r\n    nonLeapYear: { factor: new Decimal(\"3.1536e+16\"), readableName: \"non-leap year\" },\r\n    novennium: { factor: new Decimal(\"2.84012568e+17\"), customPlural: \"novennia\" },\r\n    octennium: { factor: new Decimal(\"2.52455616e+17\"), customPlural: \"octennia\" },\r\n    pebisecond: { factor: new Decimal(\"1.125899906842624e+24\"), symbol: \"Pis\" },\r\n    petasecond: { factor: new Decimal(\"1e+24\"), symbol: \"Ps\" },\r\n    picosecond: { factor: new Decimal(\"1e-3\"), symbol: \"ps\" },\r\n    planckTime: { factor: new Decimal(\"5.39056e-35\"), symbol: \"tₚ\", readableName: \"Planck time\" },\r\n    quadrennium: { factor: new Decimal(\"1.26227808e+17\"), customPlural: \"quadrennia\" },\r\n    quindecennium: { factor: new Decimal(\"4.7335428e+17\"), customPlural: \"quindecennia\" },\r\n    quinquennium: { factor: new Decimal(\"1.5778476e+17\"), customPlural: \"quinquennia\" },\r\n    second: { factor: new Decimal(\"1e+9\"), symbol: \"s\" },\r\n    septennium: { factor: new Decimal(\"2.20752e+17\"), customPlural: \"septennia\" },\r\n    shake: { factor: new Decimal(\"10\") },\r\n    siderealDay: { factor: new Decimal(\"8.616409e+13\"), approximated: true },\r\n    siderealHour: { factor: new Decimal(\"3.590170416667e+12\"), approximated: true },\r\n    siderealMinute: { factor: new Decimal(\"5.983617361111e+10\"), approximated: true },\r\n    siderealMonth: { factor: new Decimal(\"2.360591424e+15\"), approximated: true },\r\n    siderealSecond: { factor: new Decimal(\"9.972695601852e+8\"), approximated: true },\r\n    siderealYear: { factor: new Decimal(\"3.155814954e+16\"), approximated: true },\r\n    solarDay: { factor: new Decimal(\"8.64e+13\") },\r\n    solarYear: { factor: new Decimal(\"3.155693e+16\"), approximated: true },\r\n    svedberg: { factor: new Decimal(\"1e-4\"), symbol: \"Sv\" },\r\n    synodicMonth: { factor: new Decimal(\"2.55144384e+15\"), approximated: true },\r\n    tebisecond: { factor: new Decimal(\"1.099511627776e+21\"), symbol: \"Tis\" },\r\n    terasecond: { factor: new Decimal(\"1e+21\"), symbol: \"Ts\" },\r\n    timeUnit: { factor: new Decimal(\"1.024e+6\"), symbol: \"TU\" },\r\n    tropicalYear: { factor: new Decimal(\"3.155693e+16\"), approximated: true },\r\n    week: { factor: new Decimal(\"6.048e+14\"), symbol: \"w\" },\r\n    year: { factor: new Decimal(\"3.1556952e+16\"), symbol: \"y\" },\r\n    yobisecond: { factor: new Decimal(\"1.208925819614629174706176e+33\"), symbol: \"Yis\" },\r\n    yoctosecond: { factor: new Decimal(\"1e-15\"), symbol: \"ys\" },\r\n    yottasecond: { factor: new Decimal(\"1e+33\"), symbol: \"Ys\" },\r\n    zebisecond: { factor: new Decimal(\"1.180591620717411303424e+30\"), symbol: \"Zis\" },\r\n    zeptosecond: { factor: new Decimal(\"1e-12\"), symbol: \"zs\" },\r\n    zettasecond: { factor: new Decimal(\"1e+30\"), symbol: \"Zs\" },\r\n};\r\n\r\n/**\r\n * Alias to [TimeUnits](#timeunits-1).\r\n *\r\n * @deprecated Since v1.1.0 - Incorrect naming, all exported constants are now capitalized (will be removed in v2).\r\n */\r\nexport const timeUnits = TimeUnits;\r\n\r\n//#endregion\r\n\r\n//#region Exported Types\r\n\r\n/**\r\n * This interface is a base time unit definition, consisting of linguistic-related properties pertaining to the time\r\n * unit being described.\r\n *\r\n * Mathematical properties are left out of this interface in order to allow better control over configurations (and\r\n * since time units have the same mathematical constants regardless of language).\r\n */\r\nexport interface BaseTimeUnit {\r\n\r\n    /**\r\n     * Defines a custom pluralized name for the time unit; it can be a string — used whenever the quantity of time is\r\n     * greater than one — or a function, able to retrieve different words according to a given quantity.\r\n     *\r\n     * By default, words are pluralized by adding an \"s\" to the end of their [readable name](#readablename).\r\n     */\r\n    customPlural?: string | NumericWriter;\r\n\r\n    /**\r\n     * Determines whether the time unit should be pluralized: by default, words are pluralized by adding an \"s\" to the\r\n     * end of their [readable name](#readablename), but this can be changed via [customPlural](#customplural).\r\n     *\r\n     * If set to false, this will prevent the time unit from ever being pluralized (unless this configuration is\r\n     * overwritten).\r\n     */\r\n    pluralize?: boolean;\r\n\r\n    /**\r\n     * Name of the time unit presented in a human readable format.\r\n     *\r\n     * For timecount's default language — English (US) — this is parsed from the name of the property that contains the\r\n     * time unit, taking advantage of its [medial capitals](https://en.wikipedia.org/wiki/Camel_case) to separate\r\n     * compound names (`galacticYear` parses as \"galactic year\").\r\n     *\r\n     * In some cases, however, a custom readable name is required even in English (US) (`planckTime`, for example, would\r\n     * not be correctly capitalized as \"Planck time\").\r\n     *\r\n     * ---\r\n     *\r\n     * If you wish to help timecount with a translation, plese consult\r\n     * [Contributing: Translating](https://github.com/pjbatista/timecount/blob/master/CONTRIBUTING.md#translating).\r\n     */\r\n    readableName?: string;\r\n\r\n    /** A symbol representing the time unit (e.g. \"s\" for seconds). */\r\n    symbol?: string;\r\n}\r\n\r\n/**\r\n * This interface is used internally in order to map the [time unit database](../modules/_index_.html#time_unit) using\r\n * its properties.\r\n */\r\nexport interface NamedTimeUnit extends TimeUnit {\r\n\r\n    /** This name is parsed from the name of the property that contains the time unit object. */\r\n    name: keyof TimeUnitDatabase;\r\n}\r\n\r\n/**\r\n * This interface represents a nanosecond-based time value.\r\n *\r\n * @deprecated Since v1.1.0 - Unnecessary interface (will be removed in v2).\r\n */\r\nexport interface NanosecondBasedTime {\r\n\r\n    /** Gets the numeric representation of the time length in nanoseconds. */\r\n    readonly nanoseconds: number;\r\n}\r\n\r\n/**\r\n * This type contains all values accepted when configuring\r\n * [numeric notations](../interfaces/_index_.typewritersettings#numericnotation).\r\n *\r\n * - **\"decimal\":** standard _Hindu–Arabic numeral system_ using base ten;\r\n * - **\"roman\":** _Ancient Rome_ numeral system, ignoring fractions;\r\n * - **\"roman-fractions\":** _Ancient Rome_ numeral system, using\r\n *   [common fractions](https://en.wikipedia.org/wiki/Roman_numerals#Fractions);\r\n * - **\"scientific\":** Exponent notation; writes very small and very large numbers using powers of 10.\r\n */\r\nexport type NumericNotation = \"decimal\" | \"roman\" | \"roman-fractions\" | \"scientific\";\r\n\r\n/**\r\n * This type defines functions used by [time writers](../classes/_index_.timewriter.html) in order to express a numeric\r\n * value in the form of text.\r\n *\r\n * The first parameter is a native number and the second, optional, is a\r\n * [big decimal](https://www.npmjs.com/package/decimal.js).\r\n */\r\nexport type NumericWriter = (value: number, bigValue?: Decimal) => string;\r\n\r\n/**\r\n * This enumeration contains all [rounding modes](../interfaces/_index_.timewritersettings.html#roundingmode) available,\r\n * extracted from the [decimal.js documentation](https://mikemcl.github.io/decimal.js).\r\n */\r\nexport enum RoundingMode {\r\n\r\n    /** Rounds away from zero. */\r\n    RoundUp = 0,\r\n\r\n    /** Rounds towards zero. */\r\n    RoundDown,\r\n\r\n    /** Rounds towards _Infinity_. */\r\n    RoundCeil,\r\n\r\n    /** Rounds towards _-Infinity_. */\r\n    RoundFloor,\r\n\r\n    /** Rounds towards nearest neighbour; if equidistant, rounds away from zero. */\r\n    RoundHalfUp,\r\n\r\n    /** Rounds towards nearest neighbour; if equidistant, rounds towards zero. */\r\n    RoundHalfDown,\r\n\r\n    /** Rounds towards nearest neighbour; if equidistant, rounds towards even neighbour. */\r\n    RoundHalfEven,\r\n\r\n    /** Rounds towards nearest neighbour; if equidistant, rounds towards _Infinity_. */\r\n    RoundHalfCeil,\r\n\r\n    /** Rounds towards nearest neighbour; if equidistant, rounds towards _-Infinity_. */\r\n    RoundHalfFloor,\r\n}\r\n\r\n/**\r\n * Encapsulates a nanosecond-based time value.\r\n *\r\n * Instances of this class are capable of being converted [from](#from) and [to](#to) / [to big decimal](#toBig) other\r\n * [time units](../interfaces/_index_.timeunitdatabase.html) and also perform basic arithmetics.\r\n *\r\n * Times can also be [approximated](#isApproximated), and operations deriving from their use will also be approximated.\r\n * This doesn't affect the time object value in any way, but is used by [TimeWriter](_index_.timewriter.html) to\r\n * demonstrate approximations.\r\n *\r\n * All instances are _immutable_, thus not affected by methods (new instances are always created instead). Also, all\r\n * time values are necessarily positive (negative times are not a thing).\r\n */\r\nexport class Time {\r\n\r\n    private _approximated: boolean;\r\n    private _nanoseconds: Decimal;\r\n\r\n    /**\r\n     * Gets the [big decimal](https://www.npmjs.com/package/decimal.js) representation of the time length, in\r\n     * nanoseconds.\r\n     */\r\n    public get bigValue() { return this._nanoseconds; }\r\n\r\n    /**\r\n     * Gets whether the value of this is an approximation. This is determined at construction and it remains in all\r\n     * operations with that this time is involved.\r\n     */\r\n    public get isApproximated() { return this._approximated; }\r\n\r\n    /**\r\n     * Gets the numeric representation of the time length in nanoseconds.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `bigValue` and `value` (will be removed in v2).\r\n     */\r\n    public get nanoseconds() { return parseFloat(this._nanoseconds.toString()); }\r\n\r\n    /**\r\n     * Gets the numeric representation of the time length, in nanoseconds.\r\n     */\r\n    public get value() { return parseFloat(this._nanoseconds.toString()); }\r\n\r\n    /**\r\n     * Initializes a new instance of the [Time](_index_.time.html) class using the given time value parameter.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_.\r\n     * @param approximated\r\n     *   Whether the given is an approximation or not. The result of any arithmetic operations involving this time will\r\n     *   also be approximated.\r\n     * @throws Error\r\n     *   When the value is invalid.\r\n     */\r\n    public constructor(value: TimeValueSource, approximated?: boolean);\r\n\r\n    /**\r\n     * Initializes a new instance of the [Time](_index_.time.html) class using the given time value parameter.\r\n     *\r\n     * @param value\r\n     *   Another [Time](_index_.time.html) instance to be replicated.\r\n     * @throws Error\r\n     *   When the value is invalid.\r\n     */\r\n    public constructor(value: Time);\r\n\r\n    // Actual `constructor` implementation\r\n    public constructor(value: TimeValueSource | Time, approximated: boolean = false) {\r\n\r\n        if (value instanceof Time) {\r\n            approximated = value._approximated;\r\n            value = value._nanoseconds;\r\n        }\r\n\r\n        if (typeof(value) !== \"string\" && typeof(value) !== \"number\" && !(value instanceof Decimal)) {\r\n            throw new Error(`Invalid argument ${value}`);\r\n        }\r\n\r\n        if (!(value instanceof Decimal)) {\r\n            value = new Decimal(value);\r\n        }\r\n\r\n        this._approximated = approximated;\r\n        this._nanoseconds = value.abs();\r\n    }\r\n\r\n    /**\r\n     * Converts a time value, measuring it with the specified time unit, and creates a new\r\n     * [Time](../classes/_index_.time.html) instance with an equivalent length of time, but measured in nanoseconds.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion.\r\n     * @return\r\n     *   A nanosecond-based time obtained from the conversion of the given parameters.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public static from(value: TimeValueSource, timeUnit: TimeUnitSource): Time;\r\n\r\n    /**\r\n     * Converts a time value, measuring it with the specified time unit, and creates a new\r\n     * [Time](../classes/_index_.time.html) instance with an equivalent length of time, but measured in nanoseconds.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion. Accepts plurals and case variations.\r\n     * @return\r\n     *   A nanosecond-based time obtained from the conversion of the given parameters.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public static from(value: TimeValueSource, timeUnit: string | TimeUnit): Time;\r\n\r\n    // Actual `from` implementation\r\n    public static from(value: TimeValueSource, timeUnit: TimeUnitSource | string) {\r\n\r\n        if (typeof(value) !== \"string\" && typeof(value) !== \"number\" && !(value instanceof Decimal)) {\r\n            throw new Error(`Invalid argument ${value}`);\r\n        }\r\n\r\n        if (!(value instanceof Decimal)) {\r\n            value = new Decimal(value);\r\n        }\r\n\r\n        timeUnit = timeUnitFromSource(timeUnit);\r\n        return new Time(value.times(timeUnit.factor), timeUnit.approximated);\r\n    }\r\n\r\n    /**\r\n     * Adds the value of this time with the value of another time. If either are [approximations](#isApproximated), the\r\n     * result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to be added to this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the values of both times added to each other.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public add(value: TimeValueSource | Time, timeUnit?: TimeUnitSource): Time;\r\n\r\n    /**\r\n     * Adds the value of this time with the value of another time. If either are [approximations](#isApproximated), the\r\n     * result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to be added to this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided. Accepts plurals and case variations.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the values of both times added to each other.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public add(value: TimeValueSource | Time, timeUnit?: string | TimeUnit): Time;\r\n\r\n    // Actual `add` implementation\r\n    public add(value: TimeValueSource | Time, timeUnit?: TimeUnitSource) {\r\n\r\n        let approximated = false;\r\n\r\n        if (value instanceof Time) {\r\n            value = value._nanoseconds;\r\n        }\r\n\r\n        if (timeUnit) {\r\n            const converted = Time.from(value, timeUnit);\r\n            approximated = converted._approximated;\r\n            value = converted._nanoseconds;\r\n        }\r\n\r\n        return new Time(this._nanoseconds.add(value), approximated);\r\n    }\r\n\r\n    /**\r\n     * Creates and returns a new time object that contains the value of this time, however with the approximated flag.\r\n     *\r\n     * @returns\r\n     *   Approximated time in relation to this time.\r\n     */\r\n    public approximate() {\r\n        return new Time(this._nanoseconds, true);\r\n    }\r\n\r\n    /**\r\n     * Divides the value of this time by the value of another time. If either are [approximations](#isApproximated), the\r\n     * result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to divide this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the value of this time divided by the value of the other time.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public divide(value: TimeValueSource | Time, timeUnit?: TimeUnitSource): Time;\r\n\r\n    /**\r\n     * Divides the value of this time by the value of another time. If either are [approximations](#isApproximated), the\r\n     * result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to divide this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided. Accepts plurals and case variations.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the value of this time divided by the value of the other time.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public divide(value: TimeValueSource | Time, timeUnit?: string | TimeUnit): Time;\r\n\r\n    // Actual `divide` implementation\r\n    public divide(value: TimeValueSource | Time, timeUnit?: TimeUnitSource) {\r\n\r\n        let approximated = false;\r\n\r\n        if (value instanceof Time) {\r\n            value = value._nanoseconds;\r\n        }\r\n\r\n        if (timeUnit) {\r\n            const converted = Time.from(value, timeUnit);\r\n            approximated = converted._approximated;\r\n            value = converted._nanoseconds;\r\n        }\r\n\r\n        return new Time(this._nanoseconds.dividedBy(value), approximated);\r\n    }\r\n\r\n    /**\r\n     * Multiplies the value of this time with the value of another time. If either are\r\n     * [approximations](#isApproximated), the result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to be multiplied by this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the value of both times multiplied by each other.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public multiply(value: TimeValueSource | Time, timeUnit?: TimeUnitSource): Time;\r\n\r\n    /**\r\n     * Multiplies the value of this time with the value of another time. If either are\r\n     * [approximations](#isApproximated), the result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to be multiplied by this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided. Accepts plurals and case variations.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the value of both times multiplied by each other.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public multiply(value: TimeValueSource | Time, timeUnit?: string | TimeUnit): Time;\r\n\r\n    // Actual `multiply` implementation\r\n    public multiply(value: TimeValueSource | Time, timeUnit?: TimeUnitSource) {\r\n\r\n        let approximated = false;\r\n\r\n        if (value instanceof Time) {\r\n            value = value._nanoseconds;\r\n        }\r\n\r\n        if (timeUnit) {\r\n            const converted = Time.from(value, timeUnit);\r\n            approximated = converted._approximated;\r\n            value = converted._nanoseconds;\r\n        }\r\n\r\n        return new Time(this._nanoseconds.times(value), approximated);\r\n    }\r\n\r\n    /**\r\n     * Subtracts the value of another time from the value of this time. If either are [approximations](#isApproximated),\r\n     * the result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to be subtracted from this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the value of this time divided by the value of the other time.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public subtract(value: TimeValueSource | Time, timeUnit?: TimeUnitSource): Time;\r\n\r\n    /**\r\n     * Subtracts the value of another time from the value of this time. If either are [approximations](#isApproximated),\r\n     * the result will also be.\r\n     *\r\n     * @param value\r\n     *   A value representing the length of time, accepted as a _string_ that parses to a number (e.g. \"1000\" or\r\n     *   \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_ -or- another\r\n     *   [Time](_index_.time.html) instance used to be subtracted from this time.\r\n     * @param timeUnit\r\n     *   Time unit used as source for the conversion of `value`. This defaults to \"nanosecond\" and is ignored when a\r\n     *   [Time](_index_.time.html) object is provided. Accepts plurals and case variations.\r\n     * @return\r\n     *   A [Time](_index_.time.html) object with the value of this time divided by the value of the other time.\r\n     * @throws Error\r\n     *   When the value is invalid -or- the time unit is invalid.\r\n     */\r\n    public subtract(value: TimeValueSource | Time, timeUnit?: string | TimeUnit): Time;\r\n\r\n    // Actual `subtract` implementation\r\n    public subtract(value: TimeValueSource | Time, timeUnit?: TimeUnitSource)  {\r\n\r\n        let approximated = false;\r\n\r\n        if (value instanceof Time) {\r\n            value = value._nanoseconds;\r\n        }\r\n\r\n        if (timeUnit) {\r\n            const converted = Time.from(value, timeUnit);\r\n            approximated = converted._approximated;\r\n            value = converted._nanoseconds;\r\n        }\r\n\r\n        return new Time(this._nanoseconds.minus(value), approximated);\r\n    }\r\n\r\n    /**\r\n     * Converts the value of this nanosecond-based time into any other time unit.\r\n     *\r\n     * For the [big decimal](https://www.npmjs.com/package/decimal.js) representation, see [toBig](#tobig).\r\n     *\r\n     * @param timeUnit\r\n     *   Time unit used as target for the conversion.\r\n     * @return\r\n     *   Numeric representation of the converted time, measured using the given time unit.\r\n     */\r\n    public to(timeUnit: TimeUnitSource): number;\r\n\r\n    /**\r\n     * Converts the value of this nanosecond-based time into any other time unit.\r\n     *\r\n     * For the [big decimal](https://www.npmjs.com/package/decimal.js) representation, see [toBig](#tobig).\r\n     *\r\n     * @param timeUnit\r\n     *   Time unit used as target for the conversion. Accepts plurals and case variations.\r\n     * @return\r\n     *   Numeric representation of the converted time, measured using the given time unit.\r\n     */\r\n    public to(timeUnit: string | TimeUnit): number;\r\n\r\n    // Actual `to` implementation\r\n    public to(timeUnit: TimeUnitSource) {\r\n        return this.toBig(timeUnit).toNumber();\r\n    }\r\n\r\n    /**\r\n     * Converts the value of this nanosecond-based time into any other time unit, using\r\n     * [big decimals](https://www.npmjs.com/package/decimal.js).\r\n     *\r\n     * @param timeUnit\r\n     *   Time unit used as target for the conversion.\r\n     * @return\r\n     *   [Big decimal](https://www.npmjs.com/package/decimal.js) representation of the converted time, measured using\r\n     *   the   given time unit.\r\n     */\r\n    public toBig(timeUnit: TimeUnitSource): Decimal;\r\n\r\n    /**\r\n     * Converts the value of this nanosecond-based time into any other time unit, using\r\n     * [big decimals](https://www.npmjs.com/package/decimal.js).\r\n     *\r\n     * @param timeUnit\r\n     *   Time unit used as target for the conversion. Accepts plurals and care variations.\r\n     * @return\r\n     *   [Big decimal](https://www.npmjs.com/package/decimal.js) representation of the converted time, measured using\r\n     *   the   given time unit.\r\n     */\r\n    public toBig(timeUnit: string | TimeUnit): Decimal;\r\n\r\n    // Actual `toBig` implementation\r\n    public toBig(timeUnit: TimeUnitSource) {\r\n\r\n        timeUnit = timeUnitFromSource(timeUnit);\r\n        return this._nanoseconds.dividedBy(timeUnit.factor);\r\n    }\r\n\r\n    /**\r\n     * Gets a string representing the of value of this time, in nanoseconds.\r\n     *\r\n     * @return\r\n     *   Numeric representation of the time length plus the symbol \"ns\".\r\n     */\r\n    public toString() {\r\n        return `${this._approximated ? \"≈\" : \"\"}${this._nanoseconds.toString()} ns`;\r\n    }\r\n}\r\n\r\n/**\r\n * A time unit is any particular time interval, used as a standard way of measuring or expressing duration.\r\n *\r\n * Extending from its precursor, [BaseTimeUnit](_index_.basetimeunit.html), an object of this type contains both the\r\n * mathematical and linguistic properties of the time unit it describes.\r\n *\r\n * ---\r\n *\r\n * See [TimeUnitDatabase](_index_.timeunitdatabase.html) for more information about time units.\r\n */\r\nexport interface TimeUnit extends BaseTimeUnit {\r\n\r\n    /** Determines whether this time unit is an approximation. */\r\n    approximated?: boolean;\r\n\r\n    /** Multiplicative factor (coefficient) of this time unit in relation to a nanosecond. */\r\n    factor: Decimal;\r\n}\r\n\r\n/**\r\n * A centralized catalog of [time unit](_index_.timeunit.html) definitions.\r\n *\r\n * This interface is a collection of summaries extracted from the web, with information for the time units available in\r\n * timecount. It was created with the intent to encorage its users to explore and play with time conversions.\r\n *\r\n * @typeparam T\r\n *   This type parameter defines which kind of time unit interface its object is describing. It may be a\r\n *   [base time unit](_index_.basetimeunit.html) which contains only linguistic properties or a\r\n *   [time unit](_index_.timeunit.html) with approximation flag and nanosecond coefficients.\r\n */\r\nexport interface TimeUnitDatabase<T extends BaseTimeUnit = BaseTimeUnit> {\r\n\r\n    /**\r\n     * The Moon's orbit approximates an ellipse rather than a circle. However, the orientation (as well as the shape) of\r\n     * this orbit is not fixed. In particular, the position of the extreme points (the line of the apsides: **perigee**\r\n     * and **apogee**), rotates once (**apsidal precession**) in about 3,233 days (8.85 years). It takes the Moon longer\r\n     * to return to the same apsis because it has moved ahead during one revolution.\r\n     *\r\n     * This longer period is called the **anomalistic month** and has an average length of\r\n     * _27 days, 13 hours, 18 minutes, 33.2 seconds_ or `2380713120000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly anomalisticMonth: T;\r\n\r\n    /**\r\n     * The **anomalistic year** is the time taken for the Earth to complete one revolution with respect to its apsides.\r\n     * It is usually defined as the time between **perihelion** passages.\r\n     *\r\n     * Its average duration is _365 days, 6 hours, 13 minutes, 52.6 seconds_ or `31558432550400000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly anomalisticYear: T;\r\n\r\n    /**\r\n     * An **attosecond** is a SI unit of time equal to _0.000000000000000001 second_ or `0.000000001 nanosecond`.\r\n     *\r\n     * For context, an attosecond is to a second what a second is to about 31.71 billion years.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly attosecond: T;\r\n\r\n    /**\r\n     * A **biennium** (plural _biennia_) is a period of _2 years_ or `315360000000000000 nanoseconds`.\r\n     *\r\n     * The word is borrowed from the Latin _biennium_, from _bi-_ (occuring twice) + _annus_ (year).\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly biennium: T;\r\n\r\n    /**\r\n     * A **century** is a period of _100 years_ or `3153600000000000000 nanoseconds`.\r\n     *\r\n     * Centuries are numbered ordinally in English and many other languages. According to the strict construction of the\r\n     * Gregorian calendar, the 1ˢᵗ century began with 1 AD and ended with 100 AD, with the same pattern continuing\r\n     * onward.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly century: T;\r\n\r\n    /**\r\n     * Alias for a [galactic year](#galacticyear).\r\n     *\r\n     * It is equivalent, in average, to _237,5 million years_ or `7489800000000000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly cosmicYear: T;\r\n\r\n    /**\r\n     * A **day** is approximately the period of time during which the Earth completes one rotation with respect to the\r\n     * Sun (aka [solar day](#solarday)). It is commonly designated as a period of _24 hours_ or\r\n     * `86400000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly day: T;\r\n\r\n    /**\r\n     * A **decade** is a period of _10 years_ or `315360000000000000 nanoseconds`.\r\n     *\r\n     * The word is derived from the Ancient Greek: δεκάς (dekas), which means a group of ten.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly decade: T;\r\n\r\n    /**\r\n     * A **draconic month** or [nodical month](#nodicalmonth) is the average interval between two successive transits of\r\n     * the Moon through the same node. Because of the torque exerted by the Sun's gravity on the angular momentum of the\r\n     * Earth–Moon system, the plane of the Moon's orbit gradually rotates westward, which means the nodes gradually\r\n     * rotate around Earth.\r\n     *\r\n     * As a result, the time it takes the Moon to return to the same node is shorter than a\r\n     * [sidereal month](#siderealmonth), with an average duration of _27 days, 5 hours, 5 minutes, 35.8 seconds_ or\r\n     * `2351135808000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly draconicMonth: T;\r\n\r\n    /**\r\n     * The **draconic year** or [ecliptic year](#eclipticyear) is the time taken for the Sun (as seen from the Earth) to\r\n     * complete one revolution with respect to the same lunar node.\r\n     *\r\n     * The average duration of the eclipse year is _346 days, 14 hours, 52 minutes, 54 seconds_ or\r\n     * `29947974556290000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly draconicYear: T;\r\n\r\n    /**\r\n     * Alias for a [draconic year](#draconicyear).\r\n     *\r\n     * It is equivalent, in average, to _346 days, 14 hours, 52 minutes, 54 seconds_ or `29947974556290000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly eclipticYear: T;\r\n\r\n    /**\r\n     * An **exasecond** is a SI unit of time equal to _1000000000000000000 seconds_ or\r\n     * `1000000000000000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _exa_ means 10¹⁸.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly exasecond: T;\r\n\r\n    /**\r\n     * An **exasecond** is a SI unit of time equal to _1152921504606846976 seconds_ or\r\n     * `1152921504606846976000000000 nanoseconds`.\r\n     *\r\n     * The prefix _exbi_ means 2⁶⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly exbisecond: T;\r\n\r\n    /**\r\n     * A **femtosecond** is a SI unit of time equal to _0.000000000000001 second_ or `0.000001 nanosecond`.\r\n     *\r\n     * For context, a femtosecond is to a second as a second is to about 31.71 million years.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly femtosecond: T;\r\n\r\n    /**\r\n     * A fortnight is a unit of time equal to _14 days_ or `1209600000000000 nanoseconds`.\r\n     *\r\n     * The word derives from the Old English: _fēowertyne niht_, meaning fourteen nights.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly fortnight: T;\r\n\r\n    /**\r\n     * The **galactic year**, also known as [cosmic year](#cosmicyear), is the duration of time required for the Sun to\r\n     * orbit once around the center of the Milky Way Galaxy.\r\n     *\r\n     * Estimates of the length of one orbit range from 225 to 250 million terrestrial years, averaging _237,5 million\r\n     * years_ or `7489800000000000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly galacticYear: T;\r\n\r\n    /**\r\n     * Alias for a [year](#year).\r\n     *\r\n     * It is equivalent to _365 days, 5 hours, 49 minutes, 12 seconds_ or `31556952000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly gregorianYear: T;\r\n\r\n    /**\r\n     * A **gibisecond** is a SI unit of time equal to _1073741824 seconds_ or `1073741824000000000 nanoseconds`.\r\n     *\r\n     * The prefix _gibi_ means 2³⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly gibisecond: T;\r\n\r\n    /**\r\n     * A **gigasecond** is a SI unit of time equal to 1000000000 seconds_ or `1000000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _giga_ means 10⁹.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly gigasecond: T;\r\n\r\n    /**\r\n     * An **hour** is a unit of time conventionally reckoned as 1⁄24 of a day and scientifically reckoned inbetween\r\n     * 3599 and 3601 seconds, depending on special conditions.\r\n     *\r\n     * For practical purposes, an hour is _3600 seconds_ or `3600000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly hour: T;\r\n\r\n    /**\r\n     * A **jiffy** is the amount of time light takes to travel one _fermi_ (which is about the size of a nucleon) in a\r\n     * vacuum.\r\n     *\r\n     * It is equivalent to `0.000000000000003 nanosecond`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly jiffy: T;\r\n\r\n    /**\r\n     * In astronomy, a **Julian year** is a unit of measurement of time defined as exactly _365.25 days_ of\r\n     * _86400 seconds_ each, or `86400000000000 nanoseconds`.\r\n     *\r\n     * The _Julian calendar_ which has started on different days, at different times, in different countries is equal to\r\n     * either 365 or 366 days.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly julianYear: T;\r\n\r\n    /**\r\n     * A **kibisecond** is a SI unit of time equal to _1024 seconds_ or `1024000000000 nanoseconds`.\r\n     *\r\n     * The prefix _kibi_ means 2¹⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly kibisecond: T;\r\n\r\n    /**\r\n     * A **kilosecond** is a SI unit of time equal to _1000 seconds_ or `1000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _kilo_ means 10³.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly kilosecond: T;\r\n\r\n    /**\r\n     * Alias for a [millenium](#millenium).\r\n     *\r\n     * It is equivalent to _1000 years_ or `31536000000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly kiloyear: T;\r\n\r\n    /**\r\n     * A **leap year** (also known as an intercalary year or bissextile year) is a calendar year containing one\r\n     * additional day added to keep the calendar year synchronized with the _astronomical_ or _seasonal year_.\r\n     *\r\n     * Each leap year has _366 days_ or `31622400000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly leapYear: T;\r\n\r\n    /**\r\n     * Alias for a [draconic month](#draconicmonth).\r\n     *\r\n     * It is equivalent, in average, to _27 days, 5 hours, 5 minutes, 35.8 seconds_ or `2351135808000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly nodicalMonth: T;\r\n\r\n    /**\r\n     * A **non-leap year** occurs every three out of four years, the remaining one being a [leap year](#leapyear).\r\n     *\r\n     * Each non-leap year has _365 days_ or `31536000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly nonLeapYear: T;\r\n\r\n    /**\r\n     * A **lustrum** (plural _lustra_) was a term for a five-year period in Ancient Rome and is equivalent to a\r\n     * [quinquennium](#quinquennium), which is _5 years_ or `157680000000000000 nanoseconds`.\r\n     *\r\n     * The _lustration_ was originally a sacrifice for expiation and purification offered by one of the censors in the\r\n     * name of the Roman people at the close of the taking of the census. The sacrifice was often in the form of an\r\n     * animal sacrifice, known as a _suovetaurilia_.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly lustrum: T;\r\n\r\n    /**\r\n     * A **mebisecond** is a SI unit of time equal to _1048576 seconds_ or `1048576000000000 nanoseconds`.\r\n     *\r\n     * The prefix _mebi_ means 2²⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly mebisecond: T;\r\n\r\n    /**\r\n     * A **megasecond** is a SI unit of time equal to _1000000 seconds_ or `1000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _mega_ means 10⁶.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly megasecond: T;\r\n\r\n    /**\r\n     * A **microsecond** is a SI unit of time equal to _0.000001 second_ or `1000 nanoseconds`.\r\n     *\r\n     * The prefix _micro_ means 10⁻⁶.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly microsecond: T;\r\n\r\n    /**\r\n     * A **milisecond** is a SI unit of time equal to _0.001 second_ or `1000000 nanoseconds`.\r\n     *\r\n     * The prefix _mili_ means 10⁻³.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly milisecond: T;\r\n\r\n    /**\r\n     * A **millennium** (plural _millennia_) is a period equal to _1000 years_ or `31536000000000000000 nanoseconds`,\r\n     * also known as [kiloyear](#kiloyear).\r\n     *\r\n     * Sometimes, it is used specifically for periods of a thousand years that begin at the starting point (initial\r\n     * reference point) of the calendar in consideration (typically the year \"1\"), or in later years that are whole\r\n     * number multiples of a thousand years after it.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly millenium: T;\r\n\r\n    /**\r\n     * A minute is equal to 1⁄60 (the first sexagesimal fraction) of an hour, _60 seconds_ or `60000000000 nanoseconds`.\r\n     *\r\n     * In the UTC time standard, a minute on rare occasions has 61 seconds, a consequence of _leap seconds_.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly minute: T;\r\n\r\n    /**\r\n     * A **month** is an unit of time used with calendars, which is approximately as long as a natural period related to\r\n     * the motion of the Moon.\r\n     *\r\n     * In Gregorian calendars, a month is in average _30.41666666667 days_ or `2628000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly month: T;\r\n\r\n    /**\r\n     * A **nanosecond** is a SI unit of time equal to _0.000000001 second_. This is the **standard unit** of timecount.\r\n     *\r\n     * The prefix _nano_ means 10⁻⁹. Time units of this granularity are commonly encountered in telecommunications,\r\n     * pulsed lasers, and related aspects of electronics.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly nanosecond: T;\r\n\r\n    /**\r\n     * A **novennium** (plural _novennia_) is a period equivalent to _9 years_ or `283824000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly novennium: T;\r\n\r\n    /**\r\n     * An **octennium** (plural _octennia_) is a period equivalent to _8 years_ or `252288000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly octennium: T;\r\n\r\n    /**\r\n     * A **pebisecond** is a SI unit of time equal to _1125899906842624 seconds_ or\r\n     * `1125899906842624000000000 nanoseconds`.\r\n     *\r\n     * The prefix _pebi_ means 2⁵⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly pebisecond: T;\r\n\r\n    /**\r\n     * A **petasecond** is a SI unit of time equal to _1000000000000000 seconds_ or\r\n     * `1000000000000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _peta_ means 10¹⁵.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly petasecond: T;\r\n\r\n    /**\r\n     * A **picosecond** is a SI unit of time equal to _0.000000000001 second_ or `0.001 nanosecond`.\r\n     *\r\n     * A picosecond is to one second as one second is to approximately 31,689 years.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly picosecond: T;\r\n\r\n    /**\r\n     * The **Planck time** is the unit of time in the system of natural units known as _Planck units_. A Planck unit is\r\n     * the time required for light to travel in a vacuum a distance of 1 _Planck length_.\r\n     *\r\n     * It is equivalent to _5.39056 × 10⁻⁴⁴ second_ or `0.0000000000000000000000000000000000539056 nanosecond`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly planckTime: T;\r\n\r\n    /**\r\n     * A **quadrennium** (plural _quadrennia_) is a period of _4 years_ or `630720000000000000 nanoseconds`.\r\n     *\r\n     * It is most commonly used in reference to the four-year period between each Olympic Games. It is also used in\r\n     * reference to the four-year interval between [leap years](#leapyear).\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly quadrennium: T;\r\n\r\n    /**\r\n     * A **quindecennium** (plural _quindecennia_) is a period equivalent to _15 years_ or\r\n     * `473040000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly quindecennium: T;\r\n\r\n    /**\r\n     * A **quinquennium** (plural _quinquennia_) is a period equivalent to _5 years_, a [lustrum](#lustrum), or\r\n     * `157680000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly quinquennium: T;\r\n\r\n    /**\r\n     * The **second** is the SI base unit of time, commonly understood and historically defined as ¹/₈₆₄₀₀ of a day –\r\n     * this factor derived from the division of the day first into 24 hours, then to 60 minutes and finally to 60\r\n     * seconds each.\r\n     *\r\n     * It is equivalent to `1000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly second: T;\r\n\r\n    /**\r\n     * A **septennium** (plural _septennia_) is a period equivalent to _7 years_ or `220752000000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly septennium: T;\r\n\r\n    /**\r\n     * A **shake** is an informal unit of time equal to `10 nanoseconds`.\r\n     *\r\n     * It has applications in _nuclear physics_, helping to conveniently express the timing of various events in a\r\n     * nuclear explosion.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly shake: T;\r\n\r\n    /**\r\n     * _Sidereal time_ is a timekeeping system that astronomers use to locate celestial objects. It is the angle,\r\n     * measured along the celestial equator, from the observer's meridian to the great circle that passes through the\r\n     * March equinox and both celestial poles, and is usually expressed in hours, minutes, and seconds.\r\n     *\r\n     * Using sidereal time, it is possible to easily point a telescope to the proper coordinates in the night sky.\r\n     *\r\n     * A **sidereal day** is approximately _23 hours, 56 minutes, 4.0905 seconds_ or `86164090000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly siderealDay: T;\r\n\r\n    /**\r\n     * _Sidereal time_ is a timekeeping system that astronomers use to locate celestial objects. It is the angle,\r\n     * measured along the celestial equator, from the observer's meridian to the great circle that passes through the\r\n     * March equinox and both celestial poles, and is usually expressed in hours, minutes, and seconds.\r\n     *\r\n     * Using sidereal time, it is possible to easily point a telescope to the proper coordinates in the night sky.\r\n     *\r\n     * A **sidereal hour** is approximately _59 minutes, 50.17041666672 seconds_ or `3590170416667 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly siderealHour: T;\r\n\r\n    /**\r\n     * _Sidereal time_ is a timekeeping system that astronomers use to locate celestial objects. It is the angle,\r\n     * measured along the celestial equator, from the observer's meridian to the great circle that passes through the\r\n     * March equinox and both celestial poles, and is usually expressed in hours, minutes, and seconds.\r\n     *\r\n     * Using sidereal time, it is possible to easily point a telescope to the proper coordinates in the night sky.\r\n     *\r\n     * A **sidereal minute** is approximately _59.983617361111 seconds_ or `599836173611.11 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly siderealMinute: T;\r\n\r\n    /**\r\n     * The period of the Moon's orbit as defined with respect to the celestial sphere of apparently fixed stars\r\n     * (nowadays the _International Celestial Reference Frame_) is known as a **sidereal month** because it is the time\r\n     * it takes the Moon to return to a similar position among the stars.\r\n     *\r\n     * It is approximately _27 days, 7 hours, 43 minutes, 11.6 seconds_ or `2360591424000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly siderealMonth: T;\r\n\r\n    /**\r\n     * _Sidereal time_ is a timekeeping system that astronomers use to locate celestial objects. It is the angle,\r\n     * measured along the celestial equator, from the observer's meridian to the great circle that passes through the\r\n     * March equinox and both celestial poles, and is usually expressed in hours, minutes, and seconds.\r\n     *\r\n     * Using sidereal time, it is possible to easily point a telescope to the proper coordinates in the night sky.\r\n     *\r\n     * A **sidereal second** is approximately _0.9972695601852 second_ or `997269560.1852 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly siderealSecond: T;\r\n\r\n    /**\r\n     * A **sidereal year** is the time taken by the Earth to orbit the Sun once with respect to the fixed stars. Hence\r\n     * it is also the time taken for the Sun to return to the same position with respect to the fixed stars after\r\n     * apparently travelling once around the ecliptic.\r\n     *\r\n     * It is approximately _365 days, 6 hours, 9 minutes, 9.504 seconds_ or `31558149540000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly siderealYear: T;\r\n\r\n    /**\r\n     * Alias for a [day](#day).\r\n     *\r\n     * It is equivalent, in average, to _86400 seconds_ or `86400000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly solarDay: T;\r\n\r\n    /**\r\n     * Alias for a [tropical year](#tropicalyear).\r\n     *\r\n     * It is equivalent, in average, to _31556930 seconds_ or `31556930000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly solarYear: T;\r\n\r\n    /**\r\n     * The **Svedberg** is a time unit used for sedimentation rates (usually of proteins).\r\n     *\r\n     * It is defined as _100 femtoseconds_ or `0.0001 nanosecond`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly svedberg: T;\r\n\r\n    /**\r\n     * The **synodic month** is the average period of the Moon's orbit with respect to the line joining the Sun and\r\n     * Earth. It is is used to calculate eclipse cycles.\r\n     *\r\n     * Its long-term average duration is _29 days, 12 hours, 44 minutes, 2.8016 seconds_ or\r\n     * `2551443840000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly synodicMonth: T;\r\n\r\n    /**\r\n     * A **tebisecond** is a SI unit of time equal to 1099511627776 seconds_ or `1099511627776000000000 nanoseconds`.\r\n     *\r\n     * The prefix _tebi_ means 2⁴⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly tebisecond: T;\r\n\r\n    /**\r\n     * A **terasecond** is a SI unit of time equal to 1000000000000 seconds_ or `1000000000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _tera_ means 10¹².\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly terasecond: T;\r\n\r\n    /**\r\n     * A **time unit** (TU) is an unit of time defined as _1024 microseconds_ or `1024000 nanoseconds`.\r\n     *\r\n     * The unit allows for maintaining intervals that are easy to implement in hardware that has a 1 MHz clock. One Time\r\n     * Unit is equal to one millionth of a [kibisecond](#kibisecond).\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly timeUnit: T;\r\n\r\n    /**\r\n     * A **tropical year** (also known as a [solar year](#solaryear)) is the time that the Sun takes to return to the\r\n     * same position in the cycle of seasons, as seen from Earth; for example, the time from vernal equinox to vernal\r\n     * equinox, or from summer solstice to summer solstice.\r\n     *\r\n     * It is approximetaly _365 days, 5 hours, 48 minutes, 43.488 seconds_ or `31556930000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly tropicalYear: T;\r\n\r\n    /**\r\n     * A **week** is a time unit equal to _7 days_ or `604800000000000 nanoseconds`.\r\n     *\r\n     * It is the standard time period used for cycles of rest days in most parts of the world, mostly alongside —\r\n     * although not strictly part of — the Gregorian calendar.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly week: T;\r\n\r\n    /**\r\n     * For the Gregorian calendar, the average length of the calendar year (the mean year) across the complete leap\r\n     * cycle of 400 years is _365 days, 5 hours, 49 minutes, 12 seconds_ (365.2425 days) or\r\n     * `31556952000000000 nanoseconds`.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly year: T;\r\n\r\n    /**\r\n     * A **yobisecond** is a SI unit of time equal to _1208925819614629174706176 seconds_ or\r\n     * `1208925819614629174706176000000000 nanoseconds`.\r\n     *\r\n     * The prefix _yobi_ means 2⁸⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly yobisecond: T;\r\n\r\n    /**\r\n     * A **yoctosecond** is a SI unit of time equal to _0.000000000000000000000001 second_ or\r\n     * `0.0000000000000001 nanosecond`.\r\n     *\r\n     * The prefix _yocto_ means 10⁻²⁴.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly yoctosecond: T;\r\n\r\n    /**\r\n     * A **yottasecond** is a SI unit of time equal to _1000000000000000000000000 seconds_ or\r\n     * `1000000000000000000000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _yotta_ means 10²⁴.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly yottasecond: T;\r\n\r\n    /**\r\n     * A **zebisecond** is a SI unit of time equal to _1180591620717411303424 seconds_ or\r\n     * `1180591620717411303424000000000 nanoseconds`.\r\n     *\r\n     * The prefix _zebi_ means 2⁷⁰.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly zebisecond: T;\r\n\r\n    /**\r\n     * A **zeptosecond** is a SI unit of time equal to _0.000000000000000000001 second_ or\r\n     * `0.000000000000000000000000000001 nanosecond`.\r\n     *\r\n     * The prefix _zepto_ means 10⁻²¹.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly zeptosecond: T;\r\n\r\n    /**\r\n     * A **zeptosecond** is a SI unit of time equal to _1000000000000000000000 seconds_ or\r\n     * `1000000000000000000000000000000 nanoseconds`.\r\n     *\r\n     * The prefix _zetta_ means 10²¹.\r\n     *\r\n     * ---\r\n     *\r\n     * [Back to top](#)\r\n     */\r\n    readonly zettasecond: T;\r\n}\r\n\r\n/**\r\n * A union type, used by parameters that accept either the name of a time unit or a\r\n * [time unit object](../interfaces/_index_.timeunit.html).\r\n *\r\n * @deprecated Since v1.1.0 - In favor of `TimeUnitSource` (will be removed in v2).\r\n */\r\nexport type TimeUnitParameter = keyof TimeUnitDatabase | TimeUnit;\r\n\r\n/**\r\n * A union type, used by parameters that accept either the name of a time unit or a\r\n * [time unit object](../interfaces/_index_.timeunit.html).\r\n *\r\n * The accepted names are the properties defined by [TimeUnitDatabase](../interfaces/_index_.timeunitdatabase.html), but\r\n * case-insensitive and plural variations are also valid (even though TypeScript would not allow it).\r\n */\r\nexport type TimeUnitSource = keyof TimeUnitDatabase | TimeUnit;\r\n\r\n/**\r\n * This type is a union of all accepted types that can be used to represent a time value: a _string_ that parses to a\r\n * number (e.g. \"1000\" or \"1e-10\"), a [big decimal](https://www.npmjs.com/package/decimal.js) or a _number_.\r\n */\r\nexport type TimeValueSource = string | number | Decimal;\r\n\r\n/**\r\n * Time writers are objects used to synthesize time values into strings, i.e. write times using different lexical and\r\n * numerical configurations. **[Write](#write)** is used to express a single time value, using a single time unit;\r\n * **[countdown](#countdown)** is used to classify time values by segmenting them into parts with different time units.\r\n *\r\n * These configurations are loaded in the following order:\r\n * - Defaults — hardcoded for English (US);\r\n * - Options from the current [Locale](_localization_.locale.html);\r\n * - Options from the instance [settings](#settings);\r\n * - Options given as a parameter to a method.\r\n *\r\n * ---\r\n *\r\n * [[include:examples/timewriter.md]]\r\n */\r\nexport class TimeWriter {\r\n\r\n    private _shouldApproximate = true;\r\n\r\n    /**\r\n     * Initializes a new instance of the [TimeWriter](#) class optionally using the given configurations.\r\n     *\r\n     * @param settings\r\n     *   Configurations pertaining to this instance, overriding those of the\r\n     *   [locale](_localization_.locale.html#writerOptions). May be overriden via parameter of [write](#write) or\r\n     *   [countdown](#countdown).\r\n     */\r\n    public constructor(public settings: TimeWriterSettings = {}) { }\r\n\r\n    //#region Countdown Method\r\n\r\n    /**\r\n     * Writes a time length segmented into multiple units using a [Time](_index_.time.html) object and, optionally,\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * This will produce explanations of time lengths much easier to understand than arbitrary fractions.\r\n     *\r\n     * This \"overload\" will always use [TIME_SEGMENTS_COMMON](../modules/_index_.html#time_segments_common) as source\r\n     * for its time unit conversions.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `countdown`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time through the use of multiple units of time.\r\n     */\r\n    public countdown(time: Time, options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time length segmented into multiple units using a [Time](_index_.time.html) object and, optionally,\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * This will produce explanations of time lengths much easier to understand than arbitrary fractions.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param args\r\n     *   Accepts any number of time units or array of time units (if repetitions are given, they will be singled out).\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time through the use of multiple units of time.\r\n     */\r\n    public countdown(time: Time, ... args: Array<TimeUnitSource | TimeUnitSource[]>): string;\r\n\r\n    /**\r\n     * Writes a time length segmented into multiple units using a [Time](_index_.time.html) object and, optionally,\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * This will produce explanations of time lengths much easier to understand than arbitrary fractions.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param args\r\n     *   Accepts any number of time units or array of time units (if repetitions are given, they will be singled out).\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time through the use of multiple units of time.\r\n     */\r\n    public countdown(time: Time, ... args: Array<string | TimeUnit | string[]>): string;\r\n\r\n    /**\r\n     * Writes a time length segmented into multiple units using a [Time](_index_.time.html) object and, optionally,\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * This will produce explanations of time lengths much easier to understand than arbitrary fractions.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `countdown`. It does not change the object in any way whatsoever.\r\n     * @param args\r\n     *   Accepts any number of time units or array of time units (if repetitions are given, they will be singled out).\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time through the use of multiple units of time.\r\n     */\r\n    public countdown(time: Time, options?: TimeWriterSettings,\r\n        ... args: Array<string | TimeUnit | string[]>): string;\r\n\r\n    /**\r\n     * Writes a time length segmented into multiple units using a [Time](_index_.time.html) object and, optionally,\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * This will produce explanations of time lengths much easier to understand than arbitrary fractions.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `countdown`. It does not change the object in any way whatsoever.\r\n     * @param args\r\n     *   Accepts any number of time units or array of time units (if repetitions are given, they will be singled out).\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time through the use of multiple units of time.\r\n     */\r\n    public countdown(time: Time, options?: TimeWriterSettings,\r\n        ... args: Array<TimeUnitSource | TimeUnitSource[]>): string;\r\n\r\n    /**\r\n     * Writes a time length segmented into multiple units using a [Time](_index_.time.html) object and, optionally,\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * This will produce explanations of time lengths much easier to understand than arbitrary fractions.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `countdown`. It does not change the object in any way whatsoever.\r\n     * @param args\r\n     *   Accepts any number of time units or array of time units (if repetitions are given, they will be singled out).\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time through the use of multiple units of time.\r\n     */\r\n    public countdown(time: Time, options?: TimeWriterSettings | TimeUnitSource,\r\n        ... args: Array<string | TimeUnit | string[]>): string;\r\n\r\n    // Actual `countdown` implementation\r\n    public countdown(time: Time,\r\n        options: TimeWriterSettings | TimeUnitSource | TimeUnitSource[] | string | string[] = {},\r\n        ... args: Array<TimeUnitSource | TimeUnitSource[] | string | string[]>) {\r\n\r\n        const timeUnitNames: string[] = [];\r\n        const timeUnitObjects: NamedTimeUnit[] = [];\r\n\r\n        if (typeof(options) === \"string\" || options.hasOwnProperty(\"factor\")) {\r\n            args = [options as TimeUnitSource].concat(args as TimeUnitSource[]);\r\n            options = {};\r\n        }\r\n\r\n        if (options instanceof Array) {\r\n            args = (options as any).concat(args);\r\n            options = {};\r\n        }\r\n\r\n        // If no time units were given, use the \"common\" constant\r\n        if (args.length === 0) {\r\n            args = TimeSegments.common;\r\n        }\r\n\r\n        // Selects all arrays passed as argument\r\n        const arrayArgs = args.filter(e => e instanceof Array);\r\n        const filtered = args.filter(e => !(e instanceof Array));\r\n\r\n        // Replaces arrays by their elements on args\r\n        arrayArgs.forEach(array => { filtered.push.apply(filtered, array); });\r\n        args = filtered;\r\n\r\n        for (const argument of args) {\r\n            const timeUnit = timeUnitFromSource(argument as TimeUnitSource);\r\n\r\n            // Skipping repeated units\r\n            if (timeUnitNames.indexOf(timeUnit.name) > -1) {\r\n                continue;\r\n            }\r\n\r\n            timeUnitNames.push(timeUnit.name);\r\n            timeUnitObjects.push(timeUnit);\r\n        }\r\n\r\n        options = this._combineOptions(options as TimeWriterSettings);\r\n        return this._countdownTime(time, timeUnitObjects, options);\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region Write Method\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, configurations that may override\r\n     * those of the [Locale](_localization_.locale.html) and the instance, for the duration of the method.\r\n     *\r\n     * This will use the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) (which falls\r\n     * back to \"nanoseconds\") as both input (when time is numeric) and output time unit.\r\n     *\r\n     * @param time\r\n     *   A numeric representation of a time value -or- an encapsulated nanosecond-based time.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(time: TimeValueSource | Time, options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param toTimeUnit\r\n     *   Time unit to which the given time will be converted. If this parameter is not passed, it fallbacks to the\r\n     *   [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(time: Time, toTimeUnit?: TimeUnitSource, options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration of the method.\r\n     *\r\n     * @param time\r\n     *   An encapsulated nanosecond-based time.\r\n     * @param toTimeUnit\r\n     *   Time unit to which the given time will be converted. If this parameter is not passed, it fallbacks to the\r\n     *   [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\". Accepts plurals and case variations.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(time: Time, toTimeUnit?: string | TimeUnit, options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration the method.\r\n     *\r\n     * @param timeValue\r\n     *   A numeric representation of a time value.\r\n     * @param timeUnit\r\n     *   Time unit from which the given time value will be converted. If this parameter is not passed, it fallbacks to\r\n     *   the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(timeValue: TimeValueSource, timeUnit?: TimeUnitSource, options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration the method.\r\n     *\r\n     * @param timeValue\r\n     *   A numeric representation of a time value.\r\n     * @param timeUnit\r\n     *   Time unit from which the given time value will be converted. If this parameter is not passed, it fallbacks to\r\n     *   the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(timeValue: TimeValueSource, timeUnit?: string | TimeUnit, options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration the method.\r\n     *\r\n     * @param timeValue\r\n     *   A numeric representation of a time value.\r\n     * @param fromTimeUnit\r\n     *   Time unit from which the given time value will be converted. If this parameter is not passed, it fallbacks to\r\n     *   the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param toTimeUnit\r\n     *   Time unit to which the given time will be converted. If this parameter is not passed, it fallbacks to the\r\n     *   [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(timeValue: TimeValueSource, fromTimeUnit?: TimeUnitSource, toTimeUnit?: TimeUnitSource,\r\n        options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration the method.\r\n     *\r\n     * @param timeValue\r\n     *   A numeric representation of a time value.\r\n     * @param fromTimeUnit\r\n     *   Time unit from which the given time value will be converted. If this parameter is not passed, it fallbacks to\r\n     *   the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\". Accepts plurals and case variations.\r\n     * @param toTimeUnit\r\n     *   Time unit to which the given time will be converted. If this parameter is not passed, it fallbacks to the\r\n     *   [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(timeValue: TimeValueSource, fromTimeUnit?: string | TimeUnit, toTimeUnit?: TimeUnitSource,\r\n        options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration the method.\r\n     *\r\n     * @param timeValue\r\n     *   A numeric representation of a time value.\r\n     * @param fromTimeUnit\r\n     *   Time unit from which the given time value will be converted. If this parameter is not passed, it fallbacks to\r\n     *   the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\".\r\n     * @param toTimeUnit\r\n     *   Time unit to which the given time will be converted. If this parameter is not passed, it fallbacks to the\r\n     *   [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\". Accepts plurals and case variations.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(timeValue: TimeValueSource, fromTimeUnit?: TimeUnitSource, toTimeUnit?: string | TimeUnit,\r\n        options?: TimeWriterSettings): string;\r\n\r\n    /**\r\n     * Writes a time value using a [Time](_index_.time.html) object and, optionally, a time unit to transform it and\r\n     * configurations that may override those of the [Locale](_localization_.locale.html) and the instance, for the\r\n     * duration the method.\r\n     *\r\n     * @param timeValue\r\n     *   A numeric representation of a time value.\r\n     * @param fromTimeUnit\r\n     *   Time unit from which the given time value will be converted. If this parameter is not passed, it fallbacks to\r\n     *   the [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\". Accepts plurals and case variations.\r\n     * @param toTimeUnit\r\n     *   Time unit to which the given time will be converted. If this parameter is not passed, it fallbacks to the\r\n     *   [default time unit](../interfaces/_index_.timewritersettings.html#defaulttimeunit) and ultimately to\r\n     *   \"nanoseconds\". Accepts plurals and case variations.\r\n     * @param options\r\n     *   When given, these configurations will override the those of the [Locale](_localization_.locale.html) and the\r\n     *   instance, for this specific `write`. It does not change the object in any way whatsoever.\r\n     * @return\r\n     *   A string containing a synthetic representation of the given time.\r\n     */\r\n    public write(timeValue: TimeValueSource, fromTimeUnit?: string | TimeUnit, toTimeUnit?: string | TimeUnit,\r\n        options?: TimeWriterSettings): string;\r\n\r\n    // Actual `write` implementation\r\n    public write(time: TimeValueSource | Time, fromTimeUnit?: TimeUnitSource | TimeWriterSettings | string,\r\n        toTimeUnit?: TimeUnitSource | TimeWriterSettings | string, options?: TimeWriterSettings) {\r\n\r\n        const isOptions = (object: any) => typeof(object) === \"object\" && !object.hasOwnProperty(\"factor\");\r\n\r\n        if (!options && isOptions(fromTimeUnit)) {\r\n            options = fromTimeUnit as TimeWriterSettings;\r\n            fromTimeUnit = toTimeUnit;\r\n            toTimeUnit = undefined;\r\n        }\r\n\r\n        if (!options && isOptions(toTimeUnit)) {\r\n            options = toTimeUnit as TimeWriterSettings;\r\n            toTimeUnit = undefined;\r\n        }\r\n\r\n        options = this._combineOptions(options);\r\n\r\n        fromTimeUnit = (fromTimeUnit || options.defaultTimeUnit || \"nanosecond\") as TimeUnitSource;\r\n        toTimeUnit = (toTimeUnit || fromTimeUnit) as TimeUnitSource;\r\n\r\n        if (!(time instanceof Time)) {\r\n            time = Time.from(time, fromTimeUnit);\r\n        }\r\n\r\n        return this._writeTime(time, options, toTimeUnit);\r\n    }\r\n    //#endregion\r\n\r\n    // Gets the options overriden in the correct order\r\n    private _combineOptions(options: TimeWriterSettings | undefined) {\r\n\r\n        options = merge(defaultSettings, Locale.settings.writerOptions, this.settings, options);\r\n\r\n        // Deprecated properties will be removed on next major release, but for now, parse them\r\n\r\n        options.decimalPlaces = typeof(options.decimalPlaces) === \"number\"\r\n            ? options.decimalPlaces\r\n            : options.fractionDigits;\r\n\r\n        if (options.timeUnitSeparator === defaultSettings.timeUnitSeparator && options.spaceTimeUnit === false) {\r\n            options.timeUnitSeparator = \"\";\r\n        }\r\n\r\n        if (options.terms) {\r\n            options.termApproximately = options.termApproximately || options.terms.approximately;\r\n            options.termInfinite = options.termInfinite || options.terms.infinite;\r\n            options.termNaN = options.termNaN || options.terms.nan;\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    // Count and writes times unit-by-unit\r\n    private _countdownTime(time: Time, timeUnitList: NamedTimeUnit[], options: TimeWriterSettings) {\r\n\r\n        let value: Decimal = new Decimal(0);\r\n        let integer: Decimal = new Decimal(0);\r\n        let fraction: Decimal = new Decimal(0);\r\n\r\n        const update = (total: Decimal) => { value = total, integer = value.trunc(), fraction = value.minus(integer); };\r\n\r\n        // Sorts the time units from largest factor to smallest\r\n        timeUnitList.sort((a, b) => b.factor.comparedTo(a.factor));\r\n\r\n        // Sets the value to the representation of the first time unit\r\n        update(time.toBig(timeUnitList[0]));\r\n\r\n        const result: string[] = [];\r\n\r\n        for (let i = 1; i < timeUnitList.length; i += 1) {\r\n            const previousTimeUnit = timeUnitList[i - 1];\r\n\r\n            if ((integer.comparedTo(0) !== 0 || options.hideZeroSegments === false) &&\r\n                (!integer.isNaN() || result.length === 0)) {\r\n\r\n                const parsedTime = time.isApproximated || previousTimeUnit.approximated\r\n                    ? Time.from(integer, previousTimeUnit).approximate()\r\n                    : Time.from(integer, previousTimeUnit);\r\n\r\n                // Adding the current segment\r\n                result.push(this.write(parsedTime, previousTimeUnit, options));\r\n\r\n                // Preventing `write` from writting the approximation symbol / name\r\n                if (parsedTime.isApproximated || previousTimeUnit.approximated) {\r\n                    this._shouldApproximate = false;\r\n                }\r\n            }\r\n\r\n            update(Time.from(fraction, previousTimeUnit).toBig(timeUnitList[i]));\r\n        }\r\n\r\n        const timeUnit = timeUnitList[timeUnitList.length - 1];\r\n\r\n        if ((value.comparedTo(0) !== 0 || options.hideZeroSegments === false) &&\r\n            (!value.isNaN() || result.length === 0)) {\r\n\r\n            if (timeUnit.factor.equals(\"5.39056e-35\")) {\r\n                // Planck time is teoretically indivisible\r\n                result.push(this.write(value.round(), timeUnit, options));\r\n            } else {\r\n                // Adds the last segment in its entirety (no integer-only)\r\n                result.push(this.write(value, timeUnit, options));\r\n            }\r\n        }\r\n\r\n        this._shouldApproximate = true;\r\n        return result.join(options.segmentSeparator || \"\");\r\n    }\r\n\r\n    // Parses numeric options and returns the numeric string\r\n    private _writeNumber(value: Decimal, options: TimeWriterSettings) {\r\n\r\n        if (value.isNaN()) {\r\n            return (options.verbose ? options.termNaN : options.symbolNaN) || \"\";\r\n        }\r\n\r\n        if (!value.isFinite()) {\r\n            return (options.verbose ? options.termInfinite : options.symbolInfinite) || \"\";\r\n        }\r\n\r\n        if (options.numericNotation === \"roman\") {\r\n            return writeRoman(value);\r\n        }\r\n\r\n        if (options.numericNotation === \"roman-fractions\") {\r\n            return writeRoman(value, true);\r\n        }\r\n\r\n        const parameters = [options.decimalPlaces, options.roundingMode];\r\n        let stringValue: string;\r\n\r\n        if (options.significantDigits) {\r\n            const offset = value.trunc().precision(true);\r\n            value = value.toSignificantDigits(options.significantDigits + offset, options.roundingMode as any);\r\n        }\r\n\r\n        if (options.numericNotation === \"scientific\") {\r\n            stringValue = value.toExponential.apply(value, parameters);\r\n        } else {\r\n            stringValue = value.toFixed.apply(value, parameters);\r\n        }\r\n\r\n        // Parsing the thousands separator only for decimals and values >= 1000\r\n        if (options.numericNotation === \"decimal\" && options.thousandsSeparator && value.comparedTo(1000) >= 0) {\r\n            const parts = stringValue.split(localeDecimalSeparator);\r\n            parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, options.thousandsSeparator);\r\n\r\n            if (parts.length === 2) {\r\n                stringValue = parts.join(localeDecimalSeparator);\r\n            } else {\r\n                stringValue = parts[0];\r\n            }\r\n        }\r\n\r\n        if (typeof(options.decimalSeparator) === \"string\" && options.decimalSeparator !== localeDecimalSeparator) {\r\n            stringValue = replaceLast(stringValue, localeDecimalSeparator, options.decimalSeparator);\r\n        }\r\n\r\n        return stringValue;\r\n    }\r\n\r\n    // Parses time-related options and return the time string\r\n    private _writeTime(time: Time, options: TimeWriterSettings, targetTimeUnit: string | TimeUnit) {\r\n\r\n        const namedTimeUnit = timeUnitFromSource(targetTimeUnit || options.defaultTimeUnit || \"nanosecond\");\r\n        const translation = Locale.settings.timeUnits ? Locale.settings.timeUnits[namedTimeUnit.name] : {};\r\n        const value = time.toBig(targetTimeUnit);\r\n\r\n        const timeUnit = merge(namedTimeUnit, translation) as NamedTimeUnit;\r\n        const result: string[] = [];\r\n\r\n        // Part 1: approximation term/symbol\r\n        if (this._shouldApproximate && (time.isApproximated || namedTimeUnit.approximated)) {\r\n            const approximately = !!options.verbose\r\n                ? options.termApproximately ? options.termApproximately + \" \" : \"\"\r\n                : options.symbolApproximately;\r\n\r\n            result.push(approximately || \"\");\r\n        }\r\n\r\n        // Part 2: number\r\n        if (!options.numericWriter) {\r\n            result.push(this._writeNumber(value, options));\r\n        } else {\r\n            result.push(options.numericWriter(value.toNumber(), value));\r\n        }\r\n\r\n        // Part 3: separator\r\n        if (!options.hideTimeUnit) {\r\n            result.push(options.timeUnitSeparator || \"\");\r\n\r\n        // Part 4: time unit\r\n        } else {\r\n            return filterEmpty(result).join(\"\");\r\n        }\r\n\r\n        const pluralize = timeUnit.pluralize !== false && (!value.isFinite() || value.comparedTo(1) > 0);\r\n        result.push(this._writeTimeUnit(value, timeUnit, options, pluralize));\r\n        return filterEmpty(result).join(\"\");\r\n    }\r\n\r\n    // Parses time unit-related options and returns the time unit string\r\n    private _writeTimeUnit(value: Decimal, timeUnit: NamedTimeUnit, options: TimeWriterSettings, plural: boolean) {\r\n        const result: string[] = [];\r\n\r\n        if (!options.verbose && timeUnit.symbol) {\r\n            result.push(timeUnit.symbol);\r\n            return filterEmpty(result).join(\"\");\r\n        }\r\n\r\n        let timeUnitName = timeUnit.readableName;\r\n\r\n        if (plural && typeof(timeUnit.customPlural) === \"function\") {\r\n            timeUnitName = timeUnit.customPlural(value.toNumber(), value);\r\n        }\r\n\r\n        if (plural && typeof(timeUnit.customPlural) === \"string\") {\r\n            timeUnitName = timeUnit.customPlural;\r\n        }\r\n\r\n        if (typeof(timeUnitName) === \"undefined\") {\r\n            timeUnitName = timeUnit.name.replace(/([a-z])([A-Z])/g, \"$1 $2\").toLowerCase();\r\n        }\r\n\r\n        if (plural && !timeUnit.customPlural) {\r\n            timeUnitName += \"s\";\r\n        }\r\n\r\n        result.push(timeUnitName);\r\n        return filterEmpty(result).join(\"\");\r\n    }\r\n}\r\n\r\n/**\r\n * Objects of this type are used to configure the behavior of [time writers](../classes/_index_.timewriter.html).\r\n *\r\n * Using these objects it is possible to change the lexical and numerical output to fit many different scenarios. See\r\n * the documentation for each property for more information.\r\n */\r\nexport interface TimeWriterSettings {\r\n\r\n    /**\r\n     * Numer of decimal places resulting from time conversions. Used in conjunction with [roundingMode] to write numeric\r\n     * values\r\n     *\r\n     * Default: `undefined`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/decimalPlaces.md]]\r\n     */\r\n    decimalPlaces?: number;\r\n\r\n    /**\r\n     * String used as decimal separator, specially useful when translating to languages and regions where the \"dot\"\r\n     * notation is not standard.\r\n     *\r\n     * If not set, time writers will first try to parse the decimal separator for the locale of the machine where the\r\n     * script is running and will ultimately fallback to `\".\"`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/decimalSeparator.md]]\r\n     */\r\n    decimalSeparator?: string;\r\n\r\n    /**\r\n     * Specifies the default unit to convert to when writing time values.\r\n     *\r\n     * Default is [nanosecond](_index_.timeunitdatabase.html#nanosecond).\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/defaultTimeUnit.md]]\r\n     */\r\n    defaultTimeUnit?: TimeUnitSource;\r\n\r\n    /**\r\n     * **This property is no longer supported!** When given, this will be used as the fixed number of decimal digits.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `significantDigits` (will be removed in v2).\r\n     */\r\n    fractionDigits?: number;\r\n\r\n    /**\r\n     * When this property is set to true, it will prevent the time writer from writting any form of time unit, be it\r\n     * plural, symbol or verbose. It will also prevent the output of the [time unit separator](#timeunitseparator).\r\n     *\r\n     * Default is `false`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/hideTimeUnit.md]]\r\n     */\r\n    hideTimeUnit?: boolean;\r\n\r\n    /**\r\n     * Whether to hide [countdown](../classes/_index.timewriter.html#countdown) segments with a value of 0 (zero).\r\n     *\r\n     * Default is `true`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/hideZeroSegments.md]]\r\n     */\r\n    hideZeroSegments?: boolean;\r\n\r\n    /**\r\n     * Numeric notation used to write time values. Accepted values are:\r\n     * - **\"decimal\":** standard _Hindu–Arabic numeral system_ using base ten;\r\n     * - **\"roman\":** _Ancient Rome_ numeral system, ignoring fractions;\r\n     * - **\"roman-fractions\":** _Ancient Rome_ numeral system, using\r\n     *   [common fractions](https://en.wikipedia.org/wiki/Roman_numerals#Fractions);\r\n     * - **\"scientific\":** Exponent notation; writes very small and very large numbers using powers of 10.\r\n     *\r\n     * Default is `\"decimal\"`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/numericNotation.md]]\r\n     */\r\n    numericNotation?: NumericNotation;\r\n\r\n    /**\r\n     * This can be set to a function that will replace all other forms of numeric writting, ignoring the\r\n     * [numeric notation](#numericnotation) and other mathematical properties.\r\n     *\r\n     * This function may receive two parameters: a number and an optional\r\n     * [big decimal](https://www.npmjs.com/package/decimal.js).\r\n     *\r\n     * Default is `undefined`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/numericWriter.md]]\r\n     */\r\n    numericWriter?: NumericWriter;\r\n\r\n    /**\r\n     * Numeric [rounding mode](../enums/_index_.roundingmode.html) used by the writer.\r\n     *\r\n     * Default is `RoundingMode.RoundHalfUp` or `4`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/roundingMode.md]]\r\n     */\r\n    roundingMode?: RoundingMode;\r\n\r\n    /**\r\n     * A string used to separate [countdown](../classes/_index.timewriter.html#countdown) segments.\r\n     *\r\n     * Default is `\", \"` (comma and space).\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/segmentSeparator.md]]\r\n     */\r\n    segmentSeparator?: string;\r\n\r\n    /**\r\n     * **This property is no longer supported!** Whether to separate the numeric value from the time unit.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `timeUnitSeparator` (will be removed in v2).\r\n     */\r\n    spaceTimeUnit?: boolean;\r\n\r\n    /**\r\n     * Number of significant digits of the decimal part of numeric values, intended to minimize the quantity of written\r\n     * numbers for very large conversions.\r\n     *\r\n     * It will enforce a precision of the specified magnitude, but only for the decimal part of the number, unlike\r\n     * [decimal.js precision](https://mikemcl.github.io/decimal.js/#sd). It doesn't apply to leading zeros.\r\n     *\r\n     * Default: `10`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/significantDigits.md]]\r\n     */\r\n    significantDigits?: number;\r\n\r\n    /**\r\n     * When writting time values or units which based on approximations, this symbol will be added before the number to\r\n     * demonstrate the approximation, when [verbose](#verbose) is disabled. Otherwise, its [term](#termapproximately) is\r\n     * used instead.\r\n     *\r\n     * Default: `\"≈\"` (_almost equal to_ symbol).\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/symbolApproximately.md]]\r\n     */\r\n    symbolApproximately?: string;\r\n\r\n    /**\r\n     * When writting time values that represent an _Infinity_, this symbol will be used to express it, when\r\n     * [verbose](#verbose) is disabled. Otherwise, its [term](#terminfinite) is used instead.\r\n     *\r\n     * Default: `\"∞\"`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/symbolInfinite.md]]\r\n     */\r\n    symbolInfinite?: string;\r\n\r\n    /**\r\n     * When writting time values that represent a _NaN_ (not a number), this symbol will be used to express it, when\r\n     * [verbose](#verbose) is disabled. Otherwise, its [term](#termnan) is used instead.\r\n     *\r\n     * Default: `\"NaN\"`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/symbolNaN.md]]\r\n     */\r\n    symbolNaN?: string;\r\n\r\n    /**\r\n     * When writting time values or units which based on approximations, this string will be added before the number to\r\n     * demonstrate the approximation, when [verbose](#verbose) is enabled. Otherwise, its [symbol](#symbolapproximately)\r\n     * is used instead.\r\n     *\r\n     * Default for English (US): `\"approximately\"`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/termApproximately.md]]\r\n     */\r\n    termApproximately?: string;\r\n\r\n    /**\r\n     * When writting time values that represent an _Infinity_, this string will be used to express it, when\r\n     * [verbose](#verbose) is enabled. Otherwise, its [symbol](#symbolinfinite) is used instead.\r\n     *\r\n     * Default for English (US): `\"infinite\"`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/termInfinite.md]]\r\n     */\r\n    termInfinite?: string;\r\n\r\n    /**\r\n     * When writting time values that represent a _NaN_ (not a number), this string will be used to express it, when\r\n     * [verbose](#verbose) is enabled. Otherwise, its [symbol](#symbolnan) is used instead.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/termNaN.md]]\r\n     */\r\n    termNaN?: string;\r\n\r\n    /**\r\n     * **This property is no longer supported!** This was used to define a few special numeric terms.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `verbose` (will be removed in v2).\r\n     */\r\n    terms?: {\r\n        approximately?: string;\r\n        infinite?: string;\r\n        nan?: string;\r\n    };\r\n\r\n    /**\r\n     * A string used as the thousands separator when using decimal [numeric notations](#numericnotation).\r\n     *\r\n     * Default is `undefined`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/thousandsSeparator.md]]\r\n     */\r\n    thousandsSeparator?: string;\r\n\r\n    /**\r\n     * A string that separates the numeric value from the time unit.\r\n     *\r\n     * Default is `\" \"` (space).\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/timeUnitSeparator.md]]\r\n     */\r\n    timeUnitSeparator?: string;\r\n\r\n    /**\r\n     * Whether to write more sentences to describe a time value instead of using symbols. Setting this to true enforce\r\n     * descriptive text for time units\r\n     *\r\n     * All time units without a symbol are already written in verbose mode.\r\n     *\r\n     * Default is `false`.\r\n     *\r\n     * ---\r\n     *\r\n     * [[include:examples/timewritersettings/verbose.md]]\r\n     */\r\n    verbose?: boolean;\r\n\r\n    /**\r\n     * **This property is no longer supported!** Whether or not to write down the full unit readable name, instead of\r\n     * its symbol.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `verbose` (will be removed in v2).\r\n     */\r\n    verboseTimeUnit?: boolean;\r\n}\r\n\r\n//#endregion\r\n","/*! ****************************************************************************\r\nCopyright (c) 2017-2018 Pedro José Batista\r\nMIT License\r\n\r\nSee the LICENSE file for more information.\r\n***************************************************************************** */\r\n/** [[include:localization.md]] */ /** */\r\nimport fs = require(\"fs\");\r\nimport path = require(\"path\");\r\nimport { BaseTimeUnit, TimeUnitDatabase, TimeWriterSettings } from \".\";\r\n\r\n/**\r\n * This interface describes objects with properties belonging to the specified type parameter `T`.\r\n *\r\n * @typeparam T\r\n *   Type of element stored by the object (string by default).\r\n */\r\nexport interface Dictionary<T = string> {\r\n    [propertyName: string]: T;\r\n}\r\n\r\n/**\r\n * This class manages the internationalization of the module, altering the results synthesized by\r\n * [time writers](_index_.timewriter.html).\r\n *\r\n * Translations are stored in files located at `src/locales`. These files contain the transcription for time units and\r\n * linguistic configurations.\r\n *\r\n * ---\r\n *\r\n * See [Contributing: Translating](https://github.com/pjbatista/timecount/blob/master/CONTRIBUTING.md#translating) if\r\n * you wish to contribute with a new translation for timecount.\r\n */\r\nexport class Locale {\r\n\r\n    private static _availableFiles: Dictionary;\r\n    private static _availableIdentifiers: string[];\r\n    private static _availableLanguages: Dictionary;\r\n    private static _currentIdentifier = \"en-us\";\r\n    private static _settings: LocaleSettings = {};\r\n\r\n    /**\r\n     * Gets the current locale identifier.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `get` (will be removed in v2).\r\n     */\r\n    public static get currentIdentifier() { return Locale._currentIdentifier; }\r\n\r\n    /** Gets the configuration for the current locale which represents the translation file currently loaded. */\r\n    public static get settings() { return Locale._settings; }\r\n\r\n    /**\r\n     * Gets the current locale identifier (e.g.: \"fr\" represents French — the international translation for the language\r\n     * as a whole; \"fr-ca\" is French (Canada) — represents a localized variation of the French language meant for\r\n     * Canada).\r\n     *\r\n     * The default is \"en-us\", which represents English (United States), a language built into the module (doesn't\r\n     * require any translation file).\r\n     */\r\n    public static get() { return Locale._currentIdentifier; }\r\n\r\n    /**\r\n     * Gets whether the given locale identifier is available to `timecount`.\r\n     *\r\n     * @param localeIdentifier\r\n     *   A language / region locale specifier (e.g. \"en-au\", \"pt-br\").\r\n     * @return\r\n     *   True if a valid locale was provided; false otherwise.\r\n     */\r\n    public static isAvailable(localeIdentifier: string) {\r\n\r\n        if (!Locale._availableIdentifiers) {\r\n            Locale._initialize();\r\n        }\r\n\r\n        localeIdentifier = localeIdentifier.toLocaleLowerCase();\r\n\r\n        return Locale.listAvailable().indexOf(localeIdentifier) > -1;\r\n    }\r\n\r\n    /**\r\n     * Gets a list with all locale identifiers available to timecount.\r\n     *\r\n     * @return\r\n     *   An array with all available locale identifiers.\r\n     */\r\n    public static listAvailable() {\r\n\r\n        if (!Locale._availableIdentifiers) {\r\n            Locale._initialize();\r\n        }\r\n\r\n        const languages = Object.keys(this._availableLanguages);\r\n        return Locale._availableIdentifiers.concat([\"en\", \"en-us\"], languages).sort();\r\n    }\r\n\r\n    /**\r\n     * Sets the current timecount language using the specified locale identifier (e.g.: \"pt\" represents Portuguese — the\r\n     * international translation for the language as a whole; \"pt-br\" is Portuguese (Brazilian) — represents a localized\r\n     * variation of the Portuguese language meant for Brazil).\r\n     *\r\n     * @param localeIdentifier\r\n     *   A string with a 2 letter language identifier (\"en\", \"es\", \"pt\", etc.) -or- a 5 letter language + region\r\n     *   identifier (\"en-ca\", \"pt-ao\"). This parameter is case-insensitive. If empty, it will reset the locale to \"en\".\r\n     * @throws Error\r\n     *   When the locale identifier is invalid.\r\n     */\r\n    public static set(localeIdentifier: string = \"en\") {\r\n\r\n        localeIdentifier = localeIdentifier.toLocaleLowerCase();\r\n\r\n        // English (US) is hardcoded; no translation file required\r\n        if (localeIdentifier === \"en\" || localeIdentifier === \"en-us\") {\r\n            Locale._currentIdentifier = \"en-us\";\r\n            Locale._settings = {};\r\n            return;\r\n        }\r\n\r\n        // isAvailable already calls _initialize\r\n        if (!Locale.isAvailable(localeIdentifier)) {\r\n            throw new Error(\"Invalid locale identifier\");\r\n        }\r\n\r\n        if (localeIdentifier.length === 2 && Locale._availableLanguages.hasOwnProperty(localeIdentifier)) {\r\n            localeIdentifier = Locale._availableLanguages[localeIdentifier];\r\n        }\r\n\r\n        const pathToLocaleFile = Locale._availableFiles[localeIdentifier];\r\n\r\n        Locale._currentIdentifier = localeIdentifier;\r\n        const settings: LocaleSettings = require(`./locales/${pathToLocaleFile}`).default;\r\n        Locale._settings = settings;\r\n\r\n        // Parsing deprecated properties\r\n        settings.defaultTimeUnit = settings.defaultTimeUnit || settings.defaultOptions;\r\n\r\n        if (!settings.timeUnits) {\r\n            return;\r\n        }\r\n\r\n        // tslint:disable-next-line:curly\r\n        for (const timeUnitName in settings.timeUnits) if (settings.timeUnits.hasOwnProperty(timeUnitName)) {\r\n\r\n            // Fixes the plurals when translating: nulls are not parsed like undefineds\r\n            const timeUnit = settings.timeUnits[timeUnitName as keyof TimeUnitDatabase];\r\n            timeUnit.customPlural = timeUnit.customPlural || null as any;\r\n        }\r\n\r\n        return;\r\n    }\r\n\r\n    private static _initialize() {\r\n        const availableFiles: Dictionary = {};\r\n        const availableIdentifiers: string[] = [];\r\n        const availableLanguages: Dictionary = {};\r\n\r\n        const localeFiles = fs.readdirSync(path.join(__dirname, \"locales\"));\r\n\r\n        for (const localeFile of localeFiles) {\r\n            const localeIdentifier = localeFile.toLocaleLowerCase();\r\n\r\n            // Splits the file path into 3 groups: path, language and region (which is optional)\r\n            const localeParser = /^([a-z]{2})-?(|[a-z]{2})\\.ts/.exec(localeIdentifier);\r\n\r\n            if (localeParser === null) {\r\n                continue;\r\n            }\r\n\r\n            // Separating regionless languages and regionalizations\r\n            const language = localeParser[1];\r\n            const region = localeParser[2];\r\n            const identifier = `${language}-${region.length === 2 ? region : \"\"}`;\r\n\r\n            if (!availableLanguages.hasOwnProperty(language)) {\r\n                availableLanguages[language] = identifier;\r\n            }\r\n\r\n            availableIdentifiers.push(identifier);\r\n            availableFiles[identifier] = localeFile;\r\n        }\r\n\r\n        Locale._availableFiles = availableFiles;\r\n        Locale._availableIdentifiers = availableIdentifiers;\r\n        Locale._availableLanguages = availableLanguages;\r\n    }\r\n\r\n    private constructor() { throw new Error(\"Cannot initialize static class Locale\"); }\r\n}\r\n\r\n/**\r\n * Objects of this class represent the configurations of translation files.\r\n *\r\n * After a translation has been [set](../classes/_localization_.locale.html#set), these configurations will be available\r\n * at [Locale.settings](../classes/_localization_.locale.html#settings) to be used by interested objects (such as\r\n * [time writers](../classes/_index_.timewriter.html)).\r\n */\r\nexport interface LocaleSettings {\r\n\r\n    /**\r\n     * These options allow for default linguistic configuration for the time units of the locale.\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `defaultTimeUnit` (will be removed in v2).\r\n     */\r\n    defaultOptions?: BaseTimeUnit;\r\n\r\n    /**\r\n     * An object able to override the default linguistic parsing of time units.\r\n     *\r\n     * It may be used to set a [custom plural function](_index_.basetimeunit.html#customplural) or prevent time units\r\n     * from being [pluralized](_index_.basetimeunit.html#pluralize) by default.\r\n     */\r\n    defaultTimeUnit?: BaseTimeUnit;\r\n\r\n    /**\r\n     * Database of time unit translations.\r\n     *\r\n     * Gives the ability to set [readable names](_index_.basetimeunit.html#readablename) and\r\n     * [plurals](_index_.basetimeunit.html#customplural) of translations.\r\n     */\r\n    timeUnits?: TimeUnitDatabase<BaseTimeUnit>;\r\n\r\n    /**\r\n     * Configurations assigned to [time writers](../classes/_index_.timewriter.html).\r\n     *\r\n     * Contains linguistic and mathematical properties applied to all\r\n     * [countdown](../classes/_index_.timewriter.html#countdown) and [write](../classes/_index_.timewriter.html#write)\r\n     * calls (unless overriden by the object or method).\r\n     */\r\n    writerOptions?: TimeWriterSettings;\r\n}\r\n\r\n/**\r\n * This interface extends from [BaseTimeUnit](_index_.basetimeunit.html) with the only difference being that it enforces\r\n * its [readable name](#readablename) to be not-optional, in order to better characterize a parsed time unit object.\r\n *\r\n * @deprecated Since v1.1.0 - Unnecessary interface (will be removed in v2).\r\n */\r\nexport interface LocalizedTimeUnit extends BaseTimeUnit {\r\n\r\n    /** This version of the property is not optional. */\r\n    readonly readableName: string;\r\n}\r\n","/*! ****************************************************************************\r\nCopyright (c) 2017-2018 Pedro José Batista\r\nMIT License\r\n\r\nSee the LICENSE file for more information.\r\n***************************************************************************** */\r\n/** [[include:utils.md]] */ /** */\r\nimport { Decimal } from \"decimal.js\";\r\nimport { Time } from \".\";\r\n\r\n/**\r\n * Gets the number of nanoseconds that represent the current time according to `process`.\r\n *\r\n * @return\r\n *   [Big decimal](https://www.npmjs.com/package/decimal.js) representation of the current time, in nanoseconds.\r\n */\r\nexport function getProcessTime() {\r\n    const preciseTime = process.hrtime();\r\n    return (new Decimal(preciseTime[0])).times(\"1e+9\").add(preciseTime[1]);\r\n}\r\n\r\n/**\r\n * Counts the duration of runtime operations.\r\n *\r\n * An instance of [BasicTimer](#) is able to count the duration between its [start](#start) and [stop](#stop).\r\n * Every start-stop cycle resets the object to its default state.\r\n *\r\n * See [Timer](_utils_.timer.html) if you need pausing and [StopWatch](_utils_.stopwatch.html) for time segmentation\r\n * (laps).\r\n *\r\n * ---\r\n *\r\n * [[include:examples/basictimer.md]]\r\n */\r\nexport class BasicTimer {\r\n\r\n    /** Protected field with the time value representing the moment the timer started. */\r\n    protected _startTime?: Decimal;\r\n\r\n    /** Gets the time elapsed since the start of the timer until _now_. */\r\n    public get elapsedTime() {\r\n        return this.getElapsedTime();\r\n    }\r\n\r\n    /** Gets whether the timer is currently running (it was [started](#start) and not yet [stopped](#stop)). */\r\n    public get isRunning() { return !!this._startTime; }\r\n\r\n    /**\r\n     * A protected property useful when overriding the timers it changes the output of\r\n     * [timer errors](_utils_.timererror.html) in order to represent the specified name.\r\n     */\r\n    protected get timerErrorType() { return \"timer\"; }\r\n\r\n    /**\r\n     * Initializes a new instance of the [BasicTimer](#) class, optionally auto-starting it.\r\n     *\r\n     * @param autoStart\r\n     *   Determines whether the timer will immediately start; default is false.\r\n     */\r\n    public constructor(autoStart: boolean = false) {\r\n\r\n        if (autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Begins to count time, setting the [start time](#starttime) to a value equivalent to _now_.\r\n     *\r\n     * @return\r\n     *   Time that represents _now_ (or better yet, the moment the timer has started).\r\n     * @throws TimerError\r\n     *   When the timer is already running.\r\n     */\r\n    public start() {\r\n\r\n        if (this._startTime) {\r\n            throw TimerError.timerAlreadyStarted(this.timerErrorType);\r\n        }\r\n\r\n        this._startTime = getProcessTime();\r\n        return this._startTime as Decimal;\r\n    }\r\n\r\n    /**\r\n     * Ends the time counting, returning the total elapsed time and resetting the object to its default state.\r\n     *\r\n     * @return\r\n     *   A time with the total amount of nanoseconds spent between [start](#start) and _now_.\r\n     * @throws TimerError\r\n     *   When the timer has not yet started.\r\n     */\r\n    public stop() {\r\n\r\n        if (!this._startTime) {\r\n            throw TimerError.timerNotStarted(this.timerErrorType);\r\n        }\r\n\r\n        const resultTime = new Time(getProcessTime().minus(this._startTime));\r\n        this._startTime = undefined;\r\n\r\n        return resultTime;\r\n    }\r\n\r\n    /**\r\n     * Protected alias to [elapsedTime](#elapsedtime).\r\n     */\r\n    protected getElapsedTime() {\r\n\r\n        if (!this._startTime) {\r\n            return new Time(0);\r\n        }\r\n\r\n        return new Time(getProcessTime().minus(this._startTime));\r\n    }\r\n\r\n    /**\r\n     * Protected alias to [isRunning](#isRunning).\r\n     */\r\n    protected getIsRunning() {\r\n        return !!this._startTime;\r\n    }\r\n}\r\n\r\n/**\r\n * This type of function is used by [stopwatches](../classes/_utils_.stopwatch.html) to return additional information\r\n * to the callers of [stop](../classes/_utils_.stopwatch.html#stop)\r\n */\r\nexport type StopWatchDetail = (partialTimes: Time[], error: number) => void;\r\n\r\n/**\r\n * Counts the duration of runtime operations, with pausing capabilities.\r\n *\r\n * An instance of [Timer](#) is able to count the duration between its [start](#start) and [stop](#stop), as well as\r\n * [pausing](#pause), which temporarily stops the time counting. Every start-stop cycle resets the object to its\r\n * default state.\r\n *\r\n * See [BasicTimer](_utils_.basictimer.html) for a simpler timer implentation (less overhead) and\r\n * [StopWatch](_utils_.stopwatch.html) for time segmentation.\r\n *\r\n * ---\r\n *\r\n * [[include:examples/timer.md]]\r\n */\r\nexport class Timer extends BasicTimer {\r\n\r\n    /** Protected field with the time value representing the moment the pausing started. */\r\n    protected _pauseStartTime?: Decimal;\r\n\r\n    /** Protected field with the time value representing the sum of all previous pause times. */\r\n    protected _pauseTimeSum = new Decimal(0);\r\n\r\n    /** Gets the time elapsed since the timer was [paused](#pause). */\r\n    public get elapsedPauseTime() {\r\n\r\n        if (!this._pauseStartTime) {\r\n            return new Time(0);\r\n        }\r\n\r\n        return new Time(getProcessTime().minus(this._pauseStartTime));\r\n    }\r\n\r\n    /** Gets the total amount of time the object spent [paused](#pause) during the current start-stop cycle. */\r\n    public get totalPauseTime() {\r\n        return this.elapsedPauseTime.add(this._pauseTimeSum);\r\n    }\r\n\r\n    /**\r\n     * Gets the time elapsed since the start of the timer until _now_.\r\n     *\r\n     * The value of this time will remain unchanged when the timer is [paused](#stop).\r\n     */\r\n    public get elapsedTime() {\r\n\r\n        if (!this._startTime) {\r\n            return new Time(0);\r\n        }\r\n\r\n        const totalElapsedTime = super.getElapsedTime();\r\n\r\n        if (!this._pauseStartTime) {\r\n            return totalElapsedTime.subtract(this._pauseTimeSum);\r\n        }\r\n\r\n        // If paused, calculate the difference between the elapsed time and the paused time\r\n        return totalElapsedTime\r\n            .add(this._startTime)\r\n            .subtract(this._pauseStartTime)\r\n            .subtract(this._pauseTimeSum);\r\n    }\r\n\r\n    /** Gets whether the timer is paused. */\r\n    public get isPaused() { return !!this._pauseStartTime; }\r\n\r\n    /**\r\n     * Gets whether the timer is currently running (it was [started](#start) and not yet [stopped](#stop)).\r\n     *\r\n     * This property is **not influenced by [pauses](#pause)**, i.e. it will return true even when paused.\r\n     */\r\n    public get isRunning() { return super.getIsRunning(); }\r\n\r\n    /**\r\n     * Prevents the object from counting the time until it is [resumed](#resume).\r\n     *\r\n     * Both the [elapsed time](#elapsedtime) and the time resulting from [stop](#stop) won't change during the pause,\r\n     * but [pausedTime](#pausedtime) and [totalPauseTime](#totalpausedtime) will.\r\n     *\r\n     * @throws TimerError\r\n     *   When the timer has not yet started -or- it is already paused.\r\n     */\r\n    public pause() {\r\n\r\n        if (!this.isRunning) {\r\n            throw TimerError.timerNotStarted(this.timerErrorType);\r\n        }\r\n\r\n        if (this._pauseStartTime) {\r\n            throw TimerError.timerAlreadyPaused(this.timerErrorType);\r\n        }\r\n\r\n        this._pauseStartTime = getProcessTime();\r\n        return this._pauseStartTime;\r\n    }\r\n\r\n    /**\r\n     * Resumes the time counting, recovering the object from a [paused](#pause) state.\r\n     *\r\n     * @return\r\n     *   The amount of time the timer spent paused.\r\n     * @throws TimerError\r\n     *   When the timer has not yet started -or- it is not paused.\r\n     */\r\n    public resume() {\r\n\r\n        if (!this.isRunning) {\r\n            throw TimerError.timerNotStarted(this.timerErrorType);\r\n        }\r\n\r\n        if (!this._pauseStartTime) {\r\n            throw TimerError.timerNotPaused(this.timerErrorType);\r\n        }\r\n\r\n        const pausedTime = this.elapsedPauseTime;\r\n        this._pauseStartTime = undefined;\r\n        this._pauseTimeSum = this._pauseTimeSum.add(pausedTime.bigValue);\r\n\r\n        return new Time(pausedTime);\r\n    }\r\n\r\n    /**\r\n     * Ends the time counting, returning the total elapsed time and resetting the object to its default state.\r\n     *\r\n     * If the timer is [paused](#pause), there **is no need** to [resume](#resume) before calling this method.\r\n     *\r\n     * @return\r\n     *   A time with the total amount of nanoseconds spent between [start](#start) and _now_.\r\n     * @throws TimerError\r\n     *   When the timer has not yet started.\r\n     */\r\n    public stop() {\r\n\r\n        const totalTime = super.stop();\r\n\r\n        if (this._pauseStartTime) {\r\n            this.resume();\r\n        }\r\n\r\n        const totalPauseTime = this._pauseTimeSum;\r\n        this._pauseTimeSum = new Decimal(0);\r\n\r\n        return totalTime.subtract(totalPauseTime);\r\n    }\r\n}\r\n\r\n/**\r\n * Counts the duration of runtime operations, with pausing capabilities and time segmentation — which are arbitry\r\n * divisions of time.\r\n *\r\n * An instance of [StopWatch](#) is able to count the duration between its [start](#start) and [stop](#stop),\r\n * [pausing](#pause), which temporarily stops the time counting, and [create laps](#endlap), which splits the\r\n * stopwatch . Every start-stop cycle resets the object to its default state.\r\n *\r\n * See [BasicTimer](_utils_.basictimer.html) and [Timer](_utils_.timer.html) for simpler timer implentations (less\r\n * overhead).\r\n *\r\n * ---\r\n *\r\n * [[include:examples/stopwatch.md]]\r\n */\r\nexport class StopWatch extends Timer {\r\n\r\n    /** Protected field with the array of partial lap time values. */\r\n    protected _lapPartialTimes: Decimal[] = [];\r\n\r\n    /** Protected field with the time value representing the moment the lap started. */\r\n    protected _lapStartTime?: Decimal;\r\n\r\n    /** Gets the time elapsed since the start of the current lap until _now_. */\r\n    public get currentLapElapsedTime() {\r\n\r\n        if (!this._lapStartTime) {\r\n            return new Time(0);\r\n        }\r\n\r\n        return new Time(getProcessTime().minus(this._lapStartTime).minus(this._pauseStartTime || 0));\r\n    }\r\n\r\n    /**\r\n     * Gets the time representing the moment the current lap started.\r\n     *\r\n     * @deprecated Since v1.1.0 - Unnecessary property (will be removed in v2).\r\n     */\r\n    public get currentLapStartTime() { return new Time(this._lapStartTime || 0); }\r\n\r\n    /** Gets the number of laps currently stored at the stopwatch. */\r\n    public get lapCount() { return this.partialTimes.length + 1; }\r\n\r\n    /**\r\n     * Gets an array with time partials of the laps of the stopwatch, excluding the [current](#currentlapelapsedtime).\r\n     *\r\n     * @deprecated Since v1.1.0 - In favor of `partialTimes` (will be removed in v2).\r\n     */\r\n    public get lapPartials() { return this._lapPartialTimes.map(value => new Time(value)); }\r\n\r\n    /**\r\n     * Gets an array with time partials of the laps of the stopwatch, including the [current](#currentlapelapsedtime).\r\n     * The sum of these times is equivalent to the total elapsed time of the stopwatch.\r\n     */\r\n    public get partialTimes() {\r\n        const partialTimes = this._lapPartialTimes.map(value => new Time(value));\r\n\r\n        if (this._lapStartTime) {\r\n            return partialTimes.concat(this.currentLapElapsedTime);\r\n        }\r\n\r\n        return partialTimes;\r\n    }\r\n\r\n    /** Gets the name used on stopwatch errors. */\r\n    protected get timerErrorType() { return \"stopwatch\"; }\r\n\r\n    /** Alias to [endLap](#endlap). */\r\n    public createTimeSegment() { return this.endLap(); }\r\n\r\n    /**\r\n     * Finishes the current lap and starts a new one. This will add a new entry to [partial times](#partialtimes) and\r\n     * start counting time for the new lap.\r\n     *\r\n     * **Note:** The first lap **always** start in parallel with the stopwatch.\r\n     *\r\n     * @return\r\n     *   The partial time of the finished lap (elapsed time from the start of the lap until _now_).\r\n     * @throws TimerError\r\n     *   When the stopwatch has not yet started.\r\n     */\r\n    public endLap() {\r\n\r\n        if (!this._lapStartTime) {\r\n            throw TimerError.timerNotStarted(this.timerErrorType);\r\n        }\r\n\r\n        const now = getProcessTime();\r\n        let total = now.minus(this._lapStartTime);\r\n\r\n        // Adjust the pause start relative to the beginning of the new lap\r\n        if (this._pauseStartTime) {\r\n            const pauseTime = now.minus(this._pauseStartTime);\r\n            this._pauseTimeSum = this._pauseTimeSum.add(pauseTime);\r\n            this._pauseStartTime = now;\r\n\r\n            total = total.minus(pauseTime);\r\n        }\r\n\r\n        this._lapStartTime = now;\r\n        this._lapPartialTimes.push(total);\r\n        return new Time(total);\r\n    }\r\n\r\n    /**\r\n     * Begins to count time, setting the [start time](#starttime) to a value equivalent to _now_. This also starts the\r\n     * first lap of the stopwatch.\r\n     *\r\n     * @return\r\n     *   Time that represents _now_ (or better yet, the moment the stopwatch has started).\r\n     * @throws TimerError\r\n     *   When the stopwatch is already running.\r\n     */\r\n    public start() {\r\n        this._lapStartTime = super.start();\r\n        return this._lapStartTime;\r\n    }\r\n\r\n    /**\r\n     * Ends the time counting, returning the total elapsed time (sum of all lap partials) and resetting the object to\r\n     * its default state. This will automatically end the last created lap!\r\n     *\r\n     * If the stopwatch is [paused](#pause), there **is no need** to [resume](#resume) before calling this method.\r\n     *\r\n     * @param detail\r\n     *   A closure that can be used to retrieve additional data about the stopwatch. This information would otherwise be\r\n     *   lost after the method is completed.\r\n     * @return\r\n     *   A time with the total amount of nanoseconds spent between [start](#start) and _now_.\r\n     * @throws TimerError\r\n     *   When the stopwatch has not yet started.\r\n     */\r\n    public stop(detail?: StopWatchDetail) {\r\n        const partials = this.partialTimes;\r\n        const totalTime = super.stop();\r\n\r\n        this._lapPartialTimes = [];\r\n        this._lapStartTime = undefined;\r\n\r\n        if (!detail) {\r\n            return totalTime;\r\n        }\r\n\r\n        let sum = new Decimal(0);\r\n        partials.forEach(partial => sum = sum.add(partial.bigValue));\r\n\r\n        // The error is calculated by the absolute difference between the stop value and the sum of partial times\r\n        detail(partials, sum.minus(totalTime.bigValue).abs().toNumber());\r\n\r\n        return totalTime;\r\n    }\r\n}\r\n\r\n/**\r\n * This class represents errors that occur during the operation of [basic timers](../classes/_index_.basictimer.html),\r\n * [timers](../classes/_index_.timer.html) and [stopwatches](../classes/_index_.stopwatch.html).\r\n *\r\n * It has static methods able to create [TimerError](#) instances with generic error messages.\r\n */\r\nexport class TimerError extends Error {\r\n\r\n    /** Creates and returns a new [TimerError](#) instance for when the timer is already paused. */\r\n    public static timerAlreadyPaused(type: string = \"timer\") {\r\n        return new TimerError(`The ${type} is already paused`);\r\n    }\r\n\r\n    /** Creates and returns a new [TimerError](#) instance for when the timer has already started. */\r\n    public static timerAlreadyStarted(type: string = \"timer\") {\r\n        return new TimerError(`The ${type} has already started`);\r\n    }\r\n\r\n    /** Creates and returns a new [TimerError](#) instance for when the timer is not paused. */\r\n    public static timerNotPaused(type: string = \"timer\") {\r\n        return new TimerError(`The ${type} is not paused`);\r\n    }\r\n\r\n    /** Creates and returns a new [TimerError](#) instance for when the timer has not yet started. */\r\n    public static timerNotStarted(type: string = \"timer\") {\r\n        return new TimerError(`The ${type} has not yet started`);\r\n    }\r\n\r\n    /** Gets a string representation of the [TimerError](#) class, used by the built-in `Object.prototype.toString`. */\r\n    public get [Symbol.toStringTag]() { return \"TimerError\"; }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}