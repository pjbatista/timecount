"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const translation = {
    timeUnits: {
        anomalisticMonth: { readableName: "mês anomalístico", customPlural: "meses anomalísticos" },
        anomalisticYear: { readableName: "ano anomalístico", customPlural: "anos anomalísticos" },
        attosecond: { readableName: "attossegundo" },
        biennium: { readableName: "biênio" },
        century: { readableName: "século" },
        cosmicYear: { readableName: "ano cósmico", customPlural: "anos cósmicos" },
        day: { readableName: "dia" },
        decade: { readableName: "década" },
        draconicMonth: { readableName: "mês draconiano", customPlural: "meses draconianos" },
        draconicYear: { readableName: "ano draconiano", customPlural: "anos draconianos" },
        eclipticYear: { readableName: "ano eclíptico", customPlural: "anos eclípticos" },
        exasecond: { readableName: "exassegundo" },
        exbisecond: { readableName: "exbissegundo" },
        femtosecond: { readableName: "femtosegundo" },
        fortnight: { readableName: "quinzena" },
        galacticYear: { readableName: "ano galáctico", customPlural: "anos galácticos" },
        gibisecond: { readableName: "gibissegundo" },
        gigasecond: { readableName: "gigassegundo" },
        gregorianYear: { readableName: "ano Gregoriano", customPlural: "anos Gregorianos" },
        hour: { readableName: "hora" },
        jiffy: { readableName: "instante" },
        julianYear: { readableName: "ano Juliano", customPlural: "anos Julianos" },
        kibisecond: { readableName: "kibissegundo" },
        kilosecond: { readableName: "kilossegundo" },
        kiloyear: { readableName: "kiloano" },
        leapYear: { readableName: "ano bissexto", customPlural: "anos bissextos" },
        lustrum: { readableName: "lustro" },
        mebisecond: { readableName: "mebissegundo" },
        megasecond: { readableName: "megassegundo" },
        microsecond: { readableName: "microssegundo" },
        milisecond: { readableName: "milissegundo" },
        millenium: { readableName: "milênio" },
        minute: { readableName: "minuto" },
        month: { readableName: "mês", customPlural: "meses" },
        nanosecond: { readableName: "nanossegundo" },
        nodicalMonth: { readableName: "mês nódico", customPlural: "meses nódicos" },
        nonLeapYear: { readableName: "ano não-bissexto", customPlural: "anos não-bissextos" },
        novennium: { readableName: "novênio" },
        octennium: { readableName: "octênio" },
        pebisecond: { readableName: "pepissegundo" },
        petasecond: { readableName: "petassegundo" },
        picosecond: { readableName: "picossegundo" },
        planckTime: { readableName: "tempo de Planck", customPlural: "tempos de Planck" },
        quadrennium: { readableName: "quadriênio" },
        quindecennium: { readableName: "quindecênio" },
        quinquennium: { readableName: "quinquênio" },
        second: { readableName: "segundo" },
        septennium: { readableName: "septênio" },
        shake: {},
        siderealDay: { readableName: "dia sideral", customPlural: "dias siderais" },
        siderealHour: { readableName: "hora sideral", customPlural: "horas siderais" },
        siderealMinute: { readableName: "minuto sideral", customPlural: "minutos siderais" },
        siderealMonth: { readableName: "mês sideral", customPlural: "meses siderais" },
        siderealSecond: { readableName: "segundo sideral", customPlural: "segundos siderais" },
        siderealYear: { readableName: "ano sideral", customPlural: "anos siderais" },
        solarDay: { readableName: "dia solar", customPlural: "dias solares" },
        solarYear: { readableName: "ano solar", customPlural: "anos solares" },
        svedberg: {},
        synodicMonth: { readableName: "mês sinódico", customPlural: "meses sinódicos" },
        tebisecond: { readableName: "tebissegundo" },
        terasecond: { readableName: "terassegundo" },
        timeUnit: { readableName: "unidade de tempo", customPlural: "unidades de tempo" },
        tropicalYear: { readableName: "ano tropical", customPlural: "anos tropicais" },
        week: { readableName: "semana" },
        year: { readableName: "ano" },
        yobisecond: { readableName: "yobissegundo" },
        yoctosecond: { readableName: "yoctossegundo" },
        yottasecond: { readableName: "yotassegundo" },
        zebisecond: { readableName: "zebissegundo" },
        zeptosecond: { readableName: "zeptossegundo" },
        zettasecond: { readableName: "zettassegundo" },
    },
    writerOptions: {
        decimalSeparator: ",",
        termApproximately: "aproximadamente",
        termInfinite: "infinitos",
        termNaN: "número inválido de",
    },
};
exports.default = translation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2NhbGVzL3B0LWJyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsTUFBTSxXQUFXLEdBQW1CO0lBQ2hDLFNBQVMsRUFBRTtRQUNQLGdCQUFnQixFQUFFLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxxQkFBcUIsRUFBRTtRQUMzRixlQUFlLEVBQUUsRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFO1FBQ3pGLFVBQVUsRUFBRSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUU7UUFDNUMsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRTtRQUNwQyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFO1FBQ25DLFVBQVUsRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRTtRQUMxRSxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFO1FBQzVCLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUU7UUFDbEMsYUFBYSxFQUFFLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBRTtRQUNwRixZQUFZLEVBQUUsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFO1FBQ2xGLFlBQVksRUFBRSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFO1FBQ2hGLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUU7UUFDMUMsVUFBVSxFQUFFLEVBQUUsWUFBWSxFQUFFLGNBQWMsRUFBRTtRQUM1QyxXQUFXLEVBQUUsRUFBRSxZQUFZLEVBQUUsY0FBYyxFQUFFO1FBQzdDLFNBQVMsRUFBRSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUU7UUFDdkMsWUFBWSxFQUFFLEVBQUUsWUFBWSxFQUFF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LGlCQUFpQjtRQUNwQyxZQUFZLEVBQUUsV0FBVztRQUN6QixPQUFPLEVBQUUsb0JBQW9CO0tBQ2hDO0NBQ0osQ0FBQztBQUVGLGtCQUFlLFdBQVcsQ0FBQyIsImZpbGUiOiJsb2NhbGVzL3B0LWJyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggUGVkcm8gSm9zw6kgQmF0aXN0YVxyXG5NSVQgTGljZW5zZVxyXG5cclxuU2VlIHRoZSBMSUNFTlNFIGZpbGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbmltcG9ydCB7IExvY2FsZVNldHRpbmdzIH0gZnJvbSBcIi4uL2xvY2FsaXphdGlvblwiO1xyXG5cclxuY29uc3QgdHJhbnNsYXRpb246IExvY2FsZVNldHRpbmdzID0ge1xyXG4gICAgdGltZVVuaXRzOiB7XHJcbiAgICAgICAgYW5vbWFsaXN0aWNNb250aDogeyByZWFkYWJsZU5hbWU6IFwibcOqcyBhbm9tYWzDrXN0aWNvXCIsIGN1c3RvbVBsdXJhbDogXCJtZXNlcyBhbm9tYWzDrXN0aWNvc1wiIH0sXHJcbiAgICAgICAgYW5vbWFsaXN0aWNZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhbm8gYW5vbWFsw61zdGljb1wiLCBjdXN0b21QbHVyYWw6IFwiYW5vcyBhbm9tYWzDrXN0aWNvc1wiIH0sXHJcbiAgICAgICAgYXR0b3NlY29uZDogeyByZWFkYWJsZU5hbWU6IFwiYXR0b3NzZWd1bmRvXCIgfSxcclxuICAgICAgICBiaWVubml1bTogeyByZWFkYWJsZU5hbWU6IFwiYmnDqm5pb1wiIH0sXHJcbiAgICAgICAgY2VudHVyeTogeyByZWFkYWJsZU5hbWU6IFwic8OpY3Vsb1wiIH0sXHJcbiAgICAgICAgY29zbWljWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYW5vIGPDs3NtaWNvXCIsIGN1c3RvbVBsdXJhbDogXCJhbm9zIGPDs3NtaWNvc1wiIH0sXHJcbiAgICAgICAgZGF5OiB7IHJlYWRhYmxlTmFtZTogXCJkaWFcIiB9LFxyXG4gICAgICAgIGRlY2FkZTogeyByZWFkYWJsZU5hbWU6IFwiZMOpY2FkYVwiIH0sXHJcbiAgICAgICAgZHJhY29uaWNNb250aDogeyByZWFkYWJsZU5hbWU6IFwibcOqcyBkcmFjb25pYW5vXCIsIGN1c3RvbVBsdXJhbDogXCJtZXNlcyBkcmFjb25pYW5vc1wiIH0sXHJcbiAgICAgICAgZHJhY29uaWNZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhbm8gZHJhY29uaWFub1wiLCBjdXN0b21QbHVyYWw6IFwiYW5vcyBkcmFjb25pYW5vc1wiIH0sXHJcbiAgICAgICAgZWNsaXB0aWNZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhbm8gZWNsw61wdGljb1wiLCBjdXN0b21QbHVyYWw6IFwiYW5vcyBlY2zDrXB0aWNvc1wiIH0sXHJcbiAgICAgICAgZXhhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJleGFzc2VndW5kb1wiIH0sXHJcbiAgICAgICAgZXhiaXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwiZXhiaXNzZWd1bmRvXCIgfSxcclxuICAgICAgICBmZW10b3NlY29uZDogeyByZWFkYWJsZU5hbWU6IFwiZmVtdG9zZWd1bmRvXCIgfSxcclxuICAgICAgICBmb3J0bmlnaHQ6IHsgcmVhZGFibGVOYW1lOiBcInF1aW56ZW5hXCIgfSxcclxuICAgICAgICBnYWxhY3RpY1llYXI6IHsgcmVhZGFibGVOYW1lOiBcImFubyBnYWzDoWN0aWNvXCIsIGN1c3RvbVBsdXJhbDogXCJhbm9zIGdhbMOhY3RpY29zXCIgfSxcclxuICAgICAgICBnaWJpc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJnaWJpc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIGdpZ2FzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcImdpZ2Fzc2VndW5kb1wiIH0sXHJcbiAgICAgICAgZ3JlZ29yaWFuWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYW5vIEdyZWdvcmlhbm9cIiwgY3VzdG9tUGx1cmFsOiBcImFub3MgR3JlZ29yaWFub3NcIiB9LFxyXG4gICAgICAgIGhvdXI6IHsgcmVhZGFibGVOYW1lOiBcImhvcmFcIiB9LFxyXG4gICAgICAgIGppZmZ5OiB7IHJlYWRhYmxlTmFtZTogXCJpbnN0YW50ZVwiIH0sXHJcbiAgICAgICAganVsaWFuWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYW5vIEp1bGlhbm9cIiwgY3VzdG9tUGx1cmFsOiBcImFub3MgSnVsaWFub3NcIiB9LFxyXG4gICAgICAgIGtpYmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcImtpYmlzc2VndW5kb1wiIH0sXHJcbiAgICAgICAga2lsb3NlY29uZDogeyByZWFkYWJsZU5hbWU6IFwia2lsb3NzZWd1bmRvXCIgfSxcclxuICAgICAgICBraWxveWVhcjogeyByZWFkYWJsZU5hbWU6IFwia2lsb2Fub1wiIH0sXHJcbiAgICAgICAgbGVhcFllYXI6IHsgcmVhZGFibGVOYW1lOiBcImFubyBiaXNzZXh0b1wiLCBjdXN0b21QbHVyYWw6IFwiYW5vcyBiaXNzZXh0b3NcIiB9LFxyXG4gICAgICAgIGx1c3RydW06IHsgcmVhZGFibGVOYW1lOiBcImx1c3Ryb1wiIH0sXHJcbiAgICAgICAgbWViaXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwibWViaXNzZWd1bmRvXCIgfSxcclxuICAgICAgICBtZWdhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJtZWdhc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIG1pY3Jvc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJtaWNyb3NzZWd1bmRvXCIgfSxcclxuICAgICAgICBtaWxpc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJtaWxpc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIG1pbGxlbml1bTogeyByZWFkYWJsZU5hbWU6IFwibWlsw6puaW9cIiB9LFxyXG4gICAgICAgIG1pbnV0ZTogeyByZWFkYWJsZU5hbWU6IFwibWludXRvXCIgfSxcclxuICAgICAgICBtb250aDogeyByZWFkYWJsZU5hbWU6IFwibcOqc1wiLCBjdXN0b21QbHVyYWw6IFwibWVzZXNcIiB9LFxyXG4gICAgICAgIG5hbm9zZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcIm5hbm9zc2VndW5kb1wiIH0sXHJcbiAgICAgICAgbm9kaWNhbE1vbnRoOiB7IHJlYWRhYmxlTmFtZTogXCJtw6pzIG7Ds2RpY29cIiwgY3VzdG9tUGx1cmFsOiBcIm1lc2VzIG7Ds2RpY29zXCIgfSxcclxuICAgICAgICBub25MZWFwWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYW5vIG7Do28tYmlzc2V4dG9cIiwgY3VzdG9tUGx1cmFsOiBcImFub3MgbsOjby1iaXNzZXh0b3NcIiB9LFxyXG4gICAgICAgIG5vdmVubml1bTogeyByZWFkYWJsZU5hbWU6IFwibm92w6puaW9cIiB9LFxyXG4gICAgICAgIG9jdGVubml1bTogeyByZWFkYWJsZU5hbWU6IFwib2N0w6puaW9cIiB9LFxyXG4gICAgICAgIHBlYmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInBlcGlzc2VndW5kb1wiIH0sXHJcbiAgICAgICAgcGV0YXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwicGV0YXNzZWd1bmRvXCIgfSxcclxuICAgICAgICBwaWNvc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJwaWNvc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHBsYW5ja1RpbWU6IHsgcmVhZGFibGVOYW1lOiBcInRlbXBvIGRlIFBsYW5ja1wiLCBjdXN0b21QbHVyYWw6IFwidGVtcG9zIGRlIFBsYW5ja1wiIH0sXHJcbiAgICAgICAgcXVhZHJlbm5pdW06IHsgcmVhZGFibGVOYW1lOiBcInF1YWRyacOqbmlvXCIgfSxcclxuICAgICAgICBxdWluZGVjZW5uaXVtOiB7IHJlYWRhYmxlTmFtZTogXCJxdWluZGVjw6puaW9cIiB9LFxyXG4gICAgICAgIHF1aW5xdWVubml1bTogeyByZWFkYWJsZU5hbWU6IFwicXVpbnF1w6puaW9cIiB9LFxyXG4gICAgICAgIHNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwic2VndW5kb1wiIH0sXHJcbiAgICAgICAgc2VwdGVubml1bTogeyByZWFkYWJsZU5hbWU6IFwic2VwdMOqbmlvXCIgfSxcclxuICAgICAgICBzaGFrZToge30sXHJcbiAgICAgICAgc2lkZXJlYWxEYXk6IHsgcmVhZGFibGVOYW1lOiBcImRpYSBzaWRlcmFsXCIsIGN1c3RvbVBsdXJhbDogXCJkaWFzIHNpZGVyYWlzXCIgfSxcclxuICAgICAgICBzaWRlcmVhbEhvdXI6IHsgcmVhZGFibGVOYW1lOiBcImhvcmEgc2lkZXJhbFwiLCBjdXN0b21QbHVyYWw6IFwiaG9yYXMgc2lkZXJhaXNcIiB9LFxyXG4gICAgICAgIHNpZGVyZWFsTWludXRlOiB7IHJlYWRhYmxlTmFtZTogXCJtaW51dG8gc2lkZXJhbFwiLCBjdXN0b21QbHVyYWw6IFwibWludXRvcyBzaWRlcmFpc1wiIH0sXHJcbiAgICAgICAgc2lkZXJlYWxNb250aDogeyByZWFkYWJsZU5hbWU6IFwibcOqcyBzaWRlcmFsXCIsIGN1c3RvbVBsdXJhbDogXCJtZXNlcyBzaWRlcmFpc1wiIH0sXHJcbiAgICAgICAgc2lkZXJlYWxTZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInNlZ3VuZG8gc2lkZXJhbFwiLCBjdXN0b21QbHVyYWw6IFwic2VndW5kb3Mgc2lkZXJhaXNcIiB9LFxyXG4gICAgICAgIHNpZGVyZWFsWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYW5vIHNpZGVyYWxcIiwgY3VzdG9tUGx1cmFsOiBcImFub3Mgc2lkZXJhaXNcIiB9LFxyXG4gICAgICAgIHNvbGFyRGF5OiB7IHJlYWRhYmxlTmFtZTogXCJkaWEgc29sYXJcIiwgY3VzdG9tUGx1cmFsOiBcImRpYXMgc29sYXJlc1wiIH0sXHJcbiAgICAgICAgc29sYXJZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhbm8gc29sYXJcIiwgY3VzdG9tUGx1cmFsOiBcImFub3Mgc29sYXJlc1wiIH0sXHJcbiAgICAgICAgc3ZlZGJlcmc6IHt9LFxyXG4gICAgICAgIHN5bm9kaWNNb250aDogeyByZWFkYWJsZU5hbWU6IFwibcOqcyBzaW7Ds2RpY29cIiwgY3VzdG9tUGx1cmFsOiBcIm1lc2VzIHNpbsOzZGljb3NcIiB9LFxyXG4gICAgICAgIHRlYmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInRlYmlzc2VndW5kb1wiIH0sXHJcbiAgICAgICAgdGVyYXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwidGVyYXNzZWd1bmRvXCIgfSxcclxuICAgICAgICB0aW1lVW5pdDogeyByZWFkYWJsZU5hbWU6IFwidW5pZGFkZSBkZSB0ZW1wb1wiLCBjdXN0b21QbHVyYWw6IFwidW5pZGFkZXMgZGUgdGVtcG9cIiB9LFxyXG4gICAgICAgIHRyb3BpY2FsWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYW5vIHRyb3BpY2FsXCIsIGN1c3RvbVBsdXJhbDogXCJhbm9zIHRyb3BpY2Fpc1wiIH0sXHJcbiAgICAgICAgd2VlazogeyByZWFkYWJsZU5hbWU6IFwic2VtYW5hXCIgfSxcclxuICAgICAgICB5ZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhbm9cIiB9LFxyXG4gICAgICAgIHlvYmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInlvYmlzc2VndW5kb1wiIH0sXHJcbiAgICAgICAgeW9jdG9zZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInlvY3Rvc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHlvdHRhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJ5b3Rhc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHplYmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInplYmlzc2VndW5kb1wiIH0sXHJcbiAgICAgICAgemVwdG9zZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInplcHRvc3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHpldHRhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJ6ZXR0YXNzZWd1bmRvXCIgfSxcclxuICAgIH0sXHJcbiAgICB3cml0ZXJPcHRpb25zOiB7XHJcbiAgICAgICAgZGVjaW1hbFNlcGFyYXRvcjogXCIsXCIsXHJcbiAgICAgICAgdGVybUFwcHJveGltYXRlbHk6IFwiYXByb3hpbWFkYW1lbnRlXCIsXHJcbiAgICAgICAgdGVybUluZmluaXRlOiBcImluZmluaXRvc1wiLFxyXG4gICAgICAgIHRlcm1OYU46IFwibsO6bWVybyBpbnbDoWxpZG8gZGVcIixcclxuICAgIH0sXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGlvbjtcclxuIl19
