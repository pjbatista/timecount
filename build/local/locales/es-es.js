"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const translation = {
    timeUnits: {
        anomalisticMonth: { readableName: "mes anómalo", customPlural: "meses anómalos" },
        anomalisticYear: { readableName: "año anómalo", customPlural: "años anómalos" },
        attosecond: { readableName: "attosegundo" },
        biennium: { readableName: "bienio" },
        century: { readableName: "siglo" },
        cosmicYear: { readableName: "año cósmico", customPlural: "años cósmicos" },
        day: { readableName: "día" },
        decade: { readableName: "década" },
        draconicMonth: { readableName: "mes draconico", customPlural: "meses draconicos" },
        draconicYear: { readableName: "año draconico", customPlural: "años draconicos" },
        eclipticYear: { readableName: "año eclíptico", customPlural: "años eclípticos" },
        exasecond: { readableName: "exasegundo" },
        exbisecond: { readableName: "exbisegundo" },
        femtosecond: { readableName: "femtosegundo" },
        fortnight: { readableName: "quincena" },
        galacticYear: { readableName: "año galáctico", customPlural: "años galácticos" },
        gibisecond: { readableName: "gibisegundo" },
        gigasecond: { readableName: "gigasegundo" },
        gregorianYear: { readableName: "año Gregoriano", customPlural: "años Gregorianos" },
        hour: { readableName: "hora" },
        jiffy: { readableName: "instante" },
        julianYear: { readableName: "año Juliano", customPlural: "años Julianos" },
        kibisecond: { readableName: "kibisegundo" },
        kilosecond: { readableName: "kilosegundo" },
        kiloyear: { readableName: "kiloaño" },
        leapYear: { readableName: "año bisiesto", customPlural: "años bisiestos" },
        lustrum: { readableName: "lustro" },
        mebisecond: { readableName: "mebisegundo" },
        megasecond: { readableName: "megasegundo" },
        microsecond: { readableName: "microsegundo" },
        milisecond: { readableName: "milisegundo" },
        millenium: { readableName: "milenio" },
        minute: { readableName: "minuto" },
        month: { readableName: "mes", customPlural: "meses" },
        nanosecond: { readableName: "nanosegundo" },
        nodicalMonth: { readableName: "mes nodical", customPlural: "meses nodicos" },
        nonLeapYear: { readableName: "año no bisiesto", customPlural: "años no bisiestos" },
        novennium: { readableName: "novenio" },
        octennium: { readableName: "octenio" },
        pebisecond: { readableName: "pepisegundo" },
        petasecond: { readableName: "pepasegundo" },
        picosecond: { readableName: "picosegundo" },
        planckTime: { readableName: "tiempo de Planck", customPlural: "tiempos de Planck" },
        quadrennium: { readableName: "cuadrienio" },
        quindecennium: { readableName: "quindecenio" },
        quinquennium: { readableName: "quinquenio" },
        second: { readableName: "segundo" },
        septennium: { readableName: "septenio" },
        shake: {},
        siderealDay: { readableName: "día sidéreo", customPlural: "días sidéreos" },
        siderealHour: { readableName: "hora sideral", customPlural: "horas siderales" },
        siderealMinute: { readableName: "minuto sideral", customPlural: "minutos siderales" },
        siderealMonth: { readableName: "mes sideral", customPlural: "meses siderales" },
        siderealSecond: { readableName: "segundo sideral", customPlural: "segundos siderales" },
        siderealYear: { readableName: "año sideral", customPlural: "años siderales" },
        solarDay: { readableName: "día solar", customPlural: "días solares" },
        solarYear: { readableName: "año solar", customPlural: "año solares" },
        svedberg: {},
        synodicMonth: { readableName: "mes sinódico", customPlural: "meses sinódicos" },
        tebisecond: { readableName: "tebisegundo" },
        terasecond: { readableName: "terasegundo" },
        timeUnit: { readableName: "unidad de tiempo", customPlural: "unidades de tiempo" },
        tropicalYear: { readableName: "año tropical", customPlural: "años tropicales" },
        week: { readableName: "semana" },
        year: { readableName: "año" },
        yobisecond: { readableName: "yobisegundo" },
        yoctosecond: { readableName: "yoctosegundo" },
        yottasecond: { readableName: "yotasegundo" },
        zebisecond: { readableName: "zebisegundo" },
        zeptosecond: { readableName: "zeptosegundo" },
        zettasecond: { readableName: "zettasegundo" },
    },
    writerOptions: {
        decimalSeparator: ",",
        termApproximately: "aproximadamente",
        termInfinite: "infinitos",
        termNaN: "número inválido de",
    },
};
exports.default = translation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
