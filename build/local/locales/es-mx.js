"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const translation = {
    timeUnits: {
        anomalisticMonth: { readableName: "mes anómalo", customPlural: "meses anómalos" },
        anomalisticYear: { readableName: "año anómalo", customPlural: "años anómalos" },
        attosecond: { readableName: "attosegundo" },
        biennium: { readableName: "bienio" },
        century: { readableName: "siglo" },
        cosmicYear: { readableName: "año cósmico", customPlural: "años cósmicos" },
        day: { readableName: "día" },
        decade: { readableName: "década" },
        draconicMonth: { readableName: "mes draconico", customPlural: "meses draconicos" },
        draconicYear: { readableName: "año draconico", customPlural: "años draconicos" },
        eclipticYear: { readableName: "año eclíptico", customPlural: "años eclípticos" },
        exasecond: { readableName: "exasegundo" },
        exbisecond: { readableName: "exbisegundo" },
        femtosecond: { readableName: "femtosegundo" },
        fortnight: { readableName: "quincena" },
        galacticYear: { readableName: "año galáctico", customPlural: "años galácticos" },
        gibisecond: { readableName: "gibisegundo" },
        gigasecond: { readableName: "gigasegundo" },
        gregorianYear: { readableName: "año Gregoriano", customPlural: "años Gregorianos" },
        hour: { readableName: "hora" },
        jiffy: { readableName: "instante" },
        julianYear: { readableName: "año Juliano", customPlural: "años Julianos" },
        kibisecond: { readableName: "kibisegundo" },
        kilosecond: { readableName: "kilosegundo" },
        kiloyear: { readableName: "kiloaño" },
        leapYear: { readableName: "año bisiesto", customPlural: "años bisiestos" },
        lustrum: { readableName: "lustro" },
        mebisecond: { readableName: "mebisegundo" },
        megasecond: { readableName: "megasegundo" },
        microsecond: { readableName: "microsegundo" },
        milisecond: { readableName: "milisegundo" },
        millenium: { readableName: "milenio" },
        minute: { readableName: "minuto" },
        month: { readableName: "mes", customPlural: "meses" },
        nanosecond: { readableName: "nanosegundo" },
        nodicalMonth: { readableName: "mes nodical", customPlural: "meses nodicos" },
        nonLeapYear: { readableName: "año no bisiesto", customPlural: "años no bisiestos" },
        novennium: { readableName: "novenio" },
        octennium: { readableName: "octenio" },
        pebisecond: { readableName: "pepisegundo" },
        petasecond: { readableName: "pepasegundo" },
        picosecond: { readableName: "picosegundo" },
        planckTime: { readableName: "tiempo de Planck", customPlural: "tiempos de Planck" },
        quadrennium: { readableName: "cuadrienio" },
        quindecennium: { readableName: "quindecenio" },
        quinquennium: { readableName: "quinquenio" },
        second: { readableName: "segundo" },
        septennium: { readableName: "septenio" },
        shake: {},
        siderealDay: { readableName: "día sidéreo", customPlural: "días sidéreos" },
        siderealHour: { readableName: "hora sideral", customPlural: "horas siderales" },
        siderealMinute: { readableName: "minuto sideral", customPlural: "minutos siderales" },
        siderealMonth: { readableName: "mes sideral", customPlural: "meses siderales" },
        siderealSecond: { readableName: "segundo sideral", customPlural: "segundos siderales" },
        siderealYear: { readableName: "año sideral", customPlural: "años siderales" },
        solarDay: { readableName: "día solar", customPlural: "días solares" },
        solarYear: { readableName: "año solar", customPlural: "año solares" },
        svedberg: {},
        synodicMonth: { readableName: "mes sinódico", customPlural: "meses sinódicos" },
        tebisecond: { readableName: "tebisegundo" },
        terasecond: { readableName: "terasegundo" },
        timeUnit: { readableName: "unidad de tiempo", customPlural: "unidades de tiempo" },
        tropicalYear: { readableName: "año tropical", customPlural: "años tropicales" },
        week: { readableName: "semana" },
        year: { readableName: "año" },
        yobisecond: { readableName: "yobisegundo" },
        yoctosecond: { readableName: "yoctosegundo" },
        yottasecond: { readableName: "yotasegundo" },
        zebisecond: { readableName: "zebisegundo" },
        zeptosecond: { readableName: "zeptosegundo" },
        zettasecond: { readableName: "zettasegundo" },
    },
    writerOptions: {
        termApproximately: "aproximadamente",
        termInfinite: "infinitos",
        termNaN: "número inválido de",
    },
};
exports.default = translation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2NhbGVzL2VzLW14LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBUUEsTUFBTSxXQUFXLEdBQW1CO0lBQ2hDLFNBQVMsRUFBRTtRQUNQLGdCQUFnQixFQUFFLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUU7UUFDakYsZUFBZSxFQUFFLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFO1FBQy9FLFVBQVUsRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUU7UUFDM0MsUUFBUSxFQUFFLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRTtRQUNwQyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFO1FBQ2xDLFVBQVUsRUFBRSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRTtRQUMxRSxHQUFHLEVBQUUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFO1FBQzVCLE1BQU0sRUFBRSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUU7UUFDbEMsYUFBYSxFQUFFLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUU7UUFDbEYsWUFBWSxFQUFFLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUU7UUFDaEYsWUFBWSxFQUFFLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUU7UUFDaEYsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRTtRQUN6QyxVQUFVLEVBQUUsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFO1FBQzNDLFdBQVcsRUFBRSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUU7UUFDN0MsU0FBUyxFQUFFLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRTtRQUN2QyxZQUFZLEVBQUUsRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFF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Q3pCLE9BQU8sRUFBRSxvQkFBb0I7S0FDaEM7Q0FDSixDQUFDO0FBRUYsa0JBQWUsV0FBVyxDQUFDIiwiZmlsZSI6ImxvY2FsZXMvZXMtbXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIDIwMTctMjAxOCBQZWRybyBKb3PDqSBCYXRpc3RhXHJcbk1JVCBMaWNlbnNlXHJcblxyXG5TZWUgdGhlIExJQ0VOU0UgZmlsZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuaW1wb3J0IHsgTG9jYWxlU2V0dGluZ3MgfSBmcm9tIFwiLi4vbG9jYWxpemF0aW9uXCI7XHJcblxyXG5jb25zdCB0cmFuc2xhdGlvbjogTG9jYWxlU2V0dGluZ3MgPSB7XHJcbiAgICB0aW1lVW5pdHM6IHtcclxuICAgICAgICBhbm9tYWxpc3RpY01vbnRoOiB7IHJlYWRhYmxlTmFtZTogXCJtZXMgYW7Ds21hbG9cIiwgY3VzdG9tUGx1cmFsOiBcIm1lc2VzIGFuw7NtYWxvc1wiIH0sXHJcbiAgICAgICAgYW5vbWFsaXN0aWNZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhw7FvIGFuw7NtYWxvXCIsIGN1c3RvbVBsdXJhbDogXCJhw7FvcyBhbsOzbWFsb3NcIiB9LFxyXG4gICAgICAgIGF0dG9zZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcImF0dG9zZWd1bmRvXCIgfSxcclxuICAgICAgICBiaWVubml1bTogeyByZWFkYWJsZU5hbWU6IFwiYmllbmlvXCIgfSxcclxuICAgICAgICBjZW50dXJ5OiB7IHJlYWRhYmxlTmFtZTogXCJzaWdsb1wiIH0sXHJcbiAgICAgICAgY29zbWljWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYcOxbyBjw7NzbWljb1wiLCBjdXN0b21QbHVyYWw6IFwiYcOxb3MgY8Ozc21pY29zXCIgfSxcclxuICAgICAgICBkYXk6IHsgcmVhZGFibGVOYW1lOiBcImTDrWFcIiB9LFxyXG4gICAgICAgIGRlY2FkZTogeyByZWFkYWJsZU5hbWU6IFwiZMOpY2FkYVwiIH0sXHJcbiAgICAgICAgZHJhY29uaWNNb250aDogeyByZWFkYWJsZU5hbWU6IFwibWVzIGRyYWNvbmljb1wiLCBjdXN0b21QbHVyYWw6IFwibWVzZXMgZHJhY29uaWNvc1wiIH0sXHJcbiAgICAgICAgZHJhY29uaWNZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhw7FvIGRyYWNvbmljb1wiLCBjdXN0b21QbHVyYWw6IFwiYcOxb3MgZHJhY29uaWNvc1wiIH0sXHJcbiAgICAgICAgZWNsaXB0aWNZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhw7FvIGVjbMOtcHRpY29cIiwgY3VzdG9tUGx1cmFsOiBcImHDsW9zIGVjbMOtcHRpY29zXCIgfSxcclxuICAgICAgICBleGFzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcImV4YXNlZ3VuZG9cIiB9LFxyXG4gICAgICAgIGV4YmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcImV4YmlzZWd1bmRvXCIgfSxcclxuICAgICAgICBmZW10b3NlY29uZDogeyByZWFkYWJsZU5hbWU6IFwiZmVtdG9zZWd1bmRvXCIgfSxcclxuICAgICAgICBmb3J0bmlnaHQ6IHsgcmVhZGFibGVOYW1lOiBcInF1aW5jZW5hXCIgfSxcclxuICAgICAgICBnYWxhY3RpY1llYXI6IHsgcmVhZGFibGVOYW1lOiBcImHDsW8gZ2Fsw6FjdGljb1wiLCBjdXN0b21QbHVyYWw6IFwiYcOxb3MgZ2Fsw6FjdGljb3NcIiB9LFxyXG4gICAgICAgIGdpYmlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcImdpYmlzZWd1bmRvXCIgfSxcclxuICAgICAgICBnaWdhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJnaWdhc2VndW5kb1wiIH0sXHJcbiAgICAgICAgZ3JlZ29yaWFuWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYcOxbyBHcmVnb3JpYW5vXCIsIGN1c3RvbVBsdXJhbDogXCJhw7FvcyBHcmVnb3JpYW5vc1wiIH0sXHJcbiAgICAgICAgaG91cjogeyByZWFkYWJsZU5hbWU6IFwiaG9yYVwiIH0sXHJcbiAgICAgICAgamlmZnk6IHsgcmVhZGFibGVOYW1lOiBcImluc3RhbnRlXCIgfSxcclxuICAgICAgICBqdWxpYW5ZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhw7FvIEp1bGlhbm9cIiwgY3VzdG9tUGx1cmFsOiBcImHDsW9zIEp1bGlhbm9zXCIgfSxcclxuICAgICAgICBraWJpc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJraWJpc2VndW5kb1wiIH0sXHJcbiAgICAgICAga2lsb3NlY29uZDogeyByZWFkYWJsZU5hbWU6IFwia2lsb3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIGtpbG95ZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJraWxvYcOxb1wiIH0sXHJcbiAgICAgICAgbGVhcFllYXI6IHsgcmVhZGFibGVOYW1lOiBcImHDsW8gYmlzaWVzdG9cIiwgY3VzdG9tUGx1cmFsOiBcImHDsW9zIGJpc2llc3Rvc1wiIH0sXHJcbiAgICAgICAgbHVzdHJ1bTogeyByZWFkYWJsZU5hbWU6IFwibHVzdHJvXCIgfSxcclxuICAgICAgICBtZWJpc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJtZWJpc2VndW5kb1wiIH0sXHJcbiAgICAgICAgbWVnYXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwibWVnYXNlZ3VuZG9cIiB9LFxyXG4gICAgICAgIG1pY3Jvc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJtaWNyb3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIG1pbGlzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcIm1pbGlzZWd1bmRvXCIgfSxcclxuICAgICAgICBtaWxsZW5pdW06IHsgcmVhZGFibGVOYW1lOiBcIm1pbGVuaW9cIiB9LFxyXG4gICAgICAgIG1pbnV0ZTogeyByZWFkYWJsZU5hbWU6IFwibWludXRvXCIgfSxcclxuICAgICAgICBtb250aDogeyByZWFkYWJsZU5hbWU6IFwibWVzXCIsIGN1c3RvbVBsdXJhbDogXCJtZXNlc1wiIH0sXHJcbiAgICAgICAgbmFub3NlY29uZDogeyByZWFkYWJsZU5hbWU6IFwibmFub3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIG5vZGljYWxNb250aDogeyByZWFkYWJsZU5hbWU6IFwibWVzIG5vZGljYWxcIiwgY3VzdG9tUGx1cmFsOiBcIm1lc2VzIG5vZGljb3NcIiB9LFxyXG4gICAgICAgIG5vbkxlYXBZZWFyOiB7IHJlYWRhYmxlTmFtZTogXCJhw7FvIG5vIGJpc2llc3RvXCIsIGN1c3RvbVBsdXJhbDogXCJhw7FvcyBubyBiaXNpZXN0b3NcIiB9LFxyXG4gICAgICAgIG5vdmVubml1bTogeyByZWFkYWJsZU5hbWU6IFwibm92ZW5pb1wiIH0sXHJcbiAgICAgICAgb2N0ZW5uaXVtOiB7IHJlYWRhYmxlTmFtZTogXCJvY3RlbmlvXCIgfSxcclxuICAgICAgICBwZWJpc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJwZXBpc2VndW5kb1wiIH0sXHJcbiAgICAgICAgcGV0YXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwicGVwYXNlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHBpY29zZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInBpY29zZWd1bmRvXCIgfSxcclxuICAgICAgICBwbGFuY2tUaW1lOiB7IHJlYWRhYmxlTmFtZTogXCJ0aWVtcG8gZGUgUGxhbmNrXCIsIGN1c3RvbVBsdXJhbDogXCJ0aWVtcG9zIGRlIFBsYW5ja1wiIH0sXHJcbiAgICAgICAgcXVhZHJlbm5pdW06IHsgcmVhZGFibGVOYW1lOiBcImN1YWRyaWVuaW9cIiB9LFxyXG4gICAgICAgIHF1aW5kZWNlbm5pdW06IHsgcmVhZGFibGVOYW1lOiBcInF1aW5kZWNlbmlvXCIgfSxcclxuICAgICAgICBxdWlucXVlbm5pdW06IHsgcmVhZGFibGVOYW1lOiBcInF1aW5xdWVuaW9cIiB9LFxyXG4gICAgICAgIHNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwic2VndW5kb1wiIH0sXHJcbiAgICAgICAgc2VwdGVubml1bTogeyByZWFkYWJsZU5hbWU6IFwic2VwdGVuaW9cIiB9LFxyXG4gICAgICAgIHNoYWtlOiB7fSxcclxuICAgICAgICBzaWRlcmVhbERheTogeyByZWFkYWJsZU5hbWU6IFwiZMOtYSBzaWTDqXJlb1wiLCBjdXN0b21QbHVyYWw6IFwiZMOtYXMgc2lkw6lyZW9zXCIgfSxcclxuICAgICAgICBzaWRlcmVhbEhvdXI6IHsgcmVhZGFibGVOYW1lOiBcImhvcmEgc2lkZXJhbFwiLCBjdXN0b21QbHVyYWw6IFwiaG9yYXMgc2lkZXJhbGVzXCIgfSxcclxuICAgICAgICBzaWRlcmVhbE1pbnV0ZTogeyByZWFkYWJsZU5hbWU6IFwibWludXRvIHNpZGVyYWxcIiwgY3VzdG9tUGx1cmFsOiBcIm1pbnV0b3Mgc2lkZXJhbGVzXCIgfSxcclxuICAgICAgICBzaWRlcmVhbE1vbnRoOiB7IHJlYWRhYmxlTmFtZTogXCJtZXMgc2lkZXJhbFwiLCBjdXN0b21QbHVyYWw6IFwibWVzZXMgc2lkZXJhbGVzXCIgfSxcclxuICAgICAgICBzaWRlcmVhbFNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwic2VndW5kbyBzaWRlcmFsXCIsIGN1c3RvbVBsdXJhbDogXCJzZWd1bmRvcyBzaWRlcmFsZXNcIiB9LFxyXG4gICAgICAgIHNpZGVyZWFsWWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYcOxbyBzaWRlcmFsXCIsIGN1c3RvbVBsdXJhbDogXCJhw7FvcyBzaWRlcmFsZXNcIiB9LFxyXG4gICAgICAgIHNvbGFyRGF5OiB7IHJlYWRhYmxlTmFtZTogXCJkw61hIHNvbGFyXCIsIGN1c3RvbVBsdXJhbDogXCJkw61hcyBzb2xhcmVzXCIgfSxcclxuICAgICAgICBzb2xhclllYXI6IHsgcmVhZGFibGVOYW1lOiBcImHDsW8gc29sYXJcIiwgY3VzdG9tUGx1cmFsOiBcImHDsW8gc29sYXJlc1wiIH0sXHJcbiAgICAgICAgc3ZlZGJlcmc6IHt9LFxyXG4gICAgICAgIHN5bm9kaWNNb250aDogeyByZWFkYWJsZU5hbWU6IFwibWVzIHNpbsOzZGljb1wiLCBjdXN0b21QbHVyYWw6IFwibWVzZXMgc2luw7NkaWNvc1wiIH0sXHJcbiAgICAgICAgdGViaXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwidGViaXNlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHRlcmFzZWNvbmQ6IHsgcmVhZGFibGVOYW1lOiBcInRlcmFzZWd1bmRvXCIgfSxcclxuICAgICAgICB0aW1lVW5pdDogeyByZWFkYWJsZU5hbWU6IFwidW5pZGFkIGRlIHRpZW1wb1wiLCBjdXN0b21QbHVyYWw6IFwidW5pZGFkZXMgZGUgdGllbXBvXCIgfSxcclxuICAgICAgICB0cm9waWNhbFllYXI6IHsgcmVhZGFibGVOYW1lOiBcImHDsW8gdHJvcGljYWxcIiwgY3VzdG9tUGx1cmFsOiBcImHDsW9zIHRyb3BpY2FsZXNcIiB9LFxyXG4gICAgICAgIHdlZWs6IHsgcmVhZGFibGVOYW1lOiBcInNlbWFuYVwiIH0sXHJcbiAgICAgICAgeWVhcjogeyByZWFkYWJsZU5hbWU6IFwiYcOxb1wiIH0sXHJcbiAgICAgICAgeW9iaXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwieW9iaXNlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHlvY3Rvc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJ5b2N0b3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHlvdHRhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJ5b3Rhc2VndW5kb1wiIH0sXHJcbiAgICAgICAgemViaXNlY29uZDogeyByZWFkYWJsZU5hbWU6IFwiemViaXNlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHplcHRvc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJ6ZXB0b3NlZ3VuZG9cIiB9LFxyXG4gICAgICAgIHpldHRhc2Vjb25kOiB7IHJlYWRhYmxlTmFtZTogXCJ6ZXR0YXNlZ3VuZG9cIiB9LFxyXG4gICAgfSxcclxuICAgIHdyaXRlck9wdGlvbnM6IHtcclxuICAgICAgICB0ZXJtQXBwcm94aW1hdGVseTogXCJhcHJveGltYWRhbWVudGVcIixcclxuICAgICAgICB0ZXJtSW5maW5pdGU6IFwiaW5maW5pdG9zXCIsXHJcbiAgICAgICAgdGVybU5hTjogXCJuw7ptZXJvIGludsOhbGlkbyBkZVwiLFxyXG4gICAgfSxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0aW9uO1xyXG4iXX0=
