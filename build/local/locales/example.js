"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// This file was created to help translators achieve their desired results
// - Importing LocaleSettings is optional, but helps identify missing time units
// - Missing translations will always fallback to English (US)
const translation = {
    timeUnits: {
        anomalisticMonth: { readableName: "anomalistic month" },
        anomalisticYear: { readableName: "anomalistic year" },
        attosecond: { readableName: "attosecond" },
        biennium: { readableName: "biennium" },
        century: { readableName: "century" },
        cosmicYear: { readableName: "cosmic year" },
        day: { readableName: "day" },
        decade: { readableName: "decade" },
        draconicMonth: { readableName: "draconic month" },
        draconicYear: { readableName: "draconic year" },
        eclipticYear: { readableName: "ecliptic year" },
        exasecond: { readableName: "exasecond" },
        exbisecond: { readableName: "exbisecond" },
        femtosecond: { readableName: "femtosecond" },
        fortnight: { readableName: "fortnight" },
        galacticYear: { readableName: "galactic year" },
        gibisecond: { readableName: "gibisecond" },
        gigasecond: { readableName: "gigasecond" },
        gregorianYear: { readableName: "Gregorian year" },
        hour: { readableName: "hour" },
        jiffy: { readableName: "jiffy", customPlural: "jiffies" },
        julianYear: { readableName: "Julian year" },
        kibisecond: { readableName: "kibisecond" },
        kilosecond: { readableName: "kilosecond" },
        kiloyear: { readableName: "kiloyear" },
        leapYear: { readableName: "leapYear" },
        lustrum: { readableName: "lustrum" },
        mebisecond: { readableName: "mebisecond" },
        megasecond: { readableName: "megasecond" },
        microsecond: { readableName: "microsecond" },
        milisecond: { readableName: "milisecond" },
        millenium: { readableName: "millenium" },
        minute: { readableName: "minute" },
        month: { readableName: "month" },
        nanosecond: { readableName: "nanosecond" },
        nodicalMonth: { readableName: "nodical month" },
        nonLeapYear: { readableName: "non-leap year" },
        novennium: { readableName: "novennium" },
        octennium: { readableName: "octennium" },
        pebisecond: { readableName: "pepisecond" },
        petasecond: { readableName: "petasecond" },
        picosecond: { readableName: "picosecond" },
        planckTime: { readableName: "Planck time" },
        quadrennium: { readableName: "quadrennium" },
        quindecennium: { readableName: "quindecennium" },
        quinquennium: { readableName: "quinquennium" },
        second: { readableName: "second" },
        septennium: { readableName: "septennium" },
        shake: { readableName: "shake" },
        siderealDay: { readableName: "sidereal day" },
        siderealHour: { readableName: "sidereal hour" },
        siderealMinute: { readableName: "sidereal minute" },
        siderealMonth: { readableName: "sidereal month" },
        siderealSecond: { readableName: "sidereal second" },
        siderealYear: { readableName: "sidereal year" },
        solarDay: { readableName: "solar day" },
        solarYear: { readableName: "solar year" },
        svedberg: { readableName: "svedberg" },
        synodicMonth: { readableName: "synodic month" },
        tebisecond: { readableName: "tebisecond" },
        terasecond: { readableName: "terasecond" },
        timeUnit: { readableName: "Time Unit" },
        tropicalYear: { readableName: "tropical year" },
        week: { readableName: "week" },
        year: { readableName: "year" },
        yobisecond: { readableName: "yobisecond" },
        yoctosecond: { readableName: "yoctosecond" },
        yottasecond: { readableName: "yottasecond" },
        zebisecond: { readableName: "zebisecond" },
        zeptosecond: { readableName: "zeptosecond" },
        zettasecond: { readableName: "zettasecond" },
    },
    writerOptions: {
        decimalSeparator: ".",
        termApproximately: "approximately",
        termInfinite: "infinite",
        termNaN: "invalid number of",
    },
};
// Exporting the object as a default is a REQUIREMENT for translations to work
exports.default = translation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
