"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const translation = {
    timeUnits: {
        anomalisticMonth: { readableName: "mês anomalístico", customPlural: "meses anomalísticos" },
        anomalisticYear: { readableName: "ano anomalístico", customPlural: "anos anomalísticos" },
        attosecond: { readableName: "attossegundo" },
        biennium: { readableName: "biénio" },
        century: { readableName: "século" },
        cosmicYear: { readableName: "ano cósmico", customPlural: "anos cósmicos" },
        day: { readableName: "dia" },
        decade: { readableName: "década" },
        draconicMonth: { readableName: "mês draconiano", customPlural: "meses draconianos" },
        draconicYear: { readableName: "ano draconiano", customPlural: "anos draconianos" },
        eclipticYear: { readableName: "ano eclíptico", customPlural: "anos eclípticos" },
        exasecond: { readableName: "exassegundo" },
        exbisecond: { readableName: "exbissegundo" },
        femtosecond: { readableName: "femtosegundo" },
        fortnight: { readableName: "quinzena" },
        galacticYear: { readableName: "ano galáctico", customPlural: "anos galácticos" },
        gibisecond: { readableName: "gibissegundo" },
        gigasecond: { readableName: "gigassegundo" },
        gregorianYear: { readableName: "ano Gregoriano", customPlural: "anos Gregorianos" },
        hour: { readableName: "hora" },
        jiffy: { readableName: "instante" },
        julianYear: { readableName: "ano Juliano", customPlural: "anos Julianos" },
        kibisecond: { readableName: "kibissegundo" },
        kilosecond: { readableName: "kilossegundo" },
        kiloyear: { readableName: "kiloano" },
        leapYear: { readableName: "ano bissexto", customPlural: "anos bissextos" },
        lustrum: { readableName: "lustro" },
        mebisecond: { readableName: "mebissegundo" },
        megasecond: { readableName: "megassegundo" },
        microsecond: { readableName: "microssegundo" },
        milisecond: { readableName: "milissegundo" },
        millenium: { readableName: "milénio" },
        minute: { readableName: "minuto" },
        month: { readableName: "mês", customPlural: "meses" },
        nanosecond: { readableName: "nanossegundo" },
        nodicalMonth: { readableName: "mês nodoso", customPlural: "meses nodosos" },
        nonLeapYear: { readableName: "ano não-bissexto", customPlural: "anos não-bissextos" },
        novennium: { readableName: "novénio" },
        octennium: { readableName: "octénio" },
        pebisecond: { readableName: "pepissegundo" },
        petasecond: { readableName: "petassegundo" },
        picosecond: { readableName: "picossegundo" },
        planckTime: { readableName: "tempo de Planck", customPlural: "tempos de Planck" },
        quadrennium: { readableName: "quadriénio" },
        quindecennium: { readableName: "quindecénio" },
        quinquennium: { readableName: "quinquénio" },
        second: { readableName: "segundo" },
        septennium: { readableName: "septénio" },
        shake: {},
        siderealDay: { readableName: "dia sideral", customPlural: "dias siderais" },
        siderealHour: { readableName: "hora sideral", customPlural: "horas siderais" },
        siderealMinute: { readableName: "minuto sideral", customPlural: "minutos siderais" },
        siderealMonth: { readableName: "mês sideral", customPlural: "meses siderais" },
        siderealSecond: { readableName: "segundo sideral", customPlural: "segundos siderais" },
        siderealYear: { readableName: "ano sideral", customPlural: "anos siderais" },
        solarDay: { readableName: "dia solar", customPlural: "dias solares" },
        solarYear: { readableName: "ano solar", customPlural: "anos solares" },
        svedberg: {},
        synodicMonth: { readableName: "mês sinódico", customPlural: "meses sinódicos" },
        tebisecond: { readableName: "tebissegundo" },
        terasecond: { readableName: "terassegundo" },
        timeUnit: { readableName: "unidade de tempo", customPlural: "unidades de tempo" },
        tropicalYear: { readableName: "ano tropical", customPlural: "anos tropicais" },
        week: { readableName: "semana" },
        year: { readableName: "ano" },
        yobisecond: { readableName: "yobissegundo" },
        yoctosecond: { readableName: "yoctossegundo" },
        yottasecond: { readableName: "yotassegundo" },
        zebisecond: { readableName: "zebissegundo" },
        zeptosecond: { readableName: "zeptossegundo" },
        zettasecond: { readableName: "zettassegundo" },
    },
    writerOptions: {
        decimalSeparator: ",",
        termApproximately: "cerca de",
        termInfinite: "infinitos",
        termNaN: "número inválido de",
    },
};
exports.default = translation;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
