"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*! ****************************************************************************
Copyright (c) 2017-2018 Pedro José Batista
MIT License

See the LICENSE file for more information.
***************************************************************************** */
/** [[include:index.md]] */ /** */
const decimal_js_1 = require("decimal.js");
const localization_1 = require("./localization");
const localization = require("./localization");
exports.localization = localization;
const utils = require("./utils");
exports.utils = utils;
// One hundred significant digits seem to be enough to handle more extreme time units
decimal_js_1.Decimal.set({ precision: 100 });
//#region Non-exported Functions
function filterEmpty(target) {
    return target.filter(value => {
        return typeof (value) !== "undefined" && value !== "";
    });
}
// Merges the immediate properties of all given objects
function merge(...objects) {
    let merged = {};
    for (const object of objects) {
        merged = Object.assign(merged, object || {});
    }
    return merged;
}
// Replaces the last occurrence of a string, within a string
// Thanks to https://stackoverflow.com/a/5497365
function replaceLast(str, search, replacement) {
    const index = str.lastIndexOf(search);
    if (index === -1) {
        return str;
    }
    return str.substr(0, index) + replacement + str.substr(index + 1);
}
// Gets a named time unit object from a time unit parameter, using the TIME_UNITS database
function timeUnitFromSource(parameter) {
    const assign = (name, timeUnit) => Object.assign({ name }, timeUnit);
    // tslint:disable:curly
    if (typeof (parameter) === "object") {
        // Return condition 1: The object already is named
        if (parameter.hasOwnProperty("name")) {
            return parameter;
        }
        // Return condition 2: Find the corresponding object and name it
        for (const timeUnitName in exports.TimeUnits)
            if (exports.TimeUnits.hasOwnProperty(timeUnitName)) {
                if (exports.TimeUnits[timeUnitName] === parameter) {
                    return assign(timeUnitName, exports.TimeUnits[timeUnitName]);
                }
            }
    }
    if (typeof (parameter) === "string") {
        // Return condition 3: Unit name matches object name exactly (TS will enforce this, but JS won't)
        if (exports.TimeUnits.hasOwnProperty(parameter)) {
            return assign(parameter, exports.TimeUnits[parameter]);
        }
        const target = parameter.toLowerCase();
        // Return condition 4: Unit name is a case variation or plural
        for (const timeUnitName in exports.TimeUnits)
            if (exports.TimeUnits.hasOwnProperty(timeUnitName)) {
                const customPlural = exports.TimeUnits[timeUnitName].customPlural;
                // Sub-conditions (if target is equal to any of these, we found a variation)
                const condition1 = timeUnitName.toLowerCase();
                const condition2 = condition1 + "s";
                const condition3 = timeUnitName.replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
                const condition4 = typeof (customPlural) === "string"
                    ? customPlural.toLowerCase()
                    : condition3 + "s";
                if (target === condition1 || target === condition2 || target === condition3 || target === condition4) {
                    return assign(timeUnitName, exports.TimeUnits[timeUnitName]);
                }
            }
    }
    // tslint:enable:curly
    // No condition met, unit is invalid
    throw new Error("Invalid time unit");
}
//#endregion
//#region Non-exported Variables
const defaultSettings = {
    decimalSeparator: ".",
    hideTimeUnit: false,
    hideZeroSegments: true,
    numericNotation: "decimal",
    roundingMode: 4,
    segmentSeparator: ", ",
    significantDigits: 10,
    symbolApproximately: "≈",
    symbolInfinite: "∞",
    symbolNaN: "NaN",
    termApproximately: "approximately",
    termInfinite: "infinite",
    termNaN: "invalid number of",
    timeUnitSeparator: " ",
    verbose: false,
};
// Gets the decimal separator from a locale string
const localeDecimalSeparator = (() => {
    const value = 1.1;
    const separator = value.toLocaleString().substring(1, 2);
    return separator;
})();
// List of roman numerals from greater to lesser
const romanNumerals = [
    [1000, "M"], [900, "CM"], [500, "D"], [400, "CD"],
    [100, "C"], [90, "XC"], [50, "L"], [40, "XL"],
    [10, "X"], [9, "IX"], [5, "V"], [4, "IV"], [1, "I"],
];
const romanNumeralsBig = [
    [1000000, `M̅`], [900000, `C̅M̅`], [500000, `D̅`], [400000, `C̅D̅`],
    [100000, `C̅`], [90000, `X̅C̅`], [50000, `L̅`], [40000, `X̅L̅`],
    [10000, `X̅`], [9000, `I̅X̅`], [5000, `V̅`], [4000, `I̅V̅`], [1000, `I̅`],
].concat(romanNumerals.slice(1));
// List of roman fractions in no specific order
const romanFractions = [
    [1 / 12, "•"], [2 / 12, ":"], [3 / 12, "∴"], [4 / 12, "::"], [5 / 12, ":·:"], [6 / 12, "S"],
    [7 / 12, "S•"], [8 / 12, "S:"], [9 / 12, "S∴"], [10 / 12, "S::"], [11 / 12, "S:·:"],
    [1 / 36, "ƧƧ"], [1 / 48, "Ɔ"], [1 / 72, "Ƨ"], [1 / 288, "℈"],
];
//#endregion
//#region Exported Functions
/**
 * Writes a numeric value using numerals from the _Ancient Rome_.
 *
 * @param value
 *   A number or [big decimal](https://mikemcl.github.io/decimal.js) to be converted to roman.
 * @param fractions
 *   Whether to include [common fractions](https://en.wikipedia.org/wiki/Roman_numerals#Fractions) or not.
 * @return
 *   A string with the roman representation of the given number.
 */
function writeRoman(value, fractions = false) {
    if (typeof (value) === "number") {
        value = new decimal_js_1.Decimal(value);
    }
    const fixedValue = value.trunc();
    const numerals = value.comparedTo(5000) > 0 ? romanNumeralsBig : romanNumerals;
    let amountLeft = fixedValue;
    let result = "";
    while (amountLeft.comparedTo(0) > 0) {
        // The order of romanNumerals is important here: they are written from large to lesser
        for (const entry of numerals) {
            // So, if value is 1111, this accounts for M (1000) first, then C (100), then X (10), then I (1)
            if (amountLeft.comparedTo(entry[0]) >= 0) {
                amountLeft = amountLeft.minus(entry[0]);
                result += entry[1];
                break;
            }
        }
    }
    if (fractions && value.comparedTo(fixedValue) > 0) {
        result += writeRomanFractions(value.minus(fixedValue));
    }
    return result.length > 0 ? result : "nulla";
}
exports.writeRoman = writeRoman;
/**
 * Writes the fraction part of a numeric value using common fractions from the _Ancient Rome_.
 *
 * @param value
 *   A number that will have its decimal part extracted and written in roman.
 * @return
 *   A string with the roman representation of the given fraction.
 */
function writeRomanFractions(value) {
    if (typeof (value) === "number") {
        value = new decimal_js_1.Decimal(value);
    }
    value = value.minus(value.trunc());
    if (value.comparedTo(0) === 0) {
        return "";
    }
    let smallestDifference = new decimal_js_1.Decimal(1);
    let smallestIndex = -1;
    // Not much to explain: compares all romanFractions with the given fraction and returns the one with the
    // smallest difference (only faster if the difference is exactly zero)
    for (let i = 0; i < romanFractions.length; i += 1) {
        const romanFraction = romanFractions[i];
        const difference = value.minus(romanFraction[0]).abs();
        if (difference.comparedTo(0) === 0) {
            return romanFraction[1];
        }
        if (difference.comparedTo(smallestDifference) < 0) {
            smallestDifference = difference;
            smallestIndex = i;
        }
    }
    return romanFractions[smallestIndex][1];
}
exports.writeRomanFractions = writeRomanFractions;
//#endregion
//#region Exported Constants
/**
 * Objects pertaining to this constant can be used as a parameter value for the
 * [countdown](../classes/_index_.timewriter.html#countdown) method of time writers.
 *
 * These constants contains groups of [time units](../classes/_index_.timeunitdatabase.html) that are related.
 */
exports.TimeSegments = {
    /** All base ten [SI](https://en.wikipedia.org/wiki/International_System_of_Units) time units. */
    baseTen: ["yottasecond", "zettasecond", "exasecond", "petasecond", "terasecond", "gigasecond", "megasecond",
        "kilosecond", "second", "milisecond", "microsecond", "nanosecond", "picosecond", "femtosecond", "attosecond",
        "zeptosecond", "yoctosecond"],
    /** All base two binary time units. */
    binary: ["yobisecond", "zebisecond", "exbisecond", "pebisecond", "tebisecond", "gibisecond", "mebisecond",
        "kibisecond", "second"],
    /** Common time unit segmentation: year, month, day, hour, minute and second. */
    common: ["year", "month", "day", "hour", "minute", "second"],
    /** Extremes and the middle-point of timecount units: Planck time, nanosecond and yobisecond. */
    extremes: ["planckTime", "nanosecond", "yobisecond"],
    /** Contains all units of a [sidereal time](https://en.wikipedia.org/wiki/Sidereal_time). */
    sidereal: ["siderealYear", "siderealMonth", "siderealDay", "siderealHour", "siderealMinute", "siderealSecond"],
};
/**
 * A database of [time units](../interfaces/_index_.timeunit.html), used to qualify and describe lengths of time.
 *
 * Each property of this object enumerates the linguistic and mathematical features of the time unit it represents.
 *
 * ---
 *
 * See [TimeUnitDatabase](../interfaces/_index_.timeunitdatabase.html) for more information about time units.
 */
exports.TimeUnits = {
    anomalisticMonth: { factor: new decimal_js_1.Decimal("2.38071312e+15"), approximated: true },
    anomalisticYear: { factor: new decimal_js_1.Decimal("3.15584325504e+16"), approximated: true },
    attosecond: { factor: new decimal_js_1.Decimal("1e-9"), symbol: "as" },
    biennium: { factor: new decimal_js_1.Decimal("6.3113904e+16"), customPlural: "biennia" },
    century: { factor: new decimal_js_1.Decimal("3.1536e+18"), customPlural: "centuries" },
    cosmicYear: { factor: new decimal_js_1.Decimal("7.4898e+24"), approximated: true },
    day: { factor: new decimal_js_1.Decimal("8.64e+13"), symbol: "d" },
    decade: { factor: new decimal_js_1.Decimal("3.1556952e+17") },
    draconicMonth: { factor: new decimal_js_1.Decimal("2.351135808e+15"), approximated: true },
    draconicYear: { factor: new decimal_js_1.Decimal("2.994797455629e+16"), approximated: true },
    eclipticYear: { factor: new decimal_js_1.Decimal("2.994797455629e+16"), approximated: true },
    exasecond: { factor: new decimal_js_1.Decimal("1e+27"), symbol: "Es" },
    exbisecond: { factor: new decimal_js_1.Decimal("1.152921504606846976e+27"), symbol: "Eis" },
    femtosecond: { factor: new decimal_js_1.Decimal("1e-6"), symbol: "fs" },
    fortnight: { factor: new decimal_js_1.Decimal("1.2096e+15") },
    galacticYear: { factor: new decimal_js_1.Decimal("7.4898e+24"), approximated: true },
    gibisecond: { factor: new decimal_js_1.Decimal("1.073741824e+18"), symbol: "Gis" },
    gigasecond: { factor: new decimal_js_1.Decimal("1e+18"), symbol: "Gs" },
    gregorianYear: { factor: new decimal_js_1.Decimal("3.1556952e+16"), readableName: "Gregorian year" },
    hour: { factor: new decimal_js_1.Decimal("3.6e+12"), symbol: "h" },
    jiffy: { factor: new decimal_js_1.Decimal("3e-15"), customPlural: "jiffies" },
    julianYear: { factor: new decimal_js_1.Decimal("3.15576e+16"), readableName: "Julian year" },
    kibisecond: { factor: new decimal_js_1.Decimal("1.024e+12"), symbol: "Kis" },
    kilosecond: { factor: new decimal_js_1.Decimal("1e+12"), symbol: "Ks" },
    kiloyear: { factor: new decimal_js_1.Decimal("3.1536e+19"), symbol: "ky" },
    leapYear: { factor: new decimal_js_1.Decimal("3.16224e+16") },
    lustrum: { factor: new decimal_js_1.Decimal("1.5778476e+17"), customPlural: "lustra" },
    mebisecond: { factor: new decimal_js_1.Decimal("1.048576e+15"), symbol: "Mis" },
    megasecond: { factor: new decimal_js_1.Decimal("1e+15"), symbol: "Ms" },
    microsecond: { factor: new decimal_js_1.Decimal("1e+3"), symbol: "µs" },
    milisecond: { factor: new decimal_js_1.Decimal("1e+6"), symbol: "ms" },
    millenium: { factor: new decimal_js_1.Decimal("3.1556952e+19"), customPlural: "millennia" },
    minute: { factor: new decimal_js_1.Decimal("6e+10"), symbol: "min" },
    month: { factor: new decimal_js_1.Decimal("2.628e+15"), symbol: "m" },
    nanosecond: { factor: new decimal_js_1.Decimal("1"), symbol: "ns" },
    nodicalMonth: { factor: new decimal_js_1.Decimal("2.351135808e+15"), approximated: true },
    nonLeapYear: { factor: new decimal_js_1.Decimal("3.1536e+16"), readableName: "non-leap year" },
    novennium: { factor: new decimal_js_1.Decimal("2.84012568e+17"), customPlural: "novennia" },
    octennium: { factor: new decimal_js_1.Decimal("2.52455616e+17"), customPlural: "octennia" },
    pebisecond: { factor: new decimal_js_1.Decimal("1.125899906842624e+24"), symbol: "Pis" },
    petasecond: { factor: new decimal_js_1.Decimal("1e+24"), symbol: "Ps" },
    picosecond: { factor: new decimal_js_1.Decimal("1e-3"), symbol: "ps" },
    planckTime: { factor: new decimal_js_1.Decimal("5.39056e-35"), symbol: "tₚ", readableName: "Planck time" },
    quadrennium: { factor: new decimal_js_1.Decimal("1.26227808e+17"), customPlural: "quadrennia" },
    quindecennium: { factor: new decimal_js_1.Decimal("4.7335428e+17"), customPlural: "quindecennia" },
    quinquennium: { factor: new decimal_js_1.Decimal("1.5778476e+17"), customPlural: "quinquennia" },
    second: { factor: new decimal_js_1.Decimal("1e+9"), symbol: "s" },
    septennium: { factor: new decimal_js_1.Decimal("2.20752e+17"), customPlural: "septennia" },
    shake: { factor: new decimal_js_1.Decimal("10") },
    siderealDay: { factor: new decimal_js_1.Decimal("8.616409e+13"), approximated: true },
    siderealHour: { factor: new decimal_js_1.Decimal("3.590170416667e+12"), approximated: true },
    siderealMinute: { factor: new decimal_js_1.Decimal("5.983617361111e+10"), approximated: true },
    siderealMonth: { factor: new decimal_js_1.Decimal("2.360591424e+15"), approximated: true },
    siderealSecond: { factor: new decimal_js_1.Decimal("9.972695601852e+8"), approximated: true },
    siderealYear: { factor: new decimal_js_1.Decimal("3.155814954e+16"), approximated: true },
    solarDay: { factor: new decimal_js_1.Decimal("8.64e+13") },
    solarYear: { factor: new decimal_js_1.Decimal("3.155693e+16"), approximated: true },
    svedberg: { factor: new decimal_js_1.Decimal("1e-4"), symbol: "Sv" },
    synodicMonth: { factor: new decimal_js_1.Decimal("2.55144384e+15"), approximated: true },
    tebisecond: { factor: new decimal_js_1.Decimal("1.099511627776e+21"), symbol: "Tis" },
    terasecond: { factor: new decimal_js_1.Decimal("1e+21"), symbol: "Ts" },
    timeUnit: { factor: new decimal_js_1.Decimal("1.024e+6"), symbol: "TU" },
    tropicalYear: { factor: new decimal_js_1.Decimal("3.155693e+16"), approximated: true },
    week: { factor: new decimal_js_1.Decimal("6.048e+14"), symbol: "w" },
    year: { factor: new decimal_js_1.Decimal("3.1556952e+16"), symbol: "y" },
    yobisecond: { factor: new decimal_js_1.Decimal("1.208925819614629174706176e+33"), symbol: "Yis" },
    yoctosecond: { factor: new decimal_js_1.Decimal("1e-15"), symbol: "ys" },
    yottasecond: { factor: new decimal_js_1.Decimal("1e+33"), symbol: "Ys" },
    zebisecond: { factor: new decimal_js_1.Decimal("1.180591620717411303424e+30"), symbol: "Zis" },
    zeptosecond: { factor: new decimal_js_1.Decimal("1e-12"), symbol: "zs" },
    zettasecond: { factor: new decimal_js_1.Decimal("1e+30"), symbol: "Zs" },
};
/**
 * Alias to [TimeUnits](#timeunits-1).
 *
 * @deprecated Since v1.1.0 - Incorrect naming, all exported constants are now capitalized (will be removed in v2).
 */
exports.timeUnits = exports.TimeUnits;
/**
 * This enumeration contains all [rounding modes](../interfaces/_index_.timewritersettings.html#roundingmode) available,
 * extracted from the [decimal.js documentation](https://mikemcl.github.io/decimal.js).
 */
var RoundingMode;
(function (RoundingMode) {
    /** Rounds away from zero. */
    RoundingMode[RoundingMode["RoundUp"] = 0] = "RoundUp";
    /** Rounds towards zero. */
    RoundingMode[RoundingMode["RoundDown"] = 1] = "RoundDown";
    /** Rounds towards _Infinity_. */
    RoundingMode[RoundingMode["RoundCeil"] = 2] = "RoundCeil";
    /** Rounds towards _-Infinity_. */
    RoundingMode[RoundingMode["RoundFloor"] = 3] = "RoundFloor";
    /** Rounds towards nearest neighbour; if equidistant, rounds away from zero. */
    RoundingMode[RoundingMode["RoundHalfUp"] = 4] = "RoundHalfUp";
    /** Rounds towards nearest neighbour; if equidistant, rounds towards zero. */
    RoundingMode[RoundingMode["RoundHalfDown"] = 5] = "RoundHalfDown";
    /** Rounds towards nearest neighbour; if equidistant, rounds towards even neighbour. */
    RoundingMode[RoundingMode["RoundHalfEven"] = 6] = "RoundHalfEven";
    /** Rounds towards nearest neighbour; if equidistant, rounds towards _Infinity_. */
    RoundingMode[RoundingMode["RoundHalfCeil"] = 7] = "RoundHalfCeil";
    /** Rounds towards nearest neighbour; if equidistant, rounds towards _-Infinity_. */
    RoundingMode[RoundingMode["RoundHalfFloor"] = 8] = "RoundHalfFloor";
})(RoundingMode = exports.RoundingMode || (exports.RoundingMode = {}));
/**
 * Encapsulates a nanosecond-based time value.
 *
 * Instances of this class are capable of being converted [from](#from) and [to](#to) / [to big decimal](#toBig) other
 * [time units](../interfaces/_index_.timeunitdatabase.html) and also perform basic arithmetics.
 *
 * Times can also be [approximated](#isApproximated), and operations deriving from their use will also be approximated.
 * This doesn't affect the time object value in any way, but is used by [TimeWriter](_index_.timewriter.html) to
 * demonstrate approximations.
 *
 * All instances are _immutable_, thus not affected by methods (new instances are always created instead). Also, all
 * time values are necessarily positive (negative times are not a thing).
 */
class Time {
    /**
     * Gets the [big decimal](https://www.npmjs.com/package/decimal.js) representation of the time length, in
     * nanoseconds.
     */
    get bigValue() { return this._nanoseconds; }
    /**
     * Gets whether the value of this is an approximation. This is determined at construction and it remains in all
     * operations with that this time is involved.
     */
    get isApproximated() { return this._approximated; }
    /**
     * Gets the numeric representation of the time length in nanoseconds.
     *
     * @deprecated Since v1.1.0 - In favor of `bigValue` and `value` (will be removed in v2).
     */
    get nanoseconds() { return parseFloat(this._nanoseconds.toString()); }
    /**
     * Gets the numeric representation of the time length, in nanoseconds.
     */
    get value() { return parseFloat(this._nanoseconds.toString()); }
    // Actual `constructor` implementation
    constructor(value, approximated = false) {
        if (value instanceof Time) {
            approximated = value._approximated;
            value = value._nanoseconds;
        }
        if (typeof (value) !== "string" && typeof (value) !== "number" && !(value instanceof decimal_js_1.Decimal)) {
            throw new Error(`Invalid argument ${value}`);
        }
        if (!(value instanceof decimal_js_1.Decimal)) {
            value = new decimal_js_1.Decimal(value);
        }
        this._approximated = approximated;
        this._nanoseconds = value.abs();
    }
    // Actual `from` implementation
    static from(value, timeUnit) {
        if (typeof (value) !== "string" && typeof (value) !== "number" && !(value instanceof decimal_js_1.Decimal)) {
            throw new Error(`Invalid argument ${value}`);
        }
        if (!(value instanceof decimal_js_1.Decimal)) {
            value = new decimal_js_1.Decimal(value);
        }
        timeUnit = timeUnitFromSource(timeUnit);
        return new Time(value.times(timeUnit.factor), timeUnit.approximated);
    }
    // Actual `add` implementation
    add(value, timeUnit) {
        let approximated = false;
        if (value instanceof Time) {
            value = value._nanoseconds;
        }
        if (timeUnit) {
            const converted = Time.from(value, timeUnit);
            approximated = converted._approximated;
            value = converted._nanoseconds;
        }
        return new Time(this._nanoseconds.add(value), approximated);
    }
    /**
     * Creates and returns a new time object that contains the value of this time, however with the approximated flag.
     *
     * @returns
     *   Approximated time in relation to this time.
     */
    approximate() {
        return new Time(this._nanoseconds, true);
    }
    // Actual `divide` implementation
    divide(value, timeUnit) {
        let approximated = false;
        if (value instanceof Time) {
            value = value._nanoseconds;
        }
        if (timeUnit) {
            const converted = Time.from(value, timeUnit);
            approximated = converted._approximated;
            value = converted._nanoseconds;
        }
        return new Time(this._nanoseconds.dividedBy(value), approximated);
    }
    // Actual `multiply` implementation
    multiply(value, timeUnit) {
        let approximated = false;
        if (value instanceof Time) {
            value = value._nanoseconds;
        }
        if (timeUnit) {
            const converted = Time.from(value, timeUnit);
            approximated = converted._approximated;
            value = converted._nanoseconds;
        }
        return new Time(this._nanoseconds.times(value), approximated);
    }
    // Actual `subtract` implementation
    subtract(value, timeUnit) {
        let approximated = false;
        if (value instanceof Time) {
            value = value._nanoseconds;
        }
        if (timeUnit) {
            const converted = Time.from(value, timeUnit);
            approximated = converted._approximated;
            value = converted._nanoseconds;
        }
        return new Time(this._nanoseconds.minus(value), approximated);
    }
    // Actual `to` implementation
    to(timeUnit) {
        return this.toBig(timeUnit).toNumber();
    }
    // Actual `toBig` implementation
    toBig(timeUnit) {
        timeUnit = timeUnitFromSource(timeUnit);
        return this._nanoseconds.dividedBy(timeUnit.factor);
    }
    /**
     * Gets a string representing the of value of this time, in nanoseconds.
     *
     * @return
     *   Numeric representation of the time length plus the symbol "ns".
     */
    toString() {
        return `${this._approximated ? "≈" : ""}${this._nanoseconds.toString()} ns`;
    }
}
exports.Time = Time;
/**
 * Time writers are objects used to synthesize time values into strings, i.e. write times using different lexical and
 * numerical configurations. **[Write](#write)** is used to express a single time value, using a single time unit;
 * **[countdown](#countdown)** is used to classify time values by segmenting them into parts with different time units.
 *
 * These configurations are loaded in the following order:
 * - Defaults — hardcoded for English (US);
 * - Options from the current [Locale](_localization_.locale.html);
 * - Options from the instance [settings](#settings);
 * - Options given as a parameter to a method.
 *
 * ---
 *
 * [[include:examples/timewriter.md]]
 */
class TimeWriter {
    /**
     * Initializes a new instance of the [TimeWriter](#) class optionally using the given configurations.
     *
     * @param settings
     *   Configurations pertaining to this instance, overriding those of the
     *   [locale](_localization_.locale.html#writerOptions). May be overriden via parameter of [write](#write) or
     *   [countdown](#countdown).
     */
    constructor(settings = {}) {
        this.settings = settings;
        this._shouldApproximate = true;
    }
    // Actual `countdown` implementation
    countdown(time, options = {}, ...args) {
        const timeUnitNames = [];
        const timeUnitObjects = [];
        if (typeof (options) === "string" || options.hasOwnProperty("factor")) {
            args = [options].concat(args);
            options = {};
        }
        if (options instanceof Array) {
            args = options.concat(args);
            options = {};
        }
        // If no time units were given, use the "common" constant
        if (args.length === 0) {
            args = exports.TimeSegments.common;
        }
        // Selects all arrays passed as argument
        const arrayArgs = args.filter(e => e instanceof Array);
        const filtered = args.filter(e => !(e instanceof Array));
        // Replaces arrays by their elements on args
        arrayArgs.forEach(array => { filtered.push.apply(filtered, array); });
        args = filtered;
        for (const argument of args) {
            const timeUnit = timeUnitFromSource(argument);
            // Skipping repeated units
            if (timeUnitNames.indexOf(timeUnit.name) > -1) {
                continue;
            }
            timeUnitNames.push(timeUnit.name);
            timeUnitObjects.push(timeUnit);
        }
        options = this._combineOptions(options);
        return this._countdownTime(time, timeUnitObjects, options);
    }
    // Actual `write` implementation
    write(time, fromTimeUnit, toTimeUnit, options) {
        const isOptions = (object) => typeof (object) === "object" && !object.hasOwnProperty("factor");
        if (!options && isOptions(fromTimeUnit)) {
            options = fromTimeUnit;
            fromTimeUnit = toTimeUnit;
            toTimeUnit = undefined;
        }
        if (!options && isOptions(toTimeUnit)) {
            options = toTimeUnit;
            toTimeUnit = undefined;
        }
        options = this._combineOptions(options);
        fromTimeUnit = (fromTimeUnit || options.defaultTimeUnit || "nanosecond");
        toTimeUnit = (toTimeUnit || fromTimeUnit);
        if (!(time instanceof Time)) {
            time = Time.from(time, fromTimeUnit);
        }
        return this._writeTime(time, options, toTimeUnit);
    }
    //#endregion
    // Gets the options overriden in the correct order
    _combineOptions(options) {
        options = merge(defaultSettings, localization_1.Locale.settings.writerOptions, this.settings, options);
        // Deprecated properties will be removed on next major release, but for now, parse them
        options.decimalPlaces = typeof (options.decimalPlaces) === "number"
            ? options.decimalPlaces
            : options.fractionDigits;
        if (options.timeUnitSeparator === defaultSettings.timeUnitSeparator && options.spaceTimeUnit === false) {
            options.timeUnitSeparator = "";
        }
        if (options.terms) {
            options.termApproximately = options.termApproximately || options.terms.approximately;
            options.termInfinite = options.termInfinite || options.terms.infinite;
            options.termNaN = options.termNaN || options.terms.nan;
        }
        return options;
    }
    // Count and writes times unit-by-unit
    _countdownTime(time, timeUnitList, options) {
        let value = new decimal_js_1.Decimal(0);
        let integer = new decimal_js_1.Decimal(0);
        let fraction = new decimal_js_1.Decimal(0);
        const update = (total) => { value = total, integer = value.trunc(), fraction = value.minus(integer); };
        // Sorts the time units from largest factor to smallest
        timeUnitList.sort((a, b) => b.factor.comparedTo(a.factor));
        // Sets the value to the representation of the first time unit
        update(time.toBig(timeUnitList[0]));
        const result = [];
        for (let i = 1; i < timeUnitList.length; i += 1) {
            const previousTimeUnit = timeUnitList[i - 1];
            if ((integer.comparedTo(0) !== 0 || options.hideZeroSegments === false) &&
                (!integer.isNaN() || result.length === 0)) {
                const parsedTime = time.isApproximated || previousTimeUnit.approximated
                    ? Time.from(integer, previousTimeUnit).approximate()
                    : Time.from(integer, previousTimeUnit);
                // Adding the current segment
                result.push(this.write(parsedTime, previousTimeUnit, options));
                // Preventing `write` from writting the approximation symbol / name
                if (parsedTime.isApproximated || previousTimeUnit.approximated) {
                    this._shouldApproximate = false;
                }
            }
            update(Time.from(fraction, previousTimeUnit).toBig(timeUnitList[i]));
        }
        const timeUnit = timeUnitList[timeUnitList.length - 1];
        if ((value.comparedTo(0) !== 0 || options.hideZeroSegments === false) &&
            (!value.isNaN() || result.length === 0)) {
            if (timeUnit.factor.equals("5.39056e-35")) {
                // Planck time is teoretically indivisible
                result.push(this.write(value.round(), timeUnit, options));
            }
            else {
                // Adds the last segment in its entirety (no integer-only)
                result.push(this.write(value, timeUnit, options));
            }
        }
        this._shouldApproximate = true;
        return result.join(options.segmentSeparator || "");
    }
    // Parses numeric options and returns the numeric string
    _writeNumber(value, options) {
        if (value.isNaN()) {
            return (options.verbose ? options.termNaN : options.symbolNaN) || "";
        }
        if (!value.isFinite()) {
            return (options.verbose ? options.termInfinite : options.symbolInfinite) || "";
        }
        if (options.numericNotation === "roman") {
            return writeRoman(value);
        }
        if (options.numericNotation === "roman-fractions") {
            return writeRoman(value, true);
        }
        const parameters = [options.decimalPlaces, options.roundingMode];
        let stringValue;
        if (options.significantDigits) {
            const offset = value.trunc().precision(true);
            value = value.toSignificantDigits(options.significantDigits + offset, options.roundingMode);
        }
        if (options.numericNotation === "scientific") {
            stringValue = value.toExponential.apply(value, parameters);
        }
        else {
            stringValue = value.toFixed.apply(value, parameters);
        }
        // Parsing the thousands separator only for decimals and values >= 1000
        if (options.numericNotation === "decimal" && options.thousandsSeparator && value.comparedTo(1000) >= 0) {
            const parts = stringValue.split(localeDecimalSeparator);
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, options.thousandsSeparator);
            if (parts.length === 2) {
                stringValue = parts.join(localeDecimalSeparator);
            }
            else {
                stringValue = parts[0];
            }
        }
        if (typeof (options.decimalSeparator) === "string" && options.decimalSeparator !== localeDecimalSeparator) {
            stringValue = replaceLast(stringValue, localeDecimalSeparator, options.decimalSeparator);
        }
        return stringValue;
    }
    // Parses time-related options and return the time string
    _writeTime(time, options, targetTimeUnit) {
        const namedTimeUnit = timeUnitFromSource(targetTimeUnit || options.defaultTimeUnit || "nanosecond");
        const translation = localization_1.Locale.settings.timeUnits ? localization_1.Locale.settings.timeUnits[namedTimeUnit.name] : {};
        const value = time.toBig(targetTimeUnit);
        const timeUnit = merge(namedTimeUnit, translation);
        const result = [];
        // Part 1: approximation term/symbol
        if (this._shouldApproximate && (time.isApproximated || namedTimeUnit.approximated)) {
            const approximately = !!options.verbose
                ? options.termApproximately ? options.termApproximately + " " : ""
                : options.symbolApproximately;
            result.push(approximately || "");
        }
        // Part 2: number
        if (!options.numericWriter) {
            result.push(this._writeNumber(value, options));
        }
        else {
            result.push(options.numericWriter(value.toNumber(), value));
        }
        // Part 3: separator
        if (!options.hideTimeUnit) {
            result.push(options.timeUnitSeparator || "");
            // Part 4: time unit
        }
        else {
            return filterEmpty(result).join("");
        }
        const pluralize = timeUnit.pluralize !== false && (!value.isFinite() || value.comparedTo(1) > 0);
        result.push(this._writeTimeUnit(value, timeUnit, options, pluralize));
        return filterEmpty(result).join("");
    }
    // Parses time unit-related options and returns the time unit string
    _writeTimeUnit(value, timeUnit, options, plural) {
        const result = [];
        if (!options.verbose && timeUnit.symbol) {
            result.push(timeUnit.symbol);
            return filterEmpty(result).join("");
        }
        let timeUnitName = timeUnit.readableName;
        if (plural && typeof (timeUnit.customPlural) === "function") {
            timeUnitName = timeUnit.customPlural(value.toNumber(), value);
        }
        if (plural && typeof (timeUnit.customPlural) === "string") {
            timeUnitName = timeUnit.customPlural;
        }
        if (typeof (timeUnitName) === "undefined") {
            timeUnitName = timeUnit.name.replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
        }
        if (plural && !timeUnit.customPlural) {
            timeUnitName += "s";
        }
        result.push(timeUnitName);
        return filterEmpty(result).join("");
    }
}
exports.TimeWriter = TimeWriter;
//#endregion

//# sourceMappingURL=data:application/json;charset=utf8;base64,
