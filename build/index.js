"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/** [[include:index.md]] */ /** */
/*! ****************************************************************************
Copyright (c) 2017-2018 Pedro Jos√© Batista
MIT License

See the LICENSE file for more information.
***************************************************************************** */
const big_js_1 = require("big.js");
const localization = require("./localization");
exports.localization = localization;
const utils = require("./utils");
exports.utils = utils;
// Gets the decimal separator from an ECMA locale string
function getLocalDecimalSeparator() {
    const value = 1.1;
    const separator = value.toLocaleString().substring(1, 2);
    return separator;
}
// Chooses the first non-undefined value, or throws
function oneOf(...values) {
    for (const value of values) {
        if (typeof (value) !== "undefined") {
            return value;
        }
    }
    throw new SyntaxError("All given values were undefined");
}
// Chooses the first non-undefined value, or returns undefined itself
function oneOrNoneOf(...values) {
    for (const value of values) {
        if (typeof (value) !== "undefined") {
            return value;
        }
    }
    return undefined;
}
// Threshold of decimal parts used to analyze if a number should be rounded
const redundancyCheckThreshold = 6;
// List of roman numerals in order from greater to lesser
const romanNumerals = [
    [1000, "M"], [900, "CM"], [500, "D"], [400, "CD"],
    [100, "C"], [90, "XC"], [50, "L"], [40, "XL"],
    [10, "X"], [9, "IX"], [5, "V"], [4, "IV"],
    [1, "I"],
];
// List of roman fractions in no specific order
const romanFractions = [
    [1 / 12, "‚Ä¢"], [2 / 12, ":"], [3 / 12, "‚à¥"], [4 / 12, "::"], [5 / 12, ":¬∑:"], [6 / 12, "S"],
    [7 / 12, "S‚Ä¢"], [8 / 12, "S:"], [9 / 12, "S‚à¥"], [10 / 12, "S::"], [11 / 12, "S:¬∑:"],
    [1 / 36, "∆ß∆ß"],
    [1 / 48, "∆Ü"],
    [1 / 72, "∆ß"],
    [1 / 144, "êÜî"],
    [1 / 288, "‚Ñà"],
    [1 / 1728, "êÜï"],
];
/**
 * A database of [[TimeUnit]] objects, used to measure and represent time values in different formats. Each property is
 * an object describing the time unit's nanosecond correlation ([[TimeUnit.factor]]), its linguistic properties for
 * English (US) and its symbol, if it exists.
 *
 * ---
 *
 * See [[TimeUnitDatabase]] for more information about time units.
 */
exports.timeUnits = {
    anomalistcMonth: { factor: 2.38071312e15, name: "anomalistcMonth" },
    anomalistcYear: { factor: 3.15584325504e16, name: "anomalistcYear" },
    attosecond: { factor: 1e-9, name: "attosecond", symbol: "as" },
    biennium: { factor: 3.1536e17, name: "biennium", customPlural: "biennia" },
    century: { factor: 3.1536e18, name: "century", customPlural: "centuries" },
    day: { factor: 8.64e13, name: "day" },
    decade: { factor: 3.1536e17, name: "decade" },
    draconicMonth: { factor: 2.351135808e15, name: "draconicMonth" },
    draconicYear: { factor: 2.994797455629e16, name: "draconicYear" },
    exasecond: { factor: 1e27, name: "exasecond", symbol: "Es" },
    exbisecond: { factor: 1.152921504606846976e27, name: "exbisecond", symbol: "Eis" },
    femtosecond: { factor: 1e-6, name: "femtosecond", symbol: "fs" },
    fortnight: { factor: 1.2096e15, name: "fortnight" },
    galacticYear: { factor: 7.4898e24, name: "galacticYear" },
    gibisecond: { factor: 1.073741824e18, name: "gibisecond", symbol: "Gis" },
    gigasecond: { factor: 1e18, name: "gigasecond", symbol: "Gs" },
    hour: { factor: 3.6e12, name: "hour", symbol: "h" },
    jiffy: { factor: 3e-15, name: "jiffy", customPlural: "jiffies" },
    julianYear: { factor: 3.15576e16, name: "julianYear", readableName: "Julian year" },
    kibisecond: { factor: 1.024e12, name: "kibisecond", symbol: "Kis" },
    kilosecond: { factor: 1e12, name: "kilosecond", symbol: "Ks" },
    leapYear: { factor: 3.16224e16, name: "leapYear" },
    lustrum: { factor: 1.5768e17, name: "lustrum", customPlural: "lustra" },
    mebisecond: { factor: 1.048576e15, name: "mebisecond", symbol: "Mis" },
    megasecond: { factor: 1e15, name: "megasecond", symbol: "Ms" },
    microsecond: { factor: 1e3, name: "microsecond", symbol: "¬µs" },
    milisecond: { factor: 1e6, name: "milisecond", symbol: "ms" },
    millenium: { factor: 3.1536e19, name: "millenium", customPlural: "millennia" },
    minute: { factor: 6e10, name: "minute", symbol: "min" },
    month: { factor: 2.628e15, name: "month" },
    nanosecond: { factor: 1, name: "nanosecond", symbol: "ns" },
    nonLeapYear: { factor: 3.1536e+16, name: "nonLeapYear", readableName: "non-leap year" },
    novennium: { factor: 2.83824e17, name: "novennium", customPlural: "novennia" },
    octennium: { factor: 2.52288e17, name: "octennium", customPlural: "octennia" },
    pepisecond: { factor: 1.125899906842624e24, name: "pepisecond", symbol: "Pis" },
    petasecond: { factor: 1e24, name: "petasecond", symbol: "Ps" },
    picosecond: { factor: 1e-2, name: "picosecond", symbol: "ps" },
    planckTime: { factor: 5.39056e-35, name: "planckTime", symbol: "t‚Çö", readableName: "Planck time" },
    quadrennium: { factor: 6.3072e17, name: "quadrennium", customPlural: "quadrennia" },
    quindecennium: { factor: 4.7304e17, name: "quindecennium", customPlural: "quindecennia" },
    quinquennium: { factor: 1.5768e17, name: "quinquennium", customPlural: "quinquennia" },
    second: { factor: 1e9, name: "second", symbol: "s" },
    septennium: { factor: 2.20752e17, name: "septennium", customPlural: "septennia" },
    shake: { factor: 10, name: "shake" },
    siderealDay: { factor: 8.616409e13, name: "siderealDay" },
    siderealHour: { factor: 3.590170416667e12, name: "siderealHour" },
    siderealMinute: { factor: 5.983617361111e10, name: "siderealMinute" },
    siderealMonth: { factor: 2.360591424e15, name: "siderealMonth" },
    siderealSecond: { factor: 9.972695601852e8, name: "siderealSecond" },
    siderealYear: { factor: 3.155814954e16, name: "siderealYear" },
    svedberg: { factor: 1e-4, name: "svedberg", symbol: "Sv" },
    synodicMonth: { factor: 2.55144384e15, name: "synodicMonth" },
    tebisecond: { factor: 1.099511627776e21, name: "tebisecond", symbol: "Tis" },
    terasecond: { factor: 1e21, name: "terasecond", symbol: "Ts" },
    timeUnit: { factor: 1.024e6, name: "timeUnit", symbol: "TU" },
    tropicalYear: { factor: 3.155693e16, name: "tropicalYear" },
    week: { factor: 6.048e14, name: "week" },
    year: { factor: 3.1556952e16, name: "year" },
    yobisecond: { factor: 1.208925819614629174706176e33, name: "yobisecond", symbol: "Yis" },
    yoctosecond: { factor: 1e-12, name: "yoctosecond" },
    yottasecond: { factor: 1e33, name: "yottasecond", symbol: "Ys" },
    zebisecond: { factor: 1.180591620717411303424e30, name: "zebisecond", symbol: "Zis" },
    zeptosecond: { factor: 1e-15, name: "zeptosecond" },
    zettasecond: { factor: 1e30, name: "zettasecond", symbol: "Zs" },
};
/**
 * Encapsulates a time value, implementing a [[NanosecondBasedTime]] capable of basic arithmetics and conversions (with
 * the help of [time units](../interfaces/_index_.timeunit.html)).
 *
 * To create a [[Time]] instance from any time unit, use [[Time.from]]; to convert the value from any Time instance, use
 * [[to]].
 */
class Time {
    /**
     * Converts a time value measured using the specifid unit of time to a nanosecond-based time, creating and returning
     * a new instance of the [[Time]] class.
     *
     * @param value
     *   Numeric value quantifying the time by the given unit.
     * @param timeUnit
     *   Unit of time that qualifies the given time value.
     * @return
     *   A new [[Time]] instance with the appropriate amount of nanoseconds.
     */
    static from(value, timeUnit) {
        if (typeof (timeUnit) === "string") {
            timeUnit = exports.timeUnits[timeUnit];
        }
        return new Time(value * timeUnit.factor);
    }
    /** Gets the time value in the same format it is stored, nanoseconds. */
    get nanoseconds() { return this._value; }
    /**
     * Initializes a new instance of the [[Time]] class, using the specified time in nanoSeconds.
     *
     * @param value
     *   Amount of nanoseconds that represent the desired point in time.
     */
    constructor(value) {
        if (typeof (value) === "object") {
            value = value.nanoseconds;
        }
        this._value = Math.abs(value);
    }
    /**
     * Adds the value of this time with the value of another time.
     *
     * @param {(number | Time)} time2
     *   A number -or- a [[Time]] to be added to this time.
     * @return
     *   A new [[Time]] object with the resulting time.
     */
    add(time2) {
        if (time2 instanceof Time) {
            time2 = time2._value;
        }
        return new Time(Math.abs(this._value + time2));
    }
    /**
     * Divides the value of this time by the value of another time.
     *
     * @param {(number | Time)} time2
     *   A number -or- a [[Time]] which will divide this time.
     * @return
     *   A new [[Time]] object with the resulting time.
     */
    divide(time2) {
        if (time2 instanceof Time) {
            time2 = time2._value;
        }
        if (time2 === 0) {
            return new Time(NaN);
        }
        return new Time(Math.abs(this._value / time2));
    }
    /**
     * Multiplies the value of this time with the value of another time.
     *
     * @param {(number | Time)} time2
     *   A number -or- a [[Time]] to be multiplied by this time.
     * @return
     *   A new [[Time]] object with the resulting time.
     */
    multiply(time2) {
        if (time2 instanceof Time) {
            time2 = time2._value;
        }
        return new Time(Math.abs(this._value * time2));
    }
    /**
     * Subtracts the value of another time from the value of this time.
     *
     * @param {(number | Time)} time2
     *   A number -or- a [[Time]] to be subtracted to this time.
     * @return
     *   A new [[Time]] object with the resulting time.
     */
    subtract(time2) {
        if (time2 instanceof Time) {
            time2 = time2._value;
        }
        return new Time(Math.abs(this._value - time2));
    }
    /**
     * Converts the value of the current [[Time]] instance to the quantity corresponding to the given time unit.
     *
     * @param timeUnit
     *   The unit of time used to convert from this nanosecond-based value.
     * @return
     *   A number which represents the same measurement as this time value, converted to the given time unit.
     */
    to(timeUnit) {
        if (typeof (timeUnit) === "string") {
            timeUnit = exports.timeUnits[timeUnit];
        }
        return this._value / timeUnit.factor;
    }
    /**
     * Gets a string representing the of value of this [[Time]] in nanoseconds.
     *
     * @return
     *   Number of nanoseconds followed by the symbol "ns".
     */
    toString() {
        return `${this._value} ns`;
    }
}
exports.Time = Time;
/**
 * **Time writers** are used to synthesize time values into strings.
 *
 * In order to maximize usability, instances of [[TimeWriter]] have multiple configuration points, which, in order, are:
 * - Defaults ‚Äî hardcoded for English (US);
 * - Options from the current [[Locale]];
 * - Options from the instance [[settings]];
 * - Options given as a parameter to [[write]].
 *
 * [[include:examples/timewriter.md]]
 */
class TimeWriter {
    /**
     * Initializes a new instance of the [[TimeWriter]] class optionally using the specified `settings`.
     *
     * @param settings
     *   An object containing the [[TimeWriterSettings]] used to configure the behavior of this time writer.
     */
    constructor(settings = {}) {
        this._settings = {};
        this._timeUnitSettingsCache = {};
        this._writerSettingsCache = {};
        this._settings = settings;
    }
    /** Gets or sets the object containing the [[TimeWriterSettings]] of this time writer. */
    get settings() { return this._settings; }
    // Actual implementation of write
    write(time, originTimeUnit, targetTimeUnit, options) {
        const isOptions = (parameter) => typeof (parameter) !== "string" && (!!parameter && !parameter.hasOwnProperty("factor"));
        if (isOptions(targetTimeUnit)) {
            options = targetTimeUnit;
            targetTimeUnit = undefined;
        }
        else if (isOptions(originTimeUnit)) {
            options = originTimeUnit;
            originTimeUnit = undefined;
        }
        options = options || {};
        this._writerSettingsCache = this._createWriterSettingsCache(options);
        const writerSettings = this._writerSettingsCache;
        originTimeUnit = originTimeUnit || writerSettings.defaultTimeUnit;
        targetTimeUnit = targetTimeUnit || originTimeUnit;
        if (typeof (time) === "number") {
            time = Time.from(time, originTimeUnit);
        }
        if (!(time instanceof Time)) {
            time = new Time(time);
        }
        if (typeof (targetTimeUnit) === "string") {
            targetTimeUnit = exports.timeUnits[targetTimeUnit];
        }
        this._timeUnitSettingsCache = this._createTimeUnitSettingsCache(targetTimeUnit);
        let targetValue = time.to(targetTimeUnit);
        if (!isNaN(targetValue) && targetValue !== Infinity) {
            const parts = big_js_1.Big(targetValue).toFixed().split(getLocalDecimalSeparator());
            // This will test for redundancy errors, caused by inaccuracies of floating points
            if (parts[1] && parts[1].length >= redundancyCheckThreshold && !/[^9]/.test(parts[1])) {
                targetValue = Math.round(targetValue);
            }
        }
        const writtenNumber = this._writeNumber(targetValue);
        if (writerSettings.hideTimeUnit) {
            return writtenNumber;
        }
        const timeUnitName = this._writeTimeUnit(targetValue);
        const spacing = writerSettings.spaceTimeUnit ? " " : "";
        return `${writtenNumber}${spacing}${timeUnitName}`;
    }
    // Since there are multiple methods that access the fully-overwritten settings, we create a cache for them
    // This cache is only pertinent during `write`
    // The first cache is for the time unit: 1) language, 2) languageDefault, 3) hardcoded
    _createTimeUnitSettingsCache(timeUnit) {
        const localeTimeUnits = (localization.Locale.settings.timeUnits || {});
        const language = localeTimeUnits[timeUnit.name] || {};
        const languageDefault = localization.Locale.settings.defaultOptions || {};
        const name = timeUnit.name.replace(/([a-z])([A-Z])/g, "$1 $2").toLowerCase();
        return {
            // tslint:disable:max-line-length
            customPlural: oneOrNoneOf(language.customPlural, languageDefault.customPlural || null, timeUnit.customPlural),
            pluralize: oneOf(language.pluralize, languageDefault.pluralize, timeUnit.pluralize, true),
            readableName: oneOf(language.readableName, languageDefault.readableName, timeUnit.readableName, name),
            symbol: oneOrNoneOf(language.symbol, languageDefault.symbol, timeUnit.symbol),
        };
    }
    // The second is for the writer itself: 1) method, 2) instance, 3) language, 3) defaults
    _createWriterSettingsCache(methodSettings) {
        methodSettings = methodSettings || {};
        const language = localization.Locale.settings.writerOptions || {};
        const terms1 = methodSettings.terms || {};
        const terms2 = this._settings.terms || {};
        const terms3 = language.terms || {};
        return {
            // tslint:disable:max-line-length
            decimalSeparator: oneOf(methodSettings.decimalSeparator, this._settings.decimalSeparator, language.decimalSeparator, "."),
            defaultTimeUnit: oneOf(methodSettings.defaultTimeUnit, this._settings.defaultTimeUnit, language.defaultTimeUnit, "nanosecond"),
            fractionDigits: oneOrNoneOf(methodSettings.fractionDigits, this._settings.fractionDigits, language.fractionDigits),
            hideTimeUnit: oneOf(methodSettings.hideTimeUnit, this._settings.hideTimeUnit, language.hideTimeUnit, false),
            numericNotation: oneOf(methodSettings.numericNotation, this._settings.numericNotation, language.numericNotation, "decimal"),
            numericWriter: oneOrNoneOf(methodSettings.numericWriter, this._settings.numericWriter, language.numericWriter),
            spaceTimeUnit: oneOf(methodSettings.spaceTimeUnit, this._settings.spaceTimeUnit, language.spaceTimeUnit, true),
            terms: {
                infinite: oneOf(terms1.infinite, terms2.infinite, terms3.infinite, "infinite"),
                nan: oneOf(terms1.nan, terms2.nan, terms3.nan, "not-a-number"),
            },
            verboseTimeUnit: oneOf(methodSettings.verboseTimeUnit, this._settings.verboseTimeUnit, language.verboseTimeUnit, false),
        };
    }
    // This parses all numeric properties: numericWriter, numericNotation, fractionDigits and decimalSeparator
    _writeNumber(value) {
        if (typeof (this._writerSettingsCache.numericWriter) === "function") {
            return this._writerSettingsCache.numericWriter(value);
        }
        const terms = this._writerSettingsCache.terms || {};
        if (value === Infinity) {
            return terms.infinite;
        }
        if (isNaN(value)) {
            return terms.nan;
        }
        if (this._writerSettingsCache.numericNotation === "roman") {
            return this._writeRoman(value);
        }
        if (this._writerSettingsCache.numericNotation === "roman-fractions") {
            return this._writeRoman(value, true);
        }
        const decimalSeparator = getLocalDecimalSeparator();
        let result;
        // The only big.js usage for this module is to write the numbers (JS math is faster for calculations):
        if (this._writerSettingsCache.numericNotation === "scientific") {
            result = big_js_1.Big(value).toExponential(this._writerSettingsCache.fractionDigits);
        }
        else {
            result = big_js_1.Big(value).toFixed(this._writerSettingsCache.fractionDigits);
        }
        if (this._writerSettingsCache.decimalSeparator === decimalSeparator) {
            return result;
        }
        return result.replace(decimalSeparator, this._writerSettingsCache.decimalSeparator);
    }
    _writeRoman(value, fractions = false) {
        if (value === 0) {
            return "nulla";
        }
        const fixedValue = Math.trunc(value);
        let amountLeft = fixedValue;
        let result = "";
        while (amountLeft > 0) {
            // The order of romanNumerals is important here: they are written from large to lesser
            for (const entry of romanNumerals) {
                // So, if value is 1111, this accounts for M (1000) first, then C (100), then X (10), then I (1)
                if (amountLeft >= entry[0]) {
                    amountLeft -= entry[0];
                    result += entry[1];
                    break;
                }
            }
        }
        if (fractions) {
            result += this._writeRomanFraction(value - fixedValue);
        }
        return result.length > 0 ? result : "nulla";
    }
    _writeRomanFraction(fraction) {
        let smallestDifference = Number.MAX_SAFE_INTEGER;
        let smallestIndex = -1;
        // Not much to explain: compares all romanFractions with the given fraction and returns the one with the
        // smallest difference (only faster if the difference is exactly zero)
        for (let i = 0; i < romanFractions.length; i += 1) {
            const romanFraction = romanFractions[i];
            const difference = Math.abs(fraction - romanFraction[0]);
            if (difference === 0) {
                return romanFraction[1];
            }
            if (difference < smallestDifference) {
                smallestDifference = difference;
                smallestIndex = i;
            }
        }
        return romanFractions[smallestIndex][1];
    }
    // This parses all linguistic properties: customPlural, pluralize, readableName and symbol
    _writeTimeUnit(value) {
        const timeUnitSettings = this._timeUnitSettingsCache;
        let pluralize = value > 1 && (!!timeUnitSettings.customPlural || timeUnitSettings.pluralize);
        let readableName = timeUnitSettings.readableName;
        // Never pluralize symbols
        if (!this._writerSettingsCache.verboseTimeUnit && timeUnitSettings.symbol) {
            readableName = timeUnitSettings.symbol;
            pluralize = false;
        }
        if (pluralize && !timeUnitSettings.customPlural) {
            readableName = `${readableName}s`;
        }
        if (pluralize && typeof (timeUnitSettings.customPlural) === "string") {
            readableName = timeUnitSettings.customPlural;
        }
        if (pluralize && typeof (timeUnitSettings.customPlural) === "function") {
            readableName = timeUnitSettings.customPlural(value);
        }
        return readableName;
    }
}
exports.TimeWriter = TimeWriter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
